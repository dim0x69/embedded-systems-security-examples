
P3_TZEN_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  0c0001f8  0c0001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0c006288  0c006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c006368  0c006368  0002e020  2**0
                  CONTENTS
  4 .ARM          00000008  0c006368  0c006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c006370  0c006370  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0c006370  0c006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0c006378  0c006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  30000000  0c006380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000100  30000070  30000070  00030070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000170  30000170  00030070  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c70  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000227f  00000000  00000000  0003ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f18  00000000  00000000  00040f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e00  00000000  00000000  00041e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00029d91  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ce9d  00000000  00000000  0006c9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0010ab41  00000000  00000000  0007988e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001843cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ea0  00000000  00000000  0018444c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c0001f8 <__do_global_dtors_aux>:
 c0001f8:	b510      	push	{r4, lr}
 c0001fa:	4c05      	ldr	r4, [pc, #20]	; (c000210 <__do_global_dtors_aux+0x18>)
 c0001fc:	7823      	ldrb	r3, [r4, #0]
 c0001fe:	b933      	cbnz	r3, c00020e <__do_global_dtors_aux+0x16>
 c000200:	4b04      	ldr	r3, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x1c>)
 c000202:	b113      	cbz	r3, c00020a <__do_global_dtors_aux+0x12>
 c000204:	4804      	ldr	r0, [pc, #16]	; (c000218 <__do_global_dtors_aux+0x20>)
 c000206:	e000      	b.n	c00020a <__do_global_dtors_aux+0x12>
 c000208:	bf00      	nop
 c00020a:	2301      	movs	r3, #1
 c00020c:	7023      	strb	r3, [r4, #0]
 c00020e:	bd10      	pop	{r4, pc}
 c000210:	30000070 	.word	0x30000070
 c000214:	00000000 	.word	0x00000000
 c000218:	0c00626c 	.word	0x0c00626c

0c00021c <frame_dummy>:
 c00021c:	b508      	push	{r3, lr}
 c00021e:	4b03      	ldr	r3, [pc, #12]	; (c00022c <frame_dummy+0x10>)
 c000220:	b11b      	cbz	r3, c00022a <frame_dummy+0xe>
 c000222:	4903      	ldr	r1, [pc, #12]	; (c000230 <frame_dummy+0x14>)
 c000224:	4803      	ldr	r0, [pc, #12]	; (c000234 <frame_dummy+0x18>)
 c000226:	e000      	b.n	c00022a <frame_dummy+0xe>
 c000228:	bf00      	nop
 c00022a:	bd08      	pop	{r3, pc}
 c00022c:	00000000 	.word	0x00000000
 c000230:	30000074 	.word	0x30000074
 c000234:	0c00626c 	.word	0x0c00626c

0c000238 <strlen>:
 c000238:	4603      	mov	r3, r0
 c00023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 c00023e:	2a00      	cmp	r2, #0
 c000240:	d1fb      	bne.n	c00023a <strlen+0x2>
 c000242:	1a18      	subs	r0, r3, r0
 c000244:	3801      	subs	r0, #1
 c000246:	4770      	bx	lr

0c000248 <__gnu_cmse_nonsecure_call>:
 c000248:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00024c:	4627      	mov	r7, r4
 c00024e:	46a0      	mov	r8, r4
 c000250:	46a1      	mov	r9, r4
 c000252:	46a2      	mov	sl, r4
 c000254:	46a3      	mov	fp, r4
 c000256:	46a4      	mov	ip, r4
 c000258:	ed2d 8b10 	vpush	{d8-d15}
 c00025c:	f04f 0500 	mov.w	r5, #0
 c000260:	ec45 5b18 	vmov	d8, r5, r5
 c000264:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000268:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00026c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000270:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000274:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000278:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00027c:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000280:	eef1 5a10 	vmrs	r5, fpscr
 c000284:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000288:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c00028c:	4035      	ands	r5, r6
 c00028e:	eee1 5a10 	vmsr	fpscr, r5
 c000292:	f384 8800 	msr	CPSR_f, r4
 c000296:	4625      	mov	r5, r4
 c000298:	4626      	mov	r6, r4
 c00029a:	47a4      	blxns	r4
 c00029c:	ecbd 8b10 	vpop	{d8-d15}
 c0002a0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002a4 <__aeabi_uldivmod>:
 c0002a4:	b953      	cbnz	r3, c0002bc <__aeabi_uldivmod+0x18>
 c0002a6:	b94a      	cbnz	r2, c0002bc <__aeabi_uldivmod+0x18>
 c0002a8:	2900      	cmp	r1, #0
 c0002aa:	bf08      	it	eq
 c0002ac:	2800      	cmpeq	r0, #0
 c0002ae:	bf1c      	itt	ne
 c0002b0:	f04f 31ff 	movne.w	r1, #4294967295
 c0002b4:	f04f 30ff 	movne.w	r0, #4294967295
 c0002b8:	f000 b97c 	b.w	c0005b4 <__aeabi_idiv0>
 c0002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002c4:	f000 f806 	bl	c0002d4 <__udivmoddi4>
 c0002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002d0:	b004      	add	sp, #16
 c0002d2:	4770      	bx	lr

0c0002d4 <__udivmoddi4>:
 c0002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0002d8:	468c      	mov	ip, r1
 c0002da:	9d08      	ldr	r5, [sp, #32]
 c0002dc:	4604      	mov	r4, r0
 c0002de:	468a      	mov	sl, r1
 c0002e0:	2b00      	cmp	r3, #0
 c0002e2:	d14a      	bne.n	c00037a <__udivmoddi4+0xa6>
 c0002e4:	428a      	cmp	r2, r1
 c0002e6:	4617      	mov	r7, r2
 c0002e8:	d962      	bls.n	c0003b0 <__udivmoddi4+0xdc>
 c0002ea:	fab2 f682 	clz	r6, r2
 c0002ee:	b14e      	cbz	r6, c000304 <__udivmoddi4+0x30>
 c0002f0:	f1c6 0e20 	rsb	lr, r6, #32
 c0002f4:	fa01 f306 	lsl.w	r3, r1, r6
 c0002f8:	40b7      	lsls	r7, r6
 c0002fa:	40b4      	lsls	r4, r6
 c0002fc:	fa20 fe0e 	lsr.w	lr, r0, lr
 c000300:	ea4e 0a03 	orr.w	sl, lr, r3
 c000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c000308:	0c23      	lsrs	r3, r4, #16
 c00030a:	fa1f f987 	uxth.w	r9, r7
 c00030e:	fbba fef8 	udiv	lr, sl, r8
 c000312:	fb08 aa1e 	mls	sl, r8, lr, sl
 c000316:	fb0e f209 	mul.w	r2, lr, r9
 c00031a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 c00031e:	429a      	cmp	r2, r3
 c000320:	d90b      	bls.n	c00033a <__udivmoddi4+0x66>
 c000322:	18fb      	adds	r3, r7, r3
 c000324:	f10e 31ff 	add.w	r1, lr, #4294967295
 c000328:	bf2c      	ite	cs
 c00032a:	2001      	movcs	r0, #1
 c00032c:	2000      	movcc	r0, #0
 c00032e:	429a      	cmp	r2, r3
 c000330:	d902      	bls.n	c000338 <__udivmoddi4+0x64>
 c000332:	2800      	cmp	r0, #0
 c000334:	f000 812a 	beq.w	c00058c <__udivmoddi4+0x2b8>
 c000338:	468e      	mov	lr, r1
 c00033a:	1a9a      	subs	r2, r3, r2
 c00033c:	b2a3      	uxth	r3, r4
 c00033e:	fbb2 f0f8 	udiv	r0, r2, r8
 c000342:	fb08 2210 	mls	r2, r8, r0, r2
 c000346:	fb00 f909 	mul.w	r9, r0, r9
 c00034a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 c00034e:	45a1      	cmp	r9, r4
 c000350:	d907      	bls.n	c000362 <__udivmoddi4+0x8e>
 c000352:	193c      	adds	r4, r7, r4
 c000354:	f100 33ff 	add.w	r3, r0, #4294967295
 c000358:	d202      	bcs.n	c000360 <__udivmoddi4+0x8c>
 c00035a:	45a1      	cmp	r9, r4
 c00035c:	f200 8110 	bhi.w	c000580 <__udivmoddi4+0x2ac>
 c000360:	4618      	mov	r0, r3
 c000362:	eba4 0409 	sub.w	r4, r4, r9
 c000366:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 c00036a:	2100      	movs	r1, #0
 c00036c:	b11d      	cbz	r5, c000376 <__udivmoddi4+0xa2>
 c00036e:	40f4      	lsrs	r4, r6
 c000370:	2300      	movs	r3, #0
 c000372:	e9c5 4300 	strd	r4, r3, [r5]
 c000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c00037a:	428b      	cmp	r3, r1
 c00037c:	d908      	bls.n	c000390 <__udivmoddi4+0xbc>
 c00037e:	2d00      	cmp	r5, #0
 c000380:	f000 80f2 	beq.w	c000568 <__udivmoddi4+0x294>
 c000384:	2100      	movs	r1, #0
 c000386:	e9c5 0c00 	strd	r0, ip, [r5]
 c00038a:	4608      	mov	r0, r1
 c00038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c000390:	fab3 f183 	clz	r1, r3
 c000394:	2900      	cmp	r1, #0
 c000396:	d14e      	bne.n	c000436 <__udivmoddi4+0x162>
 c000398:	4563      	cmp	r3, ip
 c00039a:	f0c0 80e8 	bcc.w	c00056e <__udivmoddi4+0x29a>
 c00039e:	4282      	cmp	r2, r0
 c0003a0:	f240 80e5 	bls.w	c00056e <__udivmoddi4+0x29a>
 c0003a4:	4608      	mov	r0, r1
 c0003a6:	2d00      	cmp	r5, #0
 c0003a8:	d0e5      	beq.n	c000376 <__udivmoddi4+0xa2>
 c0003aa:	e9c5 4a00 	strd	r4, sl, [r5]
 c0003ae:	e7e2      	b.n	c000376 <__udivmoddi4+0xa2>
 c0003b0:	b902      	cbnz	r2, c0003b4 <__udivmoddi4+0xe0>
 c0003b2:	deff      	udf	#255	; 0xff
 c0003b4:	fab2 f682 	clz	r6, r2
 c0003b8:	2e00      	cmp	r6, #0
 c0003ba:	f040 8099 	bne.w	c0004f0 <__udivmoddi4+0x21c>
 c0003be:	1a8b      	subs	r3, r1, r2
 c0003c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003c4:	fa1f f882 	uxth.w	r8, r2
 c0003c8:	2101      	movs	r1, #1
 c0003ca:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 c0003ce:	fbb3 f2fe 	udiv	r2, r3, lr
 c0003d2:	fb0e 3012 	mls	r0, lr, r2, r3
 c0003d6:	fb08 f902 	mul.w	r9, r8, r2
 c0003da:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 c0003de:	45e1      	cmp	r9, ip
 c0003e0:	d908      	bls.n	c0003f4 <__udivmoddi4+0x120>
 c0003e2:	eb17 0c0c 	adds.w	ip, r7, ip
 c0003e6:	f102 33ff 	add.w	r3, r2, #4294967295
 c0003ea:	d202      	bcs.n	c0003f2 <__udivmoddi4+0x11e>
 c0003ec:	45e1      	cmp	r9, ip
 c0003ee:	f200 80ca 	bhi.w	c000586 <__udivmoddi4+0x2b2>
 c0003f2:	461a      	mov	r2, r3
 c0003f4:	ebac 0c09 	sub.w	ip, ip, r9
 c0003f8:	b2a3      	uxth	r3, r4
 c0003fa:	fbbc f0fe 	udiv	r0, ip, lr
 c0003fe:	fb0e cc10 	mls	ip, lr, r0, ip
 c000402:	fb08 f800 	mul.w	r8, r8, r0
 c000406:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 c00040a:	45a0      	cmp	r8, r4
 c00040c:	d90e      	bls.n	c00042c <__udivmoddi4+0x158>
 c00040e:	193c      	adds	r4, r7, r4
 c000410:	f100 33ff 	add.w	r3, r0, #4294967295
 c000414:	bf2c      	ite	cs
 c000416:	f04f 0c01 	movcs.w	ip, #1
 c00041a:	f04f 0c00 	movcc.w	ip, #0
 c00041e:	45a0      	cmp	r8, r4
 c000420:	d903      	bls.n	c00042a <__udivmoddi4+0x156>
 c000422:	f1bc 0f00 	cmp.w	ip, #0
 c000426:	f000 80a8 	beq.w	c00057a <__udivmoddi4+0x2a6>
 c00042a:	4618      	mov	r0, r3
 c00042c:	eba4 0408 	sub.w	r4, r4, r8
 c000430:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c000434:	e79a      	b.n	c00036c <__udivmoddi4+0x98>
 c000436:	f1c1 0420 	rsb	r4, r1, #32
 c00043a:	408b      	lsls	r3, r1
 c00043c:	fa02 fe01 	lsl.w	lr, r2, r1
 c000440:	fa0c f601 	lsl.w	r6, ip, r1
 c000444:	40e2      	lsrs	r2, r4
 c000446:	fa20 f704 	lsr.w	r7, r0, r4
 c00044a:	fa2c fc04 	lsr.w	ip, ip, r4
 c00044e:	fa00 f801 	lsl.w	r8, r0, r1
 c000452:	4313      	orrs	r3, r2
 c000454:	433e      	orrs	r6, r7
 c000456:	0c1f      	lsrs	r7, r3, #16
 c000458:	0c32      	lsrs	r2, r6, #16
 c00045a:	fa1f f983 	uxth.w	r9, r3
 c00045e:	fbbc f0f7 	udiv	r0, ip, r7
 c000462:	fb07 cc10 	mls	ip, r7, r0, ip
 c000466:	fb00 fa09 	mul.w	sl, r0, r9
 c00046a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 c00046e:	45e2      	cmp	sl, ip
 c000470:	d908      	bls.n	c000484 <__udivmoddi4+0x1b0>
 c000472:	eb13 0c0c 	adds.w	ip, r3, ip
 c000476:	f100 32ff 	add.w	r2, r0, #4294967295
 c00047a:	d202      	bcs.n	c000482 <__udivmoddi4+0x1ae>
 c00047c:	45e2      	cmp	sl, ip
 c00047e:	f200 8089 	bhi.w	c000594 <__udivmoddi4+0x2c0>
 c000482:	4610      	mov	r0, r2
 c000484:	ebac 0c0a 	sub.w	ip, ip, sl
 c000488:	b2b6      	uxth	r6, r6
 c00048a:	fbbc faf7 	udiv	sl, ip, r7
 c00048e:	fb07 cc1a 	mls	ip, r7, sl, ip
 c000492:	fb0a f909 	mul.w	r9, sl, r9
 c000496:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 c00049a:	4591      	cmp	r9, r2
 c00049c:	d906      	bls.n	c0004ac <__udivmoddi4+0x1d8>
 c00049e:	189a      	adds	r2, r3, r2
 c0004a0:	f10a 36ff 	add.w	r6, sl, #4294967295
 c0004a4:	d201      	bcs.n	c0004aa <__udivmoddi4+0x1d6>
 c0004a6:	4591      	cmp	r9, r2
 c0004a8:	d87a      	bhi.n	c0005a0 <__udivmoddi4+0x2cc>
 c0004aa:	46b2      	mov	sl, r6
 c0004ac:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 c0004b0:	eba2 0209 	sub.w	r2, r2, r9
 c0004b4:	fba0 670e 	umull	r6, r7, r0, lr
 c0004b8:	42ba      	cmp	r2, r7
 c0004ba:	46b4      	mov	ip, r6
 c0004bc:	46b9      	mov	r9, r7
 c0004be:	d302      	bcc.n	c0004c6 <__udivmoddi4+0x1f2>
 c0004c0:	d107      	bne.n	c0004d2 <__udivmoddi4+0x1fe>
 c0004c2:	45b0      	cmp	r8, r6
 c0004c4:	d205      	bcs.n	c0004d2 <__udivmoddi4+0x1fe>
 c0004c6:	ebb6 0c0e 	subs.w	ip, r6, lr
 c0004ca:	eb67 0303 	sbc.w	r3, r7, r3
 c0004ce:	3801      	subs	r0, #1
 c0004d0:	4699      	mov	r9, r3
 c0004d2:	2d00      	cmp	r5, #0
 c0004d4:	d06b      	beq.n	c0005ae <__udivmoddi4+0x2da>
 c0004d6:	ebb8 030c 	subs.w	r3, r8, ip
 c0004da:	eb62 0209 	sbc.w	r2, r2, r9
 c0004de:	fa02 f404 	lsl.w	r4, r2, r4
 c0004e2:	40cb      	lsrs	r3, r1
 c0004e4:	40ca      	lsrs	r2, r1
 c0004e6:	2100      	movs	r1, #0
 c0004e8:	431c      	orrs	r4, r3
 c0004ea:	e9c5 4200 	strd	r4, r2, [r5]
 c0004ee:	e742      	b.n	c000376 <__udivmoddi4+0xa2>
 c0004f0:	40b7      	lsls	r7, r6
 c0004f2:	f1c6 0220 	rsb	r2, r6, #32
 c0004f6:	fa01 f306 	lsl.w	r3, r1, r6
 c0004fa:	40b4      	lsls	r4, r6
 c0004fc:	fa21 fc02 	lsr.w	ip, r1, r2
 c000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c000504:	fa20 f202 	lsr.w	r2, r0, r2
 c000508:	fa1f f887 	uxth.w	r8, r7
 c00050c:	fbbc f1fe 	udiv	r1, ip, lr
 c000510:	431a      	orrs	r2, r3
 c000512:	fb0e cc11 	mls	ip, lr, r1, ip
 c000516:	fb01 f008 	mul.w	r0, r1, r8
 c00051a:	0c13      	lsrs	r3, r2, #16
 c00051c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 c000520:	4560      	cmp	r0, ip
 c000522:	d907      	bls.n	c000534 <__udivmoddi4+0x260>
 c000524:	eb17 0c0c 	adds.w	ip, r7, ip
 c000528:	f101 33ff 	add.w	r3, r1, #4294967295
 c00052c:	d201      	bcs.n	c000532 <__udivmoddi4+0x25e>
 c00052e:	4560      	cmp	r0, ip
 c000530:	d833      	bhi.n	c00059a <__udivmoddi4+0x2c6>
 c000532:	4619      	mov	r1, r3
 c000534:	ebac 0c00 	sub.w	ip, ip, r0
 c000538:	b292      	uxth	r2, r2
 c00053a:	fbbc f0fe 	udiv	r0, ip, lr
 c00053e:	fb0e cc10 	mls	ip, lr, r0, ip
 c000542:	fb00 f308 	mul.w	r3, r0, r8
 c000546:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 c00054a:	4563      	cmp	r3, ip
 c00054c:	d907      	bls.n	c00055e <__udivmoddi4+0x28a>
 c00054e:	eb17 0c0c 	adds.w	ip, r7, ip
 c000552:	f100 32ff 	add.w	r2, r0, #4294967295
 c000556:	d201      	bcs.n	c00055c <__udivmoddi4+0x288>
 c000558:	4563      	cmp	r3, ip
 c00055a:	d825      	bhi.n	c0005a8 <__udivmoddi4+0x2d4>
 c00055c:	4610      	mov	r0, r2
 c00055e:	ebac 0303 	sub.w	r3, ip, r3
 c000562:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000566:	e730      	b.n	c0003ca <__udivmoddi4+0xf6>
 c000568:	4629      	mov	r1, r5
 c00056a:	4628      	mov	r0, r5
 c00056c:	e703      	b.n	c000376 <__udivmoddi4+0xa2>
 c00056e:	1a84      	subs	r4, r0, r2
 c000570:	eb6c 0303 	sbc.w	r3, ip, r3
 c000574:	2001      	movs	r0, #1
 c000576:	469a      	mov	sl, r3
 c000578:	e715      	b.n	c0003a6 <__udivmoddi4+0xd2>
 c00057a:	3802      	subs	r0, #2
 c00057c:	443c      	add	r4, r7
 c00057e:	e755      	b.n	c00042c <__udivmoddi4+0x158>
 c000580:	3802      	subs	r0, #2
 c000582:	443c      	add	r4, r7
 c000584:	e6ed      	b.n	c000362 <__udivmoddi4+0x8e>
 c000586:	3a02      	subs	r2, #2
 c000588:	44bc      	add	ip, r7
 c00058a:	e733      	b.n	c0003f4 <__udivmoddi4+0x120>
 c00058c:	f1ae 0e02 	sub.w	lr, lr, #2
 c000590:	443b      	add	r3, r7
 c000592:	e6d2      	b.n	c00033a <__udivmoddi4+0x66>
 c000594:	3802      	subs	r0, #2
 c000596:	449c      	add	ip, r3
 c000598:	e774      	b.n	c000484 <__udivmoddi4+0x1b0>
 c00059a:	3902      	subs	r1, #2
 c00059c:	44bc      	add	ip, r7
 c00059e:	e7c9      	b.n	c000534 <__udivmoddi4+0x260>
 c0005a0:	f1aa 0a02 	sub.w	sl, sl, #2
 c0005a4:	441a      	add	r2, r3
 c0005a6:	e781      	b.n	c0004ac <__udivmoddi4+0x1d8>
 c0005a8:	3802      	subs	r0, #2
 c0005aa:	44bc      	add	ip, r7
 c0005ac:	e7d7      	b.n	c00055e <__udivmoddi4+0x28a>
 c0005ae:	4629      	mov	r1, r5
 c0005b0:	e6e1      	b.n	c000376 <__udivmoddi4+0xa2>
 c0005b2:	bf00      	nop

0c0005b4 <__aeabi_idiv0>:
 c0005b4:	4770      	bx	lr
 c0005b6:	bf00      	nop

0c0005b8 <__acle_se_SECURE_GenerateRandom>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

CMSE_NS_ENTRY uint32_t SECURE_GenerateRandom(){
 c0005b8:	b580      	push	{r7, lr}
 c0005ba:	b082      	sub	sp, #8
 c0005bc:	af00      	add	r7, sp, #0
	uint32_t random32bit;
	HAL_StatusTypeDef status = HAL_ERROR;
 c0005be:	2301      	movs	r3, #1
 c0005c0:	71fb      	strb	r3, [r7, #7]
	status = HAL_RNG_GenerateRandomNumber(&hrng, &random32bit);
 c0005c2:	463b      	mov	r3, r7
 c0005c4:	4619      	mov	r1, r3
 c0005c6:	4820      	ldr	r0, [pc, #128]	; (c000648 <__acle_se_SECURE_GenerateRandom+0x90>)
 c0005c8:	f003 fa12 	bl	c0039f0 <HAL_RNG_GenerateRandomNumber>
 c0005cc:	4603      	mov	r3, r0
 c0005ce:	71fb      	strb	r3, [r7, #7]
	while (status == HAL_ERROR){}
 c0005d0:	79fb      	ldrb	r3, [r7, #7]
 c0005d2:	2b01      	cmp	r3, #1
 c0005d4:	d0fc      	beq.n	c0005d0 <__acle_se_SECURE_GenerateRandom+0x18>
	return random32bit;
 c0005d6:	683b      	ldr	r3, [r7, #0]
}
 c0005d8:	4618      	mov	r0, r3
 c0005da:	3708      	adds	r7, #8
 c0005dc:	46bd      	mov	sp, r7
 c0005de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0005e2:	4671      	mov	r1, lr
 c0005e4:	4672      	mov	r2, lr
 c0005e6:	4673      	mov	r3, lr
 c0005e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0005ec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0005f0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0005f4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0005f8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0005fc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000600:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000604:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000608:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00060c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000610:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000614:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000618:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00061c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000624:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000628:	f38e 8c00 	msr	CPSR_fs, lr
 c00062c:	b410      	push	{r4}
 c00062e:	eef1 ca10 	vmrs	ip, fpscr
 c000632:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000636:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00063a:	ea0c 0c04 	and.w	ip, ip, r4
 c00063e:	eee1 ca10 	vmsr	fpscr, ip
 c000642:	bc10      	pop	{r4}
 c000644:	46f4      	mov	ip, lr
 c000646:	4774      	bxns	lr
 c000648:	30000154 	.word	0x30000154

0c00064c <__acle_se_SECURE_TransmitRandomUart>:

CMSE_NS_ENTRY void SECURE_TransmitRandomUart(uint32_t random32bit){
 c00064c:	b580      	push	{r7, lr}
 c00064e:	b090      	sub	sp, #64	; 0x40
 c000650:	af00      	add	r7, sp, #0
 c000652:	6078      	str	r0, [r7, #4]
	char buff[50];
	sprintf(buff, "Random: %lu\r\n", random32bit);
 c000654:	f107 030c 	add.w	r3, r7, #12
 c000658:	687a      	ldr	r2, [r7, #4]
 c00065a:	492a      	ldr	r1, [pc, #168]	; (c000704 <__acle_se_SECURE_TransmitRandomUart+0xb8>)
 c00065c:	4618      	mov	r0, r3
 c00065e:	f005 f9ef 	bl	c005a40 <siprintf>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&hlpuart1, (uint8_t*) buff, strlen(buff), 1000);
 c000662:	f107 030c 	add.w	r3, r7, #12
 c000666:	4618      	mov	r0, r3
 c000668:	f7ff fde6 	bl	c000238 <strlen>
 c00066c:	4603      	mov	r3, r0
 c00066e:	b29a      	uxth	r2, r3
 c000670:	f107 010c 	add.w	r1, r7, #12
 c000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000678:	4823      	ldr	r0, [pc, #140]	; (c000708 <__acle_se_SECURE_TransmitRandomUart+0xbc>)
 c00067a:	f003 fbb1 	bl	c003de0 <HAL_UART_Transmit>
 c00067e:	4603      	mov	r3, r0
 c000680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (status != HAL_OK){
 c000684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 c000688:	2b00      	cmp	r3, #0
 c00068a:	d001      	beq.n	c000690 <__acle_se_SECURE_TransmitRandomUart+0x44>
		Error_Handler();
 c00068c:	f000 fb3c 	bl	c000d08 <Error_Handler>
	}
}
 c000690:	bf00      	nop
 c000692:	3740      	adds	r7, #64	; 0x40
 c000694:	46bd      	mov	sp, r7
 c000696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00069a:	4670      	mov	r0, lr
 c00069c:	4671      	mov	r1, lr
 c00069e:	4672      	mov	r2, lr
 c0006a0:	4673      	mov	r3, lr
 c0006a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0006a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0006aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0006ae:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0006b2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0006b6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0006ba:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0006be:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0006c2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0006c6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0006ca:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0006ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0006d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0006d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0006da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0006de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0006e2:	f38e 8c00 	msr	CPSR_fs, lr
 c0006e6:	b410      	push	{r4}
 c0006e8:	eef1 ca10 	vmrs	ip, fpscr
 c0006ec:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0006f0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0006f4:	ea0c 0c04 	and.w	ip, ip, r4
 c0006f8:	eee1 ca10 	vmsr	fpscr, ip
 c0006fc:	bc10      	pop	{r4}
 c0006fe:	46f4      	mov	ip, lr
 c000700:	4774      	bxns	lr
 c000702:	bf00      	nop
 c000704:	0c006288 	.word	0x0c006288
 c000708:	300000a0 	.word	0x300000a0

0c00070c <TransmitCharPUart>:

void TransmitCharPUart(char* text){
 c00070c:	b580      	push	{r7, lr}
 c00070e:	b084      	sub	sp, #16
 c000710:	af00      	add	r7, sp, #0
 c000712:	6078      	str	r0, [r7, #4]
	 HAL_StatusTypeDef status = HAL_UART_Transmit(&hlpuart1, (uint8_t*) text, strlen(text), 1000);
 c000714:	6878      	ldr	r0, [r7, #4]
 c000716:	f7ff fd8f 	bl	c000238 <strlen>
 c00071a:	4603      	mov	r3, r0
 c00071c:	b29a      	uxth	r2, r3
 c00071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000722:	6879      	ldr	r1, [r7, #4]
 c000724:	4806      	ldr	r0, [pc, #24]	; (c000740 <TransmitCharPUart+0x34>)
 c000726:	f003 fb5b 	bl	c003de0 <HAL_UART_Transmit>
 c00072a:	4603      	mov	r3, r0
 c00072c:	73fb      	strb	r3, [r7, #15]
	 if (status != HAL_OK){
 c00072e:	7bfb      	ldrb	r3, [r7, #15]
 c000730:	2b00      	cmp	r3, #0
 c000732:	d001      	beq.n	c000738 <TransmitCharPUart+0x2c>
		 Error_Handler();
 c000734:	f000 fae8 	bl	c000d08 <Error_Handler>
	 }
}
 c000738:	bf00      	nop
 c00073a:	3710      	adds	r7, #16
 c00073c:	46bd      	mov	sp, r7
 c00073e:	bd80      	pop	{r7, pc}
 c000740:	300000a0 	.word	0x300000a0

0c000744 <HAL_GTZC_TZIC_Callback>:

void HAL_GTZC_TZIC_Callback(uint32_t periph){
 c000744:	b580      	push	{r7, lr}
 c000746:	b082      	sub	sp, #8
 c000748:	af00      	add	r7, sp, #0
 c00074a:	6078      	str	r0, [r7, #4]
		if(periph == GTZC_PERIPH_RNG){
 c00074c:	687b      	ldr	r3, [r7, #4]
 c00074e:	4a09      	ldr	r2, [pc, #36]	; (c000774 <HAL_GTZC_TZIC_Callback+0x30>)
 c000750:	4293      	cmp	r3, r2
 c000752:	d10a      	bne.n	c00076a <HAL_GTZC_TZIC_Callback+0x26>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 c000754:	2201      	movs	r2, #1
 c000756:	f44f 7100 	mov.w	r1, #512	; 0x200
 c00075a:	4807      	ldr	r0, [pc, #28]	; (c000778 <HAL_GTZC_TZIC_Callback+0x34>)
 c00075c:	f001 f972 	bl	c001a44 <HAL_GPIO_WritePin>
			TransmitCharPUart("Security Violation in RNG\r\nReseting System now.\r\n");
 c000760:	4806      	ldr	r0, [pc, #24]	; (c00077c <HAL_GTZC_TZIC_Callback+0x38>)
 c000762:	f7ff ffd3 	bl	c00070c <TransmitCharPUart>
			HAL_NVIC_SystemReset();
 c000766:	f000 ffdc 	bl	c001722 <HAL_NVIC_SystemReset>
		}
}
 c00076a:	bf00      	nop
 c00076c:	3708      	adds	r7, #8
 c00076e:	46bd      	mov	sp, r7
 c000770:	bd80      	pop	{r7, pc}
 c000772:	bf00      	nop
 c000774:	1000000e 	.word	0x1000000e
 c000778:	52020000 	.word	0x52020000
 c00077c:	0c006298 	.word	0x0c006298

0c000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000780:	b580      	push	{r7, lr}
 c000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000784:	f000 fe43 	bl	c00140e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c000788:	f000 f854 	bl	c000834 <SystemClock_Config>

  /* GTZC initialisation */
  MX_GTZC_Init();
 c00078c:	f000 f8b4 	bl	c0008f8 <MX_GTZC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000790:	f000 fa44 	bl	c000c1c <MX_GPIO_Init>
  MX_RTC_Init();
 c000794:	f000 f9e0 	bl	c000b58 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 c000798:	f000 f97a 	bl	c000a90 <MX_LPUART1_UART_Init>
  MX_RNG_Init();
 c00079c:	f000 f9c6 	bl	c000b2c <MX_RNG_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0007a0:	f000 f802 	bl	c0007a8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0007a4:	e7fe      	b.n	c0007a4 <main+0x24>
	...

0c0007a8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch 
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0007a8:	b590      	push	{r4, r7, lr}
 c0007aa:	b083      	sub	sp, #12
 c0007ac:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0007ae:	4b1d      	ldr	r3, [pc, #116]	; (c000824 <NonSecure_Init+0x7c>)
 c0007b0:	4a1d      	ldr	r2, [pc, #116]	; (c000828 <NonSecure_Init+0x80>)
 c0007b2:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0007b4:	4b1c      	ldr	r3, [pc, #112]	; (c000828 <NonSecure_Init+0x80>)
 c0007b6:	681b      	ldr	r3, [r3, #0]
 c0007b8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0007ba:	683b      	ldr	r3, [r7, #0]
 c0007bc:	f383 8888 	msr	MSP_NS, r3

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0007c0:	4b1a      	ldr	r3, [pc, #104]	; (c00082c <NonSecure_Init+0x84>)
 c0007c2:	681b      	ldr	r3, [r3, #0]
 c0007c4:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0007c6:	687b      	ldr	r3, [r7, #4]
 c0007c8:	461c      	mov	r4, r3
 c0007ca:	0864      	lsrs	r4, r4, #1
 c0007cc:	0064      	lsls	r4, r4, #1
 c0007ce:	4620      	mov	r0, r4
 c0007d0:	4621      	mov	r1, r4
 c0007d2:	4622      	mov	r2, r4
 c0007d4:	4623      	mov	r3, r4
 c0007d6:	ed9f 0a16 	vldr	s0, [pc, #88]	; c000830 <NonSecure_Init+0x88>
 c0007da:	eddf 0a15 	vldr	s1, [pc, #84]	; c000830 <NonSecure_Init+0x88>
 c0007de:	ed9f 1a14 	vldr	s2, [pc, #80]	; c000830 <NonSecure_Init+0x88>
 c0007e2:	eddf 1a13 	vldr	s3, [pc, #76]	; c000830 <NonSecure_Init+0x88>
 c0007e6:	ed9f 2a12 	vldr	s4, [pc, #72]	; c000830 <NonSecure_Init+0x88>
 c0007ea:	eddf 2a11 	vldr	s5, [pc, #68]	; c000830 <NonSecure_Init+0x88>
 c0007ee:	ed9f 3a10 	vldr	s6, [pc, #64]	; c000830 <NonSecure_Init+0x88>
 c0007f2:	eddf 3a0f 	vldr	s7, [pc, #60]	; c000830 <NonSecure_Init+0x88>
 c0007f6:	ed9f 4a0e 	vldr	s8, [pc, #56]	; c000830 <NonSecure_Init+0x88>
 c0007fa:	eddf 4a0d 	vldr	s9, [pc, #52]	; c000830 <NonSecure_Init+0x88>
 c0007fe:	ed9f 5a0c 	vldr	s10, [pc, #48]	; c000830 <NonSecure_Init+0x88>
 c000802:	eddf 5a0b 	vldr	s11, [pc, #44]	; c000830 <NonSecure_Init+0x88>
 c000806:	ed9f 6a0a 	vldr	s12, [pc, #40]	; c000830 <NonSecure_Init+0x88>
 c00080a:	eddf 6a09 	vldr	s13, [pc, #36]	; c000830 <NonSecure_Init+0x88>
 c00080e:	ed9f 7a08 	vldr	s14, [pc, #32]	; c000830 <NonSecure_Init+0x88>
 c000812:	eddf 7a07 	vldr	s15, [pc, #28]	; c000830 <NonSecure_Init+0x88>
 c000816:	f7ff fd17 	bl	c000248 <__gnu_cmse_nonsecure_call>
}
 c00081a:	bf00      	nop
 c00081c:	370c      	adds	r7, #12
 c00081e:	46bd      	mov	sp, r7
 c000820:	bd90      	pop	{r4, r7, pc}
 c000822:	bf00      	nop
 c000824:	e002ed00 	.word	0xe002ed00
 c000828:	08040000 	.word	0x08040000
 c00082c:	08040004 	.word	0x08040004
 c000830:	00000000 	.word	0x00000000

0c000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000834:	b580      	push	{r7, lr}
 c000836:	b098      	sub	sp, #96	; 0x60
 c000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00083a:	f107 0318 	add.w	r3, r7, #24
 c00083e:	2248      	movs	r2, #72	; 0x48
 c000840:	2100      	movs	r1, #0
 c000842:	4618      	mov	r0, r3
 c000844:	f005 f8f4 	bl	c005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c000848:	1d3b      	adds	r3, r7, #4
 c00084a:	2200      	movs	r2, #0
 c00084c:	601a      	str	r2, [r3, #0]
 c00084e:	605a      	str	r2, [r3, #4]
 c000850:	609a      	str	r2, [r3, #8]
 c000852:	60da      	str	r2, [r3, #12]
 c000854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c000856:	2000      	movs	r0, #0
 c000858:	f001 fb8c 	bl	c001f74 <HAL_PWREx_ControlVoltageScaling>
 c00085c:	4603      	mov	r3, r0
 c00085e:	2b00      	cmp	r3, #0
 c000860:	d001      	beq.n	c000866 <SystemClock_Config+0x32>
  {
    Error_Handler();
 c000862:	f000 fa51 	bl	c000d08 <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 c000866:	f001 fb67 	bl	c001f38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 c00086a:	4b22      	ldr	r3, [pc, #136]	; (c0008f4 <SystemClock_Config+0xc0>)
 c00086c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c000870:	4a20      	ldr	r2, [pc, #128]	; (c0008f4 <SystemClock_Config+0xc0>)
 c000872:	f023 0318 	bic.w	r3, r3, #24
 c000876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 c00087a:	2334      	movs	r3, #52	; 0x34
 c00087c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 c00087e:	2381      	movs	r3, #129	; 0x81
 c000880:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c000882:	2301      	movs	r3, #1
 c000884:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c000886:	2301      	movs	r3, #1
 c000888:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c00088a:	2300      	movs	r3, #0
 c00088c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 c00088e:	2360      	movs	r3, #96	; 0x60
 c000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000892:	2302      	movs	r3, #2
 c000894:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c000896:	2301      	movs	r3, #1
 c000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 c00089a:	2301      	movs	r3, #1
 c00089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c00089e:	2337      	movs	r3, #55	; 0x37
 c0008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0008a2:	2307      	movs	r3, #7
 c0008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0008a6:	2302      	movs	r3, #2
 c0008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0008aa:	2302      	movs	r3, #2
 c0008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0008ae:	f107 0318 	add.w	r3, r7, #24
 c0008b2:	4618      	mov	r0, r3
 c0008b4:	f001 fbfe 	bl	c0020b4 <HAL_RCC_OscConfig>
 c0008b8:	4603      	mov	r3, r0
 c0008ba:	2b00      	cmp	r3, #0
 c0008bc:	d001      	beq.n	c0008c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 c0008be:	f000 fa23 	bl	c000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0008c2:	230f      	movs	r3, #15
 c0008c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0008c6:	2303      	movs	r3, #3
 c0008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0008ca:	2300      	movs	r3, #0
 c0008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0008ce:	2300      	movs	r3, #0
 c0008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0008d2:	2300      	movs	r3, #0
 c0008d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0008d6:	1d3b      	adds	r3, r7, #4
 c0008d8:	2105      	movs	r1, #5
 c0008da:	4618      	mov	r0, r3
 c0008dc:	f002 f856 	bl	c00298c <HAL_RCC_ClockConfig>
 c0008e0:	4603      	mov	r3, r0
 c0008e2:	2b00      	cmp	r3, #0
 c0008e4:	d001      	beq.n	c0008ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 c0008e6:	f000 fa0f 	bl	c000d08 <Error_Handler>
  }
}
 c0008ea:	bf00      	nop
 c0008ec:	3760      	adds	r7, #96	; 0x60
 c0008ee:	46bd      	mov	sp, r7
 c0008f0:	bd80      	pop	{r7, pc}
 c0008f2:	bf00      	nop
 c0008f4:	50021000 	.word	0x50021000

0c0008f8 <MX_GTZC_Init>:
  * @brief GTZC Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_Init(void)
{
 c0008f8:	b580      	push	{r7, lr}
 c0008fa:	b0b6      	sub	sp, #216	; 0xd8
 c0008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_Init 0 */

  /* USER CODE END GTZC_Init 0 */

  MPCBB_ConfigTypeDef MPCBB1_NonSecureArea_Desc = {0};
 c0008fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 c000902:	226c      	movs	r2, #108	; 0x6c
 c000904:	2100      	movs	r1, #0
 c000906:	4618      	mov	r0, r3
 c000908:	f005 f892 	bl	c005a30 <memset>
  MPCBB_ConfigTypeDef MPCBB2_NonSecureArea_Desc = {0};
 c00090c:	463b      	mov	r3, r7
 c00090e:	226c      	movs	r2, #108	; 0x6c
 c000910:	2100      	movs	r1, #0
 c000912:	4618      	mov	r0, r3
 c000914:	f005 f88c 	bl	c005a30 <memset>

  /* USER CODE BEGIN GTZC_Init 1 */

  /* USER CODE END GTZC_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000918:	f240 3101 	movw	r1, #769	; 0x301
 c00091c:	2015      	movs	r0, #21
 c00091e:	f001 f8e1 	bl	c001ae4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000922:	4603      	mov	r3, r0
 c000924:	2b00      	cmp	r3, #0
 c000926:	d001      	beq.n	c00092c <MX_GTZC_Init+0x34>
  {
    Error_Handler();
 c000928:	f000 f9ee 	bl	c000d08 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_VREFBUF, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00092c:	f240 3101 	movw	r1, #769	; 0x301
 c000930:	201c      	movs	r0, #28
 c000932:	f001 f8d7 	bl	c001ae4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000936:	4603      	mov	r3, r0
 c000938:	2b00      	cmp	r3, #0
 c00093a:	d001      	beq.n	c000940 <MX_GTZC_Init+0x48>
  {
    Error_Handler();
 c00093c:	f000 f9e4 	bl	c000d08 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_RNG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000940:	f240 3101 	movw	r1, #769	; 0x301
 c000944:	484f      	ldr	r0, [pc, #316]	; (c000a84 <MX_GTZC_Init+0x18c>)
 c000946:	f001 f8cd 	bl	c001ae4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00094a:	4603      	mov	r3, r0
 c00094c:	2b00      	cmp	r3, #0
 c00094e:	d001      	beq.n	c000954 <MX_GTZC_Init+0x5c>
  {
    Error_Handler();
 c000950:	f000 f9da 	bl	c000d08 <Error_Handler>
  }
  MPCBB1_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000954:	2300      	movs	r3, #0
 c000956:	66fb      	str	r3, [r7, #108]	; 0x6c
  MPCBB1_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000958:	2300      	movs	r3, #0
 c00095a:	673b      	str	r3, [r7, #112]	; 0x70
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00095c:	f04f 33ff 	mov.w	r3, #4294967295
 c000960:	677b      	str	r3, [r7, #116]	; 0x74
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000962:	f04f 33ff 	mov.w	r3, #4294967295
 c000966:	67bb      	str	r3, [r7, #120]	; 0x78
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000968:	f04f 33ff 	mov.w	r3, #4294967295
 c00096c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00096e:	f04f 33ff 	mov.w	r3, #4294967295
 c000972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000976:	f04f 33ff 	mov.w	r3, #4294967295
 c00097a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c00097e:	f04f 33ff 	mov.w	r3, #4294967295
 c000982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c000986:	f04f 33ff 	mov.w	r3, #4294967295
 c00098a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00098e:	f04f 33ff 	mov.w	r3, #4294967295
 c000992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c000996:	f04f 33ff 	mov.w	r3, #4294967295
 c00099a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c00099e:	f04f 33ff 	mov.w	r3, #4294967295
 c0009a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0009a6:	f04f 33ff 	mov.w	r3, #4294967295
 c0009aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0009ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0009b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0009b6:	2300      	movs	r3, #0
 c0009b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0009bc:	2300      	movs	r3, #0
 c0009be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0009c2:	2300      	movs	r3, #0
 c0009c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0009c8:	2300      	movs	r3, #0
 c0009ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0009ce:	2300      	movs	r3, #0
 c0009d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0009d4:	2300      	movs	r3, #0
 c0009d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0009da:	2300      	movs	r3, #0
 c0009dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0009e0:	2300      	movs	r3, #0
 c0009e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0009e6:	2300      	movs	r3, #0
 c0009e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0009ec:	2300      	movs	r3, #0
 c0009ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0009f2:	2300      	movs	r3, #0
 c0009f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0009f8:	2300      	movs	r3, #0
 c0009fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0009fe:	2300      	movs	r3, #0
 c000a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB1_NonSecureArea_Desc) != HAL_OK)
 c000a04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 c000a08:	4619      	mov	r1, r3
 c000a0a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c000a0e:	f001 f941 	bl	c001c94 <HAL_GTZC_MPCBB_ConfigMem>
 c000a12:	4603      	mov	r3, r0
 c000a14:	2b00      	cmp	r3, #0
 c000a16:	d001      	beq.n	c000a1c <MX_GTZC_Init+0x124>
  {
    Error_Handler();
 c000a18:	f000 f976 	bl	c000d08 <Error_Handler>
  }
  MPCBB2_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000a1c:	2300      	movs	r3, #0
 c000a1e:	603b      	str	r3, [r7, #0]
  MPCBB2_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000a20:	2300      	movs	r3, #0
 c000a22:	607b      	str	r3, [r7, #4]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000a24:	2300      	movs	r3, #0
 c000a26:	60bb      	str	r3, [r7, #8]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000a28:	2300      	movs	r3, #0
 c000a2a:	60fb      	str	r3, [r7, #12]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000a2c:	2300      	movs	r3, #0
 c000a2e:	613b      	str	r3, [r7, #16]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000a30:	2300      	movs	r3, #0
 c000a32:	617b      	str	r3, [r7, #20]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000a34:	2300      	movs	r3, #0
 c000a36:	61bb      	str	r3, [r7, #24]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000a38:	2300      	movs	r3, #0
 c000a3a:	61fb      	str	r3, [r7, #28]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000a3c:	2300      	movs	r3, #0
 c000a3e:	623b      	str	r3, [r7, #32]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000a40:	2300      	movs	r3, #0
 c000a42:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000a44:	2300      	movs	r3, #0
 c000a46:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB2_NonSecureArea_Desc) != HAL_OK)
 c000a48:	463b      	mov	r3, r7
 c000a4a:	4619      	mov	r1, r3
 c000a4c:	480e      	ldr	r0, [pc, #56]	; (c000a88 <MX_GTZC_Init+0x190>)
 c000a4e:	f001 f921 	bl	c001c94 <HAL_GTZC_MPCBB_ConfigMem>
 c000a52:	4603      	mov	r3, r0
 c000a54:	2b00      	cmp	r3, #0
 c000a56:	d001      	beq.n	c000a5c <MX_GTZC_Init+0x164>
  {
    Error_Handler();
 c000a58:	f000 f956 	bl	c000d08 <Error_Handler>
  }
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_RNG) != HAL_OK)
 c000a5c:	4809      	ldr	r0, [pc, #36]	; (c000a84 <MX_GTZC_Init+0x18c>)
 c000a5e:	f001 f99d 	bl	c001d9c <HAL_GTZC_TZIC_EnableIT>
 c000a62:	4603      	mov	r3, r0
 c000a64:	2b00      	cmp	r3, #0
 c000a66:	d001      	beq.n	c000a6c <MX_GTZC_Init+0x174>
  {
    Error_Handler();
 c000a68:	f000 f94e 	bl	c000d08 <Error_Handler>
  }
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_FLASH) != HAL_OK)
 c000a6c:	4807      	ldr	r0, [pc, #28]	; (c000a8c <MX_GTZC_Init+0x194>)
 c000a6e:	f001 f995 	bl	c001d9c <HAL_GTZC_TZIC_EnableIT>
 c000a72:	4603      	mov	r3, r0
 c000a74:	2b00      	cmp	r3, #0
 c000a76:	d001      	beq.n	c000a7c <MX_GTZC_Init+0x184>
  {
    Error_Handler();
 c000a78:	f000 f946 	bl	c000d08 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_Init 2 */

  /* USER CODE END GTZC_Init 2 */

}
 c000a7c:	bf00      	nop
 c000a7e:	37d8      	adds	r7, #216	; 0xd8
 c000a80:	46bd      	mov	sp, r7
 c000a82:	bd80      	pop	{r7, pc}
 c000a84:	1000000e 	.word	0x1000000e
 c000a88:	30030000 	.word	0x30030000
 c000a8c:	1000001a 	.word	0x1000001a

0c000a90 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 c000a90:	b580      	push	{r7, lr}
 c000a92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c000a94:	4b22      	ldr	r3, [pc, #136]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000a96:	4a23      	ldr	r2, [pc, #140]	; (c000b24 <MX_LPUART1_UART_Init+0x94>)
 c000a98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 c000a9a:	4b21      	ldr	r3, [pc, #132]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000a9c:	4a22      	ldr	r2, [pc, #136]	; (c000b28 <MX_LPUART1_UART_Init+0x98>)
 c000a9e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000aa0:	4b1f      	ldr	r3, [pc, #124]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000aa2:	2200      	movs	r2, #0
 c000aa4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c000aa6:	4b1e      	ldr	r3, [pc, #120]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000aa8:	2200      	movs	r2, #0
 c000aaa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c000aac:	4b1c      	ldr	r3, [pc, #112]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000aae:	2200      	movs	r2, #0
 c000ab0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c000ab2:	4b1b      	ldr	r3, [pc, #108]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000ab4:	220c      	movs	r2, #12
 c000ab6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000ab8:	4b19      	ldr	r3, [pc, #100]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000aba:	2200      	movs	r2, #0
 c000abc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000abe:	4b18      	ldr	r3, [pc, #96]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000ac0:	2200      	movs	r2, #0
 c000ac2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000ac4:	4b16      	ldr	r3, [pc, #88]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000ac6:	2200      	movs	r2, #0
 c000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000aca:	4b15      	ldr	r3, [pc, #84]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000acc:	2200      	movs	r2, #0
 c000ace:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c000ad0:	4b13      	ldr	r3, [pc, #76]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000ad2:	2200      	movs	r2, #0
 c000ad4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c000ad6:	4812      	ldr	r0, [pc, #72]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000ad8:	f003 f932 	bl	c003d40 <HAL_UART_Init>
 c000adc:	4603      	mov	r3, r0
 c000ade:	2b00      	cmp	r3, #0
 c000ae0:	d001      	beq.n	c000ae6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 c000ae2:	f000 f911 	bl	c000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000ae6:	2100      	movs	r1, #0
 c000ae8:	480d      	ldr	r0, [pc, #52]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000aea:	f004 fe92 	bl	c005812 <HAL_UARTEx_SetTxFifoThreshold>
 c000aee:	4603      	mov	r3, r0
 c000af0:	2b00      	cmp	r3, #0
 c000af2:	d001      	beq.n	c000af8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 c000af4:	f000 f908 	bl	c000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000af8:	2100      	movs	r1, #0
 c000afa:	4809      	ldr	r0, [pc, #36]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000afc:	f004 fec7 	bl	c00588e <HAL_UARTEx_SetRxFifoThreshold>
 c000b00:	4603      	mov	r3, r0
 c000b02:	2b00      	cmp	r3, #0
 c000b04:	d001      	beq.n	c000b0a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 c000b06:	f000 f8ff 	bl	c000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c000b0a:	4805      	ldr	r0, [pc, #20]	; (c000b20 <MX_LPUART1_UART_Init+0x90>)
 c000b0c:	f004 fe48 	bl	c0057a0 <HAL_UARTEx_DisableFifoMode>
 c000b10:	4603      	mov	r3, r0
 c000b12:	2b00      	cmp	r3, #0
 c000b14:	d001      	beq.n	c000b1a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 c000b16:	f000 f8f7 	bl	c000d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c000b1a:	bf00      	nop
 c000b1c:	bd80      	pop	{r7, pc}
 c000b1e:	bf00      	nop
 c000b20:	300000a0 	.word	0x300000a0
 c000b24:	50008000 	.word	0x50008000
 c000b28:	00033324 	.word	0x00033324

0c000b2c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 c000b2c:	b580      	push	{r7, lr}
 c000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 c000b30:	4b07      	ldr	r3, [pc, #28]	; (c000b50 <MX_RNG_Init+0x24>)
 c000b32:	4a08      	ldr	r2, [pc, #32]	; (c000b54 <MX_RNG_Init+0x28>)
 c000b34:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 c000b36:	4b06      	ldr	r3, [pc, #24]	; (c000b50 <MX_RNG_Init+0x24>)
 c000b38:	2200      	movs	r2, #0
 c000b3a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 c000b3c:	4804      	ldr	r0, [pc, #16]	; (c000b50 <MX_RNG_Init+0x24>)
 c000b3e:	f002 fecd 	bl	c0038dc <HAL_RNG_Init>
 c000b42:	4603      	mov	r3, r0
 c000b44:	2b00      	cmp	r3, #0
 c000b46:	d001      	beq.n	c000b4c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 c000b48:	f000 f8de 	bl	c000d08 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 c000b4c:	bf00      	nop
 c000b4e:	bd80      	pop	{r7, pc}
 c000b50:	30000154 	.word	0x30000154
 c000b54:	520c0800 	.word	0x520c0800

0c000b58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 c000b58:	b580      	push	{r7, lr}
 c000b5a:	b08c      	sub	sp, #48	; 0x30
 c000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 c000b5e:	f107 0318 	add.w	r3, r7, #24
 c000b62:	2200      	movs	r2, #0
 c000b64:	601a      	str	r2, [r3, #0]
 c000b66:	605a      	str	r2, [r3, #4]
 c000b68:	609a      	str	r2, [r3, #8]
 c000b6a:	60da      	str	r2, [r3, #12]
 c000b6c:	611a      	str	r2, [r3, #16]
 c000b6e:	615a      	str	r2, [r3, #20]
  RTC_SecureStateTypeDef secureState = {0};
 c000b70:	1d3b      	adds	r3, r7, #4
 c000b72:	2200      	movs	r2, #0
 c000b74:	601a      	str	r2, [r3, #0]
 c000b76:	605a      	str	r2, [r3, #4]
 c000b78:	609a      	str	r2, [r3, #8]
 c000b7a:	60da      	str	r2, [r3, #12]
 c000b7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 c000b7e:	4b25      	ldr	r3, [pc, #148]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000b80:	4a25      	ldr	r2, [pc, #148]	; (c000c18 <MX_RTC_Init+0xc0>)
 c000b82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 c000b84:	4b23      	ldr	r3, [pc, #140]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000b86:	2200      	movs	r2, #0
 c000b88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 c000b8a:	4b22      	ldr	r3, [pc, #136]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000b8c:	227f      	movs	r2, #127	; 0x7f
 c000b8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 c000b90:	4b20      	ldr	r3, [pc, #128]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000b92:	22ff      	movs	r2, #255	; 0xff
 c000b94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 c000b96:	4b1f      	ldr	r3, [pc, #124]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000b98:	2200      	movs	r2, #0
 c000b9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 c000b9c:	4b1d      	ldr	r3, [pc, #116]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000b9e:	2200      	movs	r2, #0
 c000ba0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 c000ba2:	4b1c      	ldr	r3, [pc, #112]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000ba4:	2200      	movs	r2, #0
 c000ba6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 c000ba8:	4b1a      	ldr	r3, [pc, #104]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c000bae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 c000bb0:	4b18      	ldr	r3, [pc, #96]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000bb2:	2200      	movs	r2, #0
 c000bb4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 c000bb6:	4817      	ldr	r0, [pc, #92]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000bb8:	f002 ff6a 	bl	c003a90 <HAL_RTC_Init>
 c000bbc:	4603      	mov	r3, r0
 c000bbe:	2b00      	cmp	r3, #0
 c000bc0:	d001      	beq.n	c000bc6 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 c000bc2:	f000 f8a1 	bl	c000d08 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 c000bc6:	2300      	movs	r3, #0
 c000bc8:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 c000bca:	2300      	movs	r3, #0
 c000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c000bce:	2300      	movs	r3, #0
 c000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c000bd2:	2300      	movs	r3, #0
 c000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 c000bd6:	f107 0318 	add.w	r3, r7, #24
 c000bda:	4619      	mov	r1, r3
 c000bdc:	480d      	ldr	r0, [pc, #52]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000bde:	f003 f883 	bl	c003ce8 <HAL_RTCEx_PrivilegeModeSet>
 c000be2:	4603      	mov	r3, r0
 c000be4:	2b00      	cmp	r3, #0
 c000be6:	d001      	beq.n	c000bec <MX_RTC_Init+0x94>
  {
    Error_Handler();
 c000be8:	f000 f88e 	bl	c000d08 <Error_Handler>
  }
  secureState.rtcSecureFull = RTC_SECURE_FULL_YES;
 c000bec:	2300      	movs	r3, #0
 c000bee:	607b      	str	r3, [r7, #4]
  secureState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c000bf0:	2300      	movs	r3, #0
 c000bf2:	613b      	str	r3, [r7, #16]
  secureState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c000bf4:	2300      	movs	r3, #0
 c000bf6:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_SecureModeSet(&hrtc, &secureState) != HAL_OK)
 c000bf8:	1d3b      	adds	r3, r7, #4
 c000bfa:	4619      	mov	r1, r3
 c000bfc:	4805      	ldr	r0, [pc, #20]	; (c000c14 <MX_RTC_Init+0xbc>)
 c000bfe:	f003 f84d 	bl	c003c9c <HAL_RTCEx_SecureModeSet>
 c000c02:	4603      	mov	r3, r0
 c000c04:	2b00      	cmp	r3, #0
 c000c06:	d001      	beq.n	c000c0c <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 c000c08:	f000 f87e 	bl	c000d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 c000c0c:	bf00      	nop
 c000c0e:	3730      	adds	r7, #48	; 0x30
 c000c10:	46bd      	mov	sp, r7
 c000c12:	bd80      	pop	{r7, pc}
 c000c14:	3000012c 	.word	0x3000012c
 c000c18:	50002800 	.word	0x50002800

0c000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000c1c:	b580      	push	{r7, lr}
 c000c1e:	b08a      	sub	sp, #40	; 0x28
 c000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000c22:	f107 0314 	add.w	r3, r7, #20
 c000c26:	2200      	movs	r2, #0
 c000c28:	601a      	str	r2, [r3, #0]
 c000c2a:	605a      	str	r2, [r3, #4]
 c000c2c:	609a      	str	r2, [r3, #8]
 c000c2e:	60da      	str	r2, [r3, #12]
 c000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000c32:	4b32      	ldr	r3, [pc, #200]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c36:	4a31      	ldr	r2, [pc, #196]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c38:	f043 0304 	orr.w	r3, r3, #4
 c000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c3e:	4b2f      	ldr	r3, [pc, #188]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c42:	f003 0304 	and.w	r3, r3, #4
 c000c46:	613b      	str	r3, [r7, #16]
 c000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000c4a:	4b2c      	ldr	r3, [pc, #176]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c4e:	4a2b      	ldr	r2, [pc, #172]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c56:	4b29      	ldr	r3, [pc, #164]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000c5e:	60fb      	str	r3, [r7, #12]
 c000c60:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 c000c62:	f001 f9e3 	bl	c00202c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000c66:	4b25      	ldr	r3, [pc, #148]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c6a:	4a24      	ldr	r2, [pc, #144]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c6c:	f043 0301 	orr.w	r3, r3, #1
 c000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c72:	4b22      	ldr	r3, [pc, #136]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c76:	f003 0301 	and.w	r3, r3, #1
 c000c7a:	60bb      	str	r3, [r7, #8]
 c000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000c7e:	4b1f      	ldr	r3, [pc, #124]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c82:	4a1e      	ldr	r2, [pc, #120]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c84:	f043 0302 	orr.w	r3, r3, #2
 c000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c8a:	4b1c      	ldr	r3, [pc, #112]	; (c000cfc <MX_GPIO_Init+0xe0>)
 c000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c8e:	f003 0302 	and.w	r3, r3, #2
 c000c92:	607b      	str	r3, [r7, #4]
 c000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 c000c96:	2200      	movs	r2, #0
 c000c98:	2180      	movs	r1, #128	; 0x80
 c000c9a:	4819      	ldr	r0, [pc, #100]	; (c000d00 <MX_GPIO_Init+0xe4>)
 c000c9c:	f000 fed2 	bl	c001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 c000ca0:	2200      	movs	r2, #0
 c000ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 c000ca6:	4817      	ldr	r0, [pc, #92]	; (c000d04 <MX_GPIO_Init+0xe8>)
 c000ca8:	f000 fecc 	bl	c001a44 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_13|VBUS_SENSE_Pin, GPIO_PIN_NSEC);
 c000cac:	2200      	movs	r2, #0
 c000cae:	f242 0104 	movw	r1, #8196	; 0x2004
 c000cb2:	4813      	ldr	r0, [pc, #76]	; (c000d00 <MX_GPIO_Init+0xe4>)
 c000cb4:	f000 fede 	bl	c001a74 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 c000cb8:	2380      	movs	r3, #128	; 0x80
 c000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000cbc:	2301      	movs	r3, #1
 c000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000cc0:	2300      	movs	r3, #0
 c000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000cc4:	2300      	movs	r3, #0
 c000cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 c000cc8:	f107 0314 	add.w	r3, r7, #20
 c000ccc:	4619      	mov	r1, r3
 c000cce:	480c      	ldr	r0, [pc, #48]	; (c000d00 <MX_GPIO_Init+0xe4>)
 c000cd0:	f000 fd38 	bl	c001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 c000cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 c000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000cda:	2301      	movs	r3, #1
 c000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000cde:	2300      	movs	r3, #0
 c000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000ce2:	2300      	movs	r3, #0
 c000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 c000ce6:	f107 0314 	add.w	r3, r7, #20
 c000cea:	4619      	mov	r1, r3
 c000cec:	4805      	ldr	r0, [pc, #20]	; (c000d04 <MX_GPIO_Init+0xe8>)
 c000cee:	f000 fd29 	bl	c001744 <HAL_GPIO_Init>

}
 c000cf2:	bf00      	nop
 c000cf4:	3728      	adds	r7, #40	; 0x28
 c000cf6:	46bd      	mov	sp, r7
 c000cf8:	bd80      	pop	{r7, pc}
 c000cfa:	bf00      	nop
 c000cfc:	50021000 	.word	0x50021000
 c000d00:	52020800 	.word	0x52020800
 c000d04:	52020000 	.word	0x52020000

0c000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000d08:	b480      	push	{r7}
 c000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 c000d0c:	bf00      	nop
 c000d0e:	46bd      	mov	sp, r7
 c000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d14:	4770      	bx	lr
	...

0c000d18 <__acle_se_SECURE_RegisterCallback>:
 c000d18:	b480      	push	{r7}
 c000d1a:	b083      	sub	sp, #12
 c000d1c:	af00      	add	r7, sp, #0
 c000d1e:	4603      	mov	r3, r0
 c000d20:	6039      	str	r1, [r7, #0]
 c000d22:	71fb      	strb	r3, [r7, #7]
 c000d24:	683b      	ldr	r3, [r7, #0]
 c000d26:	2b00      	cmp	r3, #0
 c000d28:	d00d      	beq.n	c000d46 <__acle_se_SECURE_RegisterCallback+0x2e>
 c000d2a:	79fb      	ldrb	r3, [r7, #7]
 c000d2c:	2b00      	cmp	r3, #0
 c000d2e:	d002      	beq.n	c000d36 <__acle_se_SECURE_RegisterCallback+0x1e>
 c000d30:	2b01      	cmp	r3, #1
 c000d32:	d004      	beq.n	c000d3e <__acle_se_SECURE_RegisterCallback+0x26>
 c000d34:	e008      	b.n	c000d48 <__acle_se_SECURE_RegisterCallback+0x30>
 c000d36:	4a21      	ldr	r2, [pc, #132]	; (c000dbc <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000d38:	683b      	ldr	r3, [r7, #0]
 c000d3a:	6013      	str	r3, [r2, #0]
 c000d3c:	e004      	b.n	c000d48 <__acle_se_SECURE_RegisterCallback+0x30>
 c000d3e:	4a20      	ldr	r2, [pc, #128]	; (c000dc0 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c000d40:	683b      	ldr	r3, [r7, #0]
 c000d42:	6013      	str	r3, [r2, #0]
 c000d44:	e000      	b.n	c000d48 <__acle_se_SECURE_RegisterCallback+0x30>
 c000d46:	bf00      	nop
 c000d48:	bf00      	nop
 c000d4a:	370c      	adds	r7, #12
 c000d4c:	46bd      	mov	sp, r7
 c000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d52:	4670      	mov	r0, lr
 c000d54:	4671      	mov	r1, lr
 c000d56:	4672      	mov	r2, lr
 c000d58:	4673      	mov	r3, lr
 c000d5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000d5e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000d62:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000d66:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000d6a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000d6e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000d72:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000d76:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000d7a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000d7e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000d82:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000d86:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000d8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000d96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000d9a:	f38e 8c00 	msr	CPSR_fs, lr
 c000d9e:	b410      	push	{r4}
 c000da0:	eef1 ca10 	vmrs	ip, fpscr
 c000da4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000da8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000dac:	ea0c 0c04 	and.w	ip, ip, r4
 c000db0:	eee1 ca10 	vmsr	fpscr, ip
 c000db4:	bc10      	pop	{r4}
 c000db6:	46f4      	mov	ip, lr
 c000db8:	4774      	bxns	lr
 c000dba:	bf00      	nop
 c000dbc:	3000008c 	.word	0x3000008c
 c000dc0:	30000090 	.word	0x30000090

0c000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000dc4:	b580      	push	{r7, lr}
 c000dc6:	b084      	sub	sp, #16
 c000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000dca:	4b19      	ldr	r3, [pc, #100]	; (c000e30 <HAL_MspInit+0x6c>)
 c000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000dce:	4a18      	ldr	r2, [pc, #96]	; (c000e30 <HAL_MspInit+0x6c>)
 c000dd0:	f043 0301 	orr.w	r3, r3, #1
 c000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 c000dd6:	4b16      	ldr	r3, [pc, #88]	; (c000e30 <HAL_MspInit+0x6c>)
 c000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000dda:	f003 0301 	and.w	r3, r3, #1
 c000dde:	60fb      	str	r3, [r7, #12]
 c000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000de2:	4b13      	ldr	r3, [pc, #76]	; (c000e30 <HAL_MspInit+0x6c>)
 c000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000de6:	4a12      	ldr	r2, [pc, #72]	; (c000e30 <HAL_MspInit+0x6c>)
 c000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c000dec:	6593      	str	r3, [r2, #88]	; 0x58
 c000dee:	4b10      	ldr	r3, [pc, #64]	; (c000e30 <HAL_MspInit+0x6c>)
 c000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c000df6:	60bb      	str	r3, [r7, #8]
 c000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000dfa:	4b0d      	ldr	r3, [pc, #52]	; (c000e30 <HAL_MspInit+0x6c>)
 c000dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000dfe:	4a0c      	ldr	r2, [pc, #48]	; (c000e30 <HAL_MspInit+0x6c>)
 c000e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c000e04:	6493      	str	r3, [r2, #72]	; 0x48
 c000e06:	4b0a      	ldr	r3, [pc, #40]	; (c000e30 <HAL_MspInit+0x6c>)
 c000e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000e0e:	607b      	str	r3, [r7, #4]
 c000e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000e12:	2200      	movs	r2, #0
 c000e14:	2100      	movs	r1, #0
 c000e16:	2008      	movs	r0, #8
 c000e18:	f000 fc5b 	bl	c0016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c000e1c:	2008      	movs	r0, #8
 c000e1e:	f000 fc72 	bl	c001706 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000e22:	f001 f913 	bl	c00204c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000e26:	bf00      	nop
 c000e28:	3710      	adds	r7, #16
 c000e2a:	46bd      	mov	sp, r7
 c000e2c:	bd80      	pop	{r7, pc}
 c000e2e:	bf00      	nop
 c000e30:	50021000 	.word	0x50021000

0c000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c000e34:	b580      	push	{r7, lr}
 c000e36:	b0ae      	sub	sp, #184	; 0xb8
 c000e38:	af00      	add	r7, sp, #0
 c000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000e3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000e40:	2200      	movs	r2, #0
 c000e42:	601a      	str	r2, [r3, #0]
 c000e44:	605a      	str	r2, [r3, #4]
 c000e46:	609a      	str	r2, [r3, #8]
 c000e48:	60da      	str	r2, [r3, #12]
 c000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000e4c:	f107 0310 	add.w	r3, r7, #16
 c000e50:	2294      	movs	r2, #148	; 0x94
 c000e52:	2100      	movs	r1, #0
 c000e54:	4618      	mov	r0, r3
 c000e56:	f004 fdeb 	bl	c005a30 <memset>
  if(huart->Instance==LPUART1)
 c000e5a:	687b      	ldr	r3, [r7, #4]
 c000e5c:	681b      	ldr	r3, [r3, #0]
 c000e5e:	4a22      	ldr	r2, [pc, #136]	; (c000ee8 <HAL_UART_MspInit+0xb4>)
 c000e60:	4293      	cmp	r3, r2
 c000e62:	d13d      	bne.n	c000ee0 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock 
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c000e64:	2320      	movs	r3, #32
 c000e66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c000e68:	2300      	movs	r3, #0
 c000e6a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000e6c:	f107 0310 	add.w	r3, r7, #16
 c000e70:	4618      	mov	r0, r3
 c000e72:	f002 f85f 	bl	c002f34 <HAL_RCCEx_PeriphCLKConfig>
 c000e76:	4603      	mov	r3, r0
 c000e78:	2b00      	cmp	r3, #0
 c000e7a:	d001      	beq.n	c000e80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c000e7c:	f7ff ff44 	bl	c000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c000e80:	4b1a      	ldr	r3, [pc, #104]	; (c000eec <HAL_UART_MspInit+0xb8>)
 c000e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c000e84:	4a19      	ldr	r2, [pc, #100]	; (c000eec <HAL_UART_MspInit+0xb8>)
 c000e86:	f043 0301 	orr.w	r3, r3, #1
 c000e8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 c000e8c:	4b17      	ldr	r3, [pc, #92]	; (c000eec <HAL_UART_MspInit+0xb8>)
 c000e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c000e90:	f003 0301 	and.w	r3, r3, #1
 c000e94:	60fb      	str	r3, [r7, #12]
 c000e96:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c000e98:	4b14      	ldr	r3, [pc, #80]	; (c000eec <HAL_UART_MspInit+0xb8>)
 c000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000e9c:	4a13      	ldr	r2, [pc, #76]	; (c000eec <HAL_UART_MspInit+0xb8>)
 c000e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000ea4:	4b11      	ldr	r3, [pc, #68]	; (c000eec <HAL_UART_MspInit+0xb8>)
 c000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000eac:	60bb      	str	r3, [r7, #8]
 c000eae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c000eb0:	f001 f8bc 	bl	c00202c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX__ST_LINK_VCP_TX__Pin;
 c000eb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c000eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c000ebc:	2302      	movs	r3, #2
 c000ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000ec2:	2300      	movs	r3, #0
 c000ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000ec8:	2300      	movs	r3, #0
 c000eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c000ece:	2308      	movs	r3, #8
 c000ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c000ed4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000ed8:	4619      	mov	r1, r3
 c000eda:	4805      	ldr	r0, [pc, #20]	; (c000ef0 <HAL_UART_MspInit+0xbc>)
 c000edc:	f000 fc32 	bl	c001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 c000ee0:	bf00      	nop
 c000ee2:	37b8      	adds	r7, #184	; 0xb8
 c000ee4:	46bd      	mov	sp, r7
 c000ee6:	bd80      	pop	{r7, pc}
 c000ee8:	50008000 	.word	0x50008000
 c000eec:	50021000 	.word	0x50021000
 c000ef0:	52021800 	.word	0x52021800

0c000ef4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 c000ef4:	b580      	push	{r7, lr}
 c000ef6:	b0a8      	sub	sp, #160	; 0xa0
 c000ef8:	af00      	add	r7, sp, #0
 c000efa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000efc:	f107 030c 	add.w	r3, r7, #12
 c000f00:	2294      	movs	r2, #148	; 0x94
 c000f02:	2100      	movs	r1, #0
 c000f04:	4618      	mov	r0, r3
 c000f06:	f004 fd93 	bl	c005a30 <memset>
  if(hrng->Instance==RNG)
 c000f0a:	687b      	ldr	r3, [r7, #4]
 c000f0c:	681b      	ldr	r3, [r3, #0]
 c000f0e:	4a15      	ldr	r2, [pc, #84]	; (c000f64 <HAL_RNG_MspInit+0x70>)
 c000f10:	4293      	cmp	r3, r2
 c000f12:	d123      	bne.n	c000f5c <HAL_RNG_MspInit+0x68>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock 
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 c000f14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c000f18:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 c000f1a:	2300      	movs	r3, #0
 c000f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000f20:	f107 030c 	add.w	r3, r7, #12
 c000f24:	4618      	mov	r0, r3
 c000f26:	f002 f805 	bl	c002f34 <HAL_RCCEx_PeriphCLKConfig>
 c000f2a:	4603      	mov	r3, r0
 c000f2c:	2b00      	cmp	r3, #0
 c000f2e:	d001      	beq.n	c000f34 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 c000f30:	f7ff feea 	bl	c000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 c000f34:	4b0c      	ldr	r3, [pc, #48]	; (c000f68 <HAL_RNG_MspInit+0x74>)
 c000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000f38:	4a0b      	ldr	r2, [pc, #44]	; (c000f68 <HAL_RNG_MspInit+0x74>)
 c000f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c000f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000f40:	4b09      	ldr	r3, [pc, #36]	; (c000f68 <HAL_RNG_MspInit+0x74>)
 c000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c000f48:	60bb      	str	r3, [r7, #8]
 c000f4a:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 c000f4c:	2200      	movs	r2, #0
 c000f4e:	2100      	movs	r1, #0
 c000f50:	205e      	movs	r0, #94	; 0x5e
 c000f52:	f000 fbbe 	bl	c0016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 c000f56:	205e      	movs	r0, #94	; 0x5e
 c000f58:	f000 fbd5 	bl	c001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 c000f5c:	bf00      	nop
 c000f5e:	37a0      	adds	r7, #160	; 0xa0
 c000f60:	46bd      	mov	sp, r7
 c000f62:	bd80      	pop	{r7, pc}
 c000f64:	520c0800 	.word	0x520c0800
 c000f68:	50021000 	.word	0x50021000

0c000f6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 c000f6c:	b580      	push	{r7, lr}
 c000f6e:	b0a8      	sub	sp, #160	; 0xa0
 c000f70:	af00      	add	r7, sp, #0
 c000f72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000f74:	f107 030c 	add.w	r3, r7, #12
 c000f78:	2294      	movs	r2, #148	; 0x94
 c000f7a:	2100      	movs	r1, #0
 c000f7c:	4618      	mov	r0, r3
 c000f7e:	f004 fd57 	bl	c005a30 <memset>
  if(hrtc->Instance==RTC)
 c000f82:	687b      	ldr	r3, [r7, #4]
 c000f84:	681b      	ldr	r3, [r3, #0]
 c000f86:	4a16      	ldr	r2, [pc, #88]	; (c000fe0 <HAL_RTC_MspInit+0x74>)
 c000f88:	4293      	cmp	r3, r2
 c000f8a:	d124      	bne.n	c000fd6 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock 
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 c000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c000f90:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 c000f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 c000f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000f9a:	f107 030c 	add.w	r3, r7, #12
 c000f9e:	4618      	mov	r0, r3
 c000fa0:	f001 ffc8 	bl	c002f34 <HAL_RCCEx_PeriphCLKConfig>
 c000fa4:	4603      	mov	r3, r0
 c000fa6:	2b00      	cmp	r3, #0
 c000fa8:	d001      	beq.n	c000fae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 c000faa:	f7ff fead 	bl	c000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 c000fae:	4b0d      	ldr	r3, [pc, #52]	; (c000fe4 <HAL_RTC_MspInit+0x78>)
 c000fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c000fb4:	4a0b      	ldr	r2, [pc, #44]	; (c000fe4 <HAL_RTC_MspInit+0x78>)
 c000fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c000fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 c000fbe:	4b09      	ldr	r3, [pc, #36]	; (c000fe4 <HAL_RTC_MspInit+0x78>)
 c000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000fc2:	4a08      	ldr	r2, [pc, #32]	; (c000fe4 <HAL_RTC_MspInit+0x78>)
 c000fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 c000fc8:	6593      	str	r3, [r2, #88]	; 0x58
 c000fca:	4b06      	ldr	r3, [pc, #24]	; (c000fe4 <HAL_RTC_MspInit+0x78>)
 c000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c000fd2:	60bb      	str	r3, [r7, #8]
 c000fd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 c000fd6:	bf00      	nop
 c000fd8:	37a0      	adds	r7, #160	; 0xa0
 c000fda:	46bd      	mov	sp, r7
 c000fdc:	bd80      	pop	{r7, pc}
 c000fde:	bf00      	nop
 c000fe0:	50002800 	.word	0x50002800
 c000fe4:	50021000 	.word	0x50021000

0c000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000fe8:	b480      	push	{r7}
 c000fea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 c000fec:	bf00      	nop
 c000fee:	46bd      	mov	sp, r7
 c000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ff4:	4770      	bx	lr

0c000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000ff6:	b480      	push	{r7}
 c000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000ffa:	e7fe      	b.n	c000ffa <HardFault_Handler+0x4>

0c000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000ffc:	b480      	push	{r7}
 c000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001000:	e7fe      	b.n	c001000 <MemManage_Handler+0x4>

0c001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001002:	b480      	push	{r7}
 c001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001006:	e7fe      	b.n	c001006 <BusFault_Handler+0x4>

0c001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001008:	b480      	push	{r7}
 c00100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c00100c:	e7fe      	b.n	c00100c <UsageFault_Handler+0x4>

0c00100e <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00100e:	b480      	push	{r7}
 c001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001012:	e7fe      	b.n	c001012 <SecureFault_Handler+0x4>

0c001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001014:	b480      	push	{r7}
 c001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001018:	bf00      	nop
 c00101a:	46bd      	mov	sp, r7
 c00101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001020:	4770      	bx	lr

0c001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001022:	b480      	push	{r7}
 c001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001026:	bf00      	nop
 c001028:	46bd      	mov	sp, r7
 c00102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00102e:	4770      	bx	lr

0c001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001030:	b480      	push	{r7}
 c001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001034:	bf00      	nop
 c001036:	46bd      	mov	sp, r7
 c001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00103c:	4770      	bx	lr

0c00103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00103e:	b580      	push	{r7, lr}
 c001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001042:	f000 fa39 	bl	c0014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001046:	bf00      	nop
 c001048:	bd80      	pop	{r7, pc}

0c00104a <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c00104a:	b580      	push	{r7, lr}
 c00104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c00104e:	f000 feef 	bl	c001e30 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c001052:	bf00      	nop
 c001054:	bd80      	pop	{r7, pc}
	...

0c001058 <_sbrk>:
 c001058:	b580      	push	{r7, lr}
 c00105a:	b084      	sub	sp, #16
 c00105c:	af00      	add	r7, sp, #0
 c00105e:	6078      	str	r0, [r7, #4]
 c001060:	4b11      	ldr	r3, [pc, #68]	; (c0010a8 <_sbrk+0x50>)
 c001062:	681b      	ldr	r3, [r3, #0]
 c001064:	2b00      	cmp	r3, #0
 c001066:	d102      	bne.n	c00106e <_sbrk+0x16>
 c001068:	4b0f      	ldr	r3, [pc, #60]	; (c0010a8 <_sbrk+0x50>)
 c00106a:	4a10      	ldr	r2, [pc, #64]	; (c0010ac <_sbrk+0x54>)
 c00106c:	601a      	str	r2, [r3, #0]
 c00106e:	4b0e      	ldr	r3, [pc, #56]	; (c0010a8 <_sbrk+0x50>)
 c001070:	681b      	ldr	r3, [r3, #0]
 c001072:	60fb      	str	r3, [r7, #12]
 c001074:	4b0c      	ldr	r3, [pc, #48]	; (c0010a8 <_sbrk+0x50>)
 c001076:	681a      	ldr	r2, [r3, #0]
 c001078:	687b      	ldr	r3, [r7, #4]
 c00107a:	4413      	add	r3, r2
 c00107c:	466a      	mov	r2, sp
 c00107e:	4293      	cmp	r3, r2
 c001080:	d907      	bls.n	c001092 <_sbrk+0x3a>
 c001082:	f004 fcab 	bl	c0059dc <__errno>
 c001086:	4602      	mov	r2, r0
 c001088:	230c      	movs	r3, #12
 c00108a:	6013      	str	r3, [r2, #0]
 c00108c:	f04f 33ff 	mov.w	r3, #4294967295
 c001090:	e006      	b.n	c0010a0 <_sbrk+0x48>
 c001092:	4b05      	ldr	r3, [pc, #20]	; (c0010a8 <_sbrk+0x50>)
 c001094:	681a      	ldr	r2, [r3, #0]
 c001096:	687b      	ldr	r3, [r7, #4]
 c001098:	4413      	add	r3, r2
 c00109a:	4a03      	ldr	r2, [pc, #12]	; (c0010a8 <_sbrk+0x50>)
 c00109c:	6013      	str	r3, [r2, #0]
 c00109e:	68fb      	ldr	r3, [r7, #12]
 c0010a0:	4618      	mov	r0, r3
 c0010a2:	3710      	adds	r7, #16
 c0010a4:	46bd      	mov	sp, r7
 c0010a6:	bd80      	pop	{r7, pc}
 c0010a8:	30000094 	.word	0x30000094
 c0010ac:	30000170 	.word	0x30000170

0c0010b0 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0010b0:	b480      	push	{r7}
 c0010b2:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c0010b4:	4b2f      	ldr	r3, [pc, #188]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010b6:	2200      	movs	r2, #0
 c0010b8:	609a      	str	r2, [r3, #8]
 c0010ba:	4b2e      	ldr	r3, [pc, #184]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010bc:	4a2e      	ldr	r2, [pc, #184]	; (c001178 <TZ_SAU_Setup+0xc8>)
 c0010be:	60da      	str	r2, [r3, #12]
 c0010c0:	4b2c      	ldr	r3, [pc, #176]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010c2:	4a2e      	ldr	r2, [pc, #184]	; (c00117c <TZ_SAU_Setup+0xcc>)
 c0010c4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0010c6:	4b2b      	ldr	r3, [pc, #172]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010c8:	2201      	movs	r2, #1
 c0010ca:	609a      	str	r2, [r3, #8]
 c0010cc:	4b29      	ldr	r3, [pc, #164]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010ce:	4a2c      	ldr	r2, [pc, #176]	; (c001180 <TZ_SAU_Setup+0xd0>)
 c0010d0:	60da      	str	r2, [r3, #12]
 c0010d2:	4b28      	ldr	r3, [pc, #160]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010d4:	4a2b      	ldr	r2, [pc, #172]	; (c001184 <TZ_SAU_Setup+0xd4>)
 c0010d6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0010d8:	4b26      	ldr	r3, [pc, #152]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010da:	2202      	movs	r2, #2
 c0010dc:	609a      	str	r2, [r3, #8]
 c0010de:	4b25      	ldr	r3, [pc, #148]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010e0:	4a29      	ldr	r2, [pc, #164]	; (c001188 <TZ_SAU_Setup+0xd8>)
 c0010e2:	60da      	str	r2, [r3, #12]
 c0010e4:	4b23      	ldr	r3, [pc, #140]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010e6:	4a29      	ldr	r2, [pc, #164]	; (c00118c <TZ_SAU_Setup+0xdc>)
 c0010e8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c0010ea:	4b22      	ldr	r3, [pc, #136]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010ec:	2203      	movs	r2, #3
 c0010ee:	609a      	str	r2, [r3, #8]
 c0010f0:	4b20      	ldr	r3, [pc, #128]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0010f6:	60da      	str	r2, [r3, #12]
 c0010f8:	4b1e      	ldr	r3, [pc, #120]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c0010fa:	4a25      	ldr	r2, [pc, #148]	; (c001190 <TZ_SAU_Setup+0xe0>)
 c0010fc:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c0010fe:	4b1d      	ldr	r3, [pc, #116]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c001100:	2204      	movs	r2, #4
 c001102:	609a      	str	r2, [r3, #8]
 c001104:	4b1b      	ldr	r3, [pc, #108]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c001106:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c00110a:	60da      	str	r2, [r3, #12]
 c00110c:	4b19      	ldr	r3, [pc, #100]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c00110e:	4a21      	ldr	r2, [pc, #132]	; (c001194 <TZ_SAU_Setup+0xe4>)
 c001110:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001112:	4b18      	ldr	r3, [pc, #96]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c001114:	2205      	movs	r2, #5
 c001116:	609a      	str	r2, [r3, #8]
 c001118:	4b16      	ldr	r3, [pc, #88]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c00111a:	4a1f      	ldr	r2, [pc, #124]	; (c001198 <TZ_SAU_Setup+0xe8>)
 c00111c:	60da      	str	r2, [r3, #12]
 c00111e:	4b15      	ldr	r3, [pc, #84]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c001120:	4a1e      	ldr	r2, [pc, #120]	; (c00119c <TZ_SAU_Setup+0xec>)
 c001122:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001124:	4b13      	ldr	r3, [pc, #76]	; (c001174 <TZ_SAU_Setup+0xc4>)
 c001126:	2201      	movs	r2, #1
 c001128:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00112a:	4b1d      	ldr	r3, [pc, #116]	; (c0011a0 <TZ_SAU_Setup+0xf0>)
 c00112c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001130:	4a1b      	ldr	r2, [pc, #108]	; (c0011a0 <TZ_SAU_Setup+0xf0>)
 c001132:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001136:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00113a:	4b1a      	ldr	r3, [pc, #104]	; (c0011a4 <TZ_SAU_Setup+0xf4>)
 c00113c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00113e:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001142:	4a18      	ldr	r2, [pc, #96]	; (c0011a4 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001148:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c00114a:	4b17      	ldr	r3, [pc, #92]	; (c0011a8 <TZ_SAU_Setup+0xf8>)
 c00114c:	2200      	movs	r2, #0
 c00114e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001152:	4b15      	ldr	r3, [pc, #84]	; (c0011a8 <TZ_SAU_Setup+0xf8>)
 c001154:	2200      	movs	r2, #0
 c001156:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c00115a:	4b13      	ldr	r3, [pc, #76]	; (c0011a8 <TZ_SAU_Setup+0xf8>)
 c00115c:	2200      	movs	r2, #0
 c00115e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001162:	4b11      	ldr	r3, [pc, #68]	; (c0011a8 <TZ_SAU_Setup+0xf8>)
 c001164:	2200      	movs	r2, #0
 c001166:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c00116a:	bf00      	nop
 c00116c:	46bd      	mov	sp, r7
 c00116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001172:	4770      	bx	lr
 c001174:	e000edd0 	.word	0xe000edd0
 c001178:	0c03e000 	.word	0x0c03e000
 c00117c:	0c03ffe3 	.word	0x0c03ffe3
 c001180:	08040000 	.word	0x08040000
 c001184:	0807ffe1 	.word	0x0807ffe1
 c001188:	20018000 	.word	0x20018000
 c00118c:	2003ffe1 	.word	0x2003ffe1
 c001190:	4fffffe1 	.word	0x4fffffe1
 c001194:	9fffffe1 	.word	0x9fffffe1
 c001198:	0bf90000 	.word	0x0bf90000
 c00119c:	0bfa8fe1 	.word	0x0bfa8fe1
 c0011a0:	e000ed00 	.word	0xe000ed00
 c0011a4:	e000ef30 	.word	0xe000ef30
 c0011a8:	e000e100 	.word	0xe000e100

0c0011ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c0011ac:	b580      	push	{r7, lr}
 c0011ae:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0011b0:	f7ff ff7e 	bl	c0010b0 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0011b4:	4b08      	ldr	r3, [pc, #32]	; (c0011d8 <SystemInit+0x2c>)
 c0011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0011ba:	4a07      	ldr	r2, [pc, #28]	; (c0011d8 <SystemInit+0x2c>)
 c0011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0011c4:	4b05      	ldr	r3, [pc, #20]	; (c0011dc <SystemInit+0x30>)
 c0011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0011ca:	4a04      	ldr	r2, [pc, #16]	; (c0011dc <SystemInit+0x30>)
 c0011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0011d4:	bf00      	nop
 c0011d6:	bd80      	pop	{r7, pc}
 c0011d8:	e000ed00 	.word	0xe000ed00
 c0011dc:	e002ed00 	.word	0xe002ed00

0c0011e0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0011e0:	b480      	push	{r7}
 c0011e2:	b087      	sub	sp, #28
 c0011e4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0011e6:	4b4f      	ldr	r3, [pc, #316]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c0011e8:	681b      	ldr	r3, [r3, #0]
 c0011ea:	f003 0308 	and.w	r3, r3, #8
 c0011ee:	2b00      	cmp	r3, #0
 c0011f0:	d107      	bne.n	c001202 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0011f2:	4b4c      	ldr	r3, [pc, #304]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c0011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0011f8:	0a1b      	lsrs	r3, r3, #8
 c0011fa:	f003 030f 	and.w	r3, r3, #15
 c0011fe:	617b      	str	r3, [r7, #20]
 c001200:	e005      	b.n	c00120e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c001202:	4b48      	ldr	r3, [pc, #288]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c001204:	681b      	ldr	r3, [r3, #0]
 c001206:	091b      	lsrs	r3, r3, #4
 c001208:	f003 030f 	and.w	r3, r3, #15
 c00120c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c00120e:	4a46      	ldr	r2, [pc, #280]	; (c001328 <SystemCoreClockUpdate+0x148>)
 c001210:	697b      	ldr	r3, [r7, #20]
 c001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001216:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001218:	4b42      	ldr	r3, [pc, #264]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c00121a:	689b      	ldr	r3, [r3, #8]
 c00121c:	f003 030c 	and.w	r3, r3, #12
 c001220:	2b0c      	cmp	r3, #12
 c001222:	d865      	bhi.n	c0012f0 <SystemCoreClockUpdate+0x110>
 c001224:	a201      	add	r2, pc, #4	; (adr r2, c00122c <SystemCoreClockUpdate+0x4c>)
 c001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00122a:	bf00      	nop
 c00122c:	0c001261 	.word	0x0c001261
 c001230:	0c0012f1 	.word	0x0c0012f1
 c001234:	0c0012f1 	.word	0x0c0012f1
 c001238:	0c0012f1 	.word	0x0c0012f1
 c00123c:	0c001269 	.word	0x0c001269
 c001240:	0c0012f1 	.word	0x0c0012f1
 c001244:	0c0012f1 	.word	0x0c0012f1
 c001248:	0c0012f1 	.word	0x0c0012f1
 c00124c:	0c001271 	.word	0x0c001271
 c001250:	0c0012f1 	.word	0x0c0012f1
 c001254:	0c0012f1 	.word	0x0c0012f1
 c001258:	0c0012f1 	.word	0x0c0012f1
 c00125c:	0c001279 	.word	0x0c001279
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c001260:	4a32      	ldr	r2, [pc, #200]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c001262:	697b      	ldr	r3, [r7, #20]
 c001264:	6013      	str	r3, [r2, #0]
      break;
 c001266:	e047      	b.n	c0012f8 <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c001268:	4b30      	ldr	r3, [pc, #192]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c00126a:	4a31      	ldr	r2, [pc, #196]	; (c001330 <SystemCoreClockUpdate+0x150>)
 c00126c:	601a      	str	r2, [r3, #0]
      break;
 c00126e:	e043      	b.n	c0012f8 <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c001270:	4b2e      	ldr	r3, [pc, #184]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c001272:	4a30      	ldr	r2, [pc, #192]	; (c001334 <SystemCoreClockUpdate+0x154>)
 c001274:	601a      	str	r2, [r3, #0]
      break;
 c001276:	e03f      	b.n	c0012f8 <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001278:	4b2a      	ldr	r3, [pc, #168]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c00127a:	68db      	ldr	r3, [r3, #12]
 c00127c:	f003 0303 	and.w	r3, r3, #3
 c001280:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001282:	4b28      	ldr	r3, [pc, #160]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c001284:	68db      	ldr	r3, [r3, #12]
 c001286:	091b      	lsrs	r3, r3, #4
 c001288:	f003 030f 	and.w	r3, r3, #15
 c00128c:	3301      	adds	r3, #1
 c00128e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 c001290:	68fb      	ldr	r3, [r7, #12]
 c001292:	2b02      	cmp	r3, #2
 c001294:	d002      	beq.n	c00129c <SystemCoreClockUpdate+0xbc>
 c001296:	2b03      	cmp	r3, #3
 c001298:	d006      	beq.n	c0012a8 <SystemCoreClockUpdate+0xc8>
 c00129a:	e00b      	b.n	c0012b4 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00129c:	4a24      	ldr	r2, [pc, #144]	; (c001330 <SystemCoreClockUpdate+0x150>)
 c00129e:	68bb      	ldr	r3, [r7, #8]
 c0012a0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0012a4:	613b      	str	r3, [r7, #16]
          break;
 c0012a6:	e00b      	b.n	c0012c0 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c0012a8:	4a22      	ldr	r2, [pc, #136]	; (c001334 <SystemCoreClockUpdate+0x154>)
 c0012aa:	68bb      	ldr	r3, [r7, #8]
 c0012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 c0012b0:	613b      	str	r3, [r7, #16]
          break;
 c0012b2:	e005      	b.n	c0012c0 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c0012b4:	697a      	ldr	r2, [r7, #20]
 c0012b6:	68bb      	ldr	r3, [r7, #8]
 c0012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0012bc:	613b      	str	r3, [r7, #16]
          break;
 c0012be:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0012c0:	4b18      	ldr	r3, [pc, #96]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c0012c2:	68db      	ldr	r3, [r3, #12]
 c0012c4:	0a1b      	lsrs	r3, r3, #8
 c0012c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0012ca:	693b      	ldr	r3, [r7, #16]
 c0012cc:	fb02 f303 	mul.w	r3, r2, r3
 c0012d0:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0012d2:	4b14      	ldr	r3, [pc, #80]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c0012d4:	68db      	ldr	r3, [r3, #12]
 c0012d6:	0e5b      	lsrs	r3, r3, #25
 c0012d8:	f003 0303 	and.w	r3, r3, #3
 c0012dc:	3301      	adds	r3, #1
 c0012de:	005b      	lsls	r3, r3, #1
 c0012e0:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0012e2:	693a      	ldr	r2, [r7, #16]
 c0012e4:	687b      	ldr	r3, [r7, #4]
 c0012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0012ea:	4a10      	ldr	r2, [pc, #64]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c0012ec:	6013      	str	r3, [r2, #0]
      break;
 c0012ee:	e003      	b.n	c0012f8 <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 c0012f0:	4a0e      	ldr	r2, [pc, #56]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c0012f2:	697b      	ldr	r3, [r7, #20]
 c0012f4:	6013      	str	r3, [r2, #0]
      break;
 c0012f6:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0012f8:	4b0a      	ldr	r3, [pc, #40]	; (c001324 <SystemCoreClockUpdate+0x144>)
 c0012fa:	689b      	ldr	r3, [r3, #8]
 c0012fc:	091b      	lsrs	r3, r3, #4
 c0012fe:	f003 030f 	and.w	r3, r3, #15
 c001302:	4a0d      	ldr	r2, [pc, #52]	; (c001338 <SystemCoreClockUpdate+0x158>)
 c001304:	5cd3      	ldrb	r3, [r2, r3]
 c001306:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001308:	4b08      	ldr	r3, [pc, #32]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c00130a:	681a      	ldr	r2, [r3, #0]
 c00130c:	683b      	ldr	r3, [r7, #0]
 c00130e:	fa22 f303 	lsr.w	r3, r2, r3
 c001312:	4a06      	ldr	r2, [pc, #24]	; (c00132c <SystemCoreClockUpdate+0x14c>)
 c001314:	6013      	str	r3, [r2, #0]
}
 c001316:	bf00      	nop
 c001318:	371c      	adds	r7, #28
 c00131a:	46bd      	mov	sp, r7
 c00131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001320:	4770      	bx	lr
 c001322:	bf00      	nop
 c001324:	50021000 	.word	0x50021000
 c001328:	0c0062f4 	.word	0x0c0062f4
 c00132c:	30000000 	.word	0x30000000
 c001330:	00f42400 	.word	0x00f42400
 c001334:	007a1200 	.word	0x007a1200
 c001338:	0c0062dc 	.word	0x0c0062dc

0c00133c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c00133c:	b580      	push	{r7, lr}
 c00133e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c001340:	f7ff ff4e 	bl	c0011e0 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c001344:	4b1c      	ldr	r3, [pc, #112]	; (c0013b8 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c001346:	681b      	ldr	r3, [r3, #0]
}
 c001348:	4618      	mov	r0, r3
 c00134a:	46bd      	mov	sp, r7
 c00134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001350:	4671      	mov	r1, lr
 c001352:	4672      	mov	r2, lr
 c001354:	4673      	mov	r3, lr
 c001356:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00135a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00135e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001362:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001366:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00136a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00136e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001372:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001376:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00137a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00137e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001382:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001386:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00138a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00138e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001392:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001396:	f38e 8c00 	msr	CPSR_fs, lr
 c00139a:	b410      	push	{r4}
 c00139c:	eef1 ca10 	vmrs	ip, fpscr
 c0013a0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0013a4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0013a8:	ea0c 0c04 	and.w	ip, ip, r4
 c0013ac:	eee1 ca10 	vmsr	fpscr, ip
 c0013b0:	bc10      	pop	{r4}
 c0013b2:	46f4      	mov	ip, lr
 c0013b4:	4774      	bxns	lr
 c0013b6:	bf00      	nop
 c0013b8:	30000000 	.word	0x30000000

0c0013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; c0013f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0013c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0013c2:	e003      	b.n	c0013cc <LoopCopyDataInit>

0c0013c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0013c4:	4b0c      	ldr	r3, [pc, #48]	; (c0013f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0013c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0013c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0013ca:	3104      	adds	r1, #4

0c0013cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0013cc:	480b      	ldr	r0, [pc, #44]	; (c0013fc <LoopForever+0xa>)
	ldr	r3, =_edata
 c0013ce:	4b0c      	ldr	r3, [pc, #48]	; (c001400 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0013d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0013d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0013d4:	d3f6      	bcc.n	c0013c4 <CopyDataInit>
	ldr	r2, =_sbss
 c0013d6:	4a0b      	ldr	r2, [pc, #44]	; (c001404 <LoopForever+0x12>)
	b	LoopFillZerobss
 c0013d8:	e002      	b.n	c0013e0 <LoopFillZerobss>

0c0013da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0013da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0013dc:	f842 3b04 	str.w	r3, [r2], #4

0c0013e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0013e0:	4b09      	ldr	r3, [pc, #36]	; (c001408 <LoopForever+0x16>)
	cmp	r2, r3
 c0013e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0013e4:	d3f9      	bcc.n	c0013da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 c0013e6:	f7ff fee1 	bl	c0011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 c0013ea:	f004 fafd 	bl	c0059e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0013ee:	f7ff f9c7 	bl	c000780 <main>

0c0013f2 <LoopForever>:

LoopForever:
    b LoopForever
 c0013f2:	e7fe      	b.n	c0013f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0013f4:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0013f8:	0c006380 	.word	0x0c006380
	ldr	r0, =_sdata
 c0013fc:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001400:	30000070 	.word	0x30000070
	ldr	r2, =_sbss
 c001404:	30000070 	.word	0x30000070
	ldr	r3, = _ebss
 c001408:	30000170 	.word	0x30000170

0c00140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c00140c:	e7fe      	b.n	c00140c <ADC1_2_IRQHandler>

0c00140e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00140e:	b580      	push	{r7, lr}
 c001410:	b082      	sub	sp, #8
 c001412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c001414:	2300      	movs	r3, #0
 c001416:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001418:	2004      	movs	r0, #4
 c00141a:	f000 f94f 	bl	c0016bc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c00141e:	f7ff fedf 	bl	c0011e0 <SystemCoreClockUpdate>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001422:	2000      	movs	r0, #0
 c001424:	f000 f80e 	bl	c001444 <HAL_InitTick>
 c001428:	4603      	mov	r3, r0
 c00142a:	2b00      	cmp	r3, #0
 c00142c:	d002      	beq.n	c001434 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c00142e:	2301      	movs	r3, #1
 c001430:	71fb      	strb	r3, [r7, #7]
 c001432:	e001      	b.n	c001438 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c001434:	f7ff fcc6 	bl	c000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c001438:	79fb      	ldrb	r3, [r7, #7]
}
 c00143a:	4618      	mov	r0, r3
 c00143c:	3708      	adds	r7, #8
 c00143e:	46bd      	mov	sp, r7
 c001440:	bd80      	pop	{r7, pc}
	...

0c001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001444:	b580      	push	{r7, lr}
 c001446:	b084      	sub	sp, #16
 c001448:	af00      	add	r7, sp, #0
 c00144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c00144c:	2300      	movs	r3, #0
 c00144e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 c001450:	4b16      	ldr	r3, [pc, #88]	; (c0014ac <HAL_InitTick+0x68>)
 c001452:	681b      	ldr	r3, [r3, #0]
 c001454:	2b00      	cmp	r3, #0
 c001456:	d022      	beq.n	c00149e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 c001458:	4b15      	ldr	r3, [pc, #84]	; (c0014b0 <HAL_InitTick+0x6c>)
 c00145a:	681a      	ldr	r2, [r3, #0]
 c00145c:	4b13      	ldr	r3, [pc, #76]	; (c0014ac <HAL_InitTick+0x68>)
 c00145e:	681b      	ldr	r3, [r3, #0]
 c001460:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 c001464:	fbb1 f3f3 	udiv	r3, r1, r3
 c001468:	fbb2 f3f3 	udiv	r3, r2, r3
 c00146c:	4618      	mov	r0, r3
 c00146e:	f000 f95c 	bl	c00172a <HAL_SYSTICK_Config>
 c001472:	4603      	mov	r3, r0
 c001474:	2b00      	cmp	r3, #0
 c001476:	d10f      	bne.n	c001498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001478:	687b      	ldr	r3, [r7, #4]
 c00147a:	2b07      	cmp	r3, #7
 c00147c:	d809      	bhi.n	c001492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c00147e:	2200      	movs	r2, #0
 c001480:	6879      	ldr	r1, [r7, #4]
 c001482:	f04f 30ff 	mov.w	r0, #4294967295
 c001486:	f000 f924 	bl	c0016d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c00148a:	4a0a      	ldr	r2, [pc, #40]	; (c0014b4 <HAL_InitTick+0x70>)
 c00148c:	687b      	ldr	r3, [r7, #4]
 c00148e:	6013      	str	r3, [r2, #0]
 c001490:	e007      	b.n	c0014a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 c001492:	2301      	movs	r3, #1
 c001494:	73fb      	strb	r3, [r7, #15]
 c001496:	e004      	b.n	c0014a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001498:	2301      	movs	r3, #1
 c00149a:	73fb      	strb	r3, [r7, #15]
 c00149c:	e001      	b.n	c0014a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 c00149e:	2301      	movs	r3, #1
 c0014a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c0014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 c0014a4:	4618      	mov	r0, r3
 c0014a6:	3710      	adds	r7, #16
 c0014a8:	46bd      	mov	sp, r7
 c0014aa:	bd80      	pop	{r7, pc}
 c0014ac:	30000008 	.word	0x30000008
 c0014b0:	30000000 	.word	0x30000000
 c0014b4:	30000004 	.word	0x30000004

0c0014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0014b8:	b480      	push	{r7}
 c0014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 c0014bc:	4b05      	ldr	r3, [pc, #20]	; (c0014d4 <HAL_IncTick+0x1c>)
 c0014be:	681a      	ldr	r2, [r3, #0]
 c0014c0:	4b05      	ldr	r3, [pc, #20]	; (c0014d8 <HAL_IncTick+0x20>)
 c0014c2:	681b      	ldr	r3, [r3, #0]
 c0014c4:	4413      	add	r3, r2
 c0014c6:	4a03      	ldr	r2, [pc, #12]	; (c0014d4 <HAL_IncTick+0x1c>)
 c0014c8:	6013      	str	r3, [r2, #0]
}
 c0014ca:	bf00      	nop
 c0014cc:	46bd      	mov	sp, r7
 c0014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014d2:	4770      	bx	lr
 c0014d4:	30000168 	.word	0x30000168
 c0014d8:	30000008 	.word	0x30000008

0c0014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c0014dc:	b480      	push	{r7}
 c0014de:	af00      	add	r7, sp, #0
  return uwTick;
 c0014e0:	4b03      	ldr	r3, [pc, #12]	; (c0014f0 <HAL_GetTick+0x14>)
 c0014e2:	681b      	ldr	r3, [r3, #0]
}
 c0014e4:	4618      	mov	r0, r3
 c0014e6:	46bd      	mov	sp, r7
 c0014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014ec:	4770      	bx	lr
 c0014ee:	bf00      	nop
 c0014f0:	30000168 	.word	0x30000168

0c0014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0014f4:	b480      	push	{r7}
 c0014f6:	b085      	sub	sp, #20
 c0014f8:	af00      	add	r7, sp, #0
 c0014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0014fc:	687b      	ldr	r3, [r7, #4]
 c0014fe:	f003 0307 	and.w	r3, r3, #7
 c001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001504:	4b0c      	ldr	r3, [pc, #48]	; (c001538 <__NVIC_SetPriorityGrouping+0x44>)
 c001506:	68db      	ldr	r3, [r3, #12]
 c001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c00150a:	68ba      	ldr	r2, [r7, #8]
 c00150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001510:	4013      	ands	r3, r2
 c001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 c001514:	68fb      	ldr	r3, [r7, #12]
 c001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001518:	68bb      	ldr	r3, [r7, #8]
 c00151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c00151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001526:	4a04      	ldr	r2, [pc, #16]	; (c001538 <__NVIC_SetPriorityGrouping+0x44>)
 c001528:	68bb      	ldr	r3, [r7, #8]
 c00152a:	60d3      	str	r3, [r2, #12]
}
 c00152c:	bf00      	nop
 c00152e:	3714      	adds	r7, #20
 c001530:	46bd      	mov	sp, r7
 c001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001536:	4770      	bx	lr
 c001538:	e000ed00 	.word	0xe000ed00

0c00153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c00153c:	b480      	push	{r7}
 c00153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001540:	4b04      	ldr	r3, [pc, #16]	; (c001554 <__NVIC_GetPriorityGrouping+0x18>)
 c001542:	68db      	ldr	r3, [r3, #12]
 c001544:	0a1b      	lsrs	r3, r3, #8
 c001546:	f003 0307 	and.w	r3, r3, #7
}
 c00154a:	4618      	mov	r0, r3
 c00154c:	46bd      	mov	sp, r7
 c00154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001552:	4770      	bx	lr
 c001554:	e000ed00 	.word	0xe000ed00

0c001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001558:	b480      	push	{r7}
 c00155a:	b083      	sub	sp, #12
 c00155c:	af00      	add	r7, sp, #0
 c00155e:	4603      	mov	r3, r0
 c001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001566:	2b00      	cmp	r3, #0
 c001568:	db0b      	blt.n	c001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c00156a:	79fb      	ldrb	r3, [r7, #7]
 c00156c:	f003 021f 	and.w	r2, r3, #31
 c001570:	4907      	ldr	r1, [pc, #28]	; (c001590 <__NVIC_EnableIRQ+0x38>)
 c001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001576:	095b      	lsrs	r3, r3, #5
 c001578:	2001      	movs	r0, #1
 c00157a:	fa00 f202 	lsl.w	r2, r0, r2
 c00157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 c001582:	bf00      	nop
 c001584:	370c      	adds	r7, #12
 c001586:	46bd      	mov	sp, r7
 c001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00158c:	4770      	bx	lr
 c00158e:	bf00      	nop
 c001590:	e000e100 	.word	0xe000e100

0c001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001594:	b480      	push	{r7}
 c001596:	b083      	sub	sp, #12
 c001598:	af00      	add	r7, sp, #0
 c00159a:	4603      	mov	r3, r0
 c00159c:	6039      	str	r1, [r7, #0]
 c00159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0015a4:	2b00      	cmp	r3, #0
 c0015a6:	db0a      	blt.n	c0015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0015a8:	683b      	ldr	r3, [r7, #0]
 c0015aa:	b2da      	uxtb	r2, r3
 c0015ac:	490c      	ldr	r1, [pc, #48]	; (c0015e0 <__NVIC_SetPriority+0x4c>)
 c0015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0015b2:	0152      	lsls	r2, r2, #5
 c0015b4:	b2d2      	uxtb	r2, r2
 c0015b6:	440b      	add	r3, r1
 c0015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0015bc:	e00a      	b.n	c0015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0015be:	683b      	ldr	r3, [r7, #0]
 c0015c0:	b2da      	uxtb	r2, r3
 c0015c2:	4908      	ldr	r1, [pc, #32]	; (c0015e4 <__NVIC_SetPriority+0x50>)
 c0015c4:	79fb      	ldrb	r3, [r7, #7]
 c0015c6:	f003 030f 	and.w	r3, r3, #15
 c0015ca:	3b04      	subs	r3, #4
 c0015cc:	0152      	lsls	r2, r2, #5
 c0015ce:	b2d2      	uxtb	r2, r2
 c0015d0:	440b      	add	r3, r1
 c0015d2:	761a      	strb	r2, [r3, #24]
}
 c0015d4:	bf00      	nop
 c0015d6:	370c      	adds	r7, #12
 c0015d8:	46bd      	mov	sp, r7
 c0015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015de:	4770      	bx	lr
 c0015e0:	e000e100 	.word	0xe000e100
 c0015e4:	e000ed00 	.word	0xe000ed00

0c0015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0015e8:	b480      	push	{r7}
 c0015ea:	b089      	sub	sp, #36	; 0x24
 c0015ec:	af00      	add	r7, sp, #0
 c0015ee:	60f8      	str	r0, [r7, #12]
 c0015f0:	60b9      	str	r1, [r7, #8]
 c0015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0015f4:	68fb      	ldr	r3, [r7, #12]
 c0015f6:	f003 0307 	and.w	r3, r3, #7
 c0015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0015fc:	69fb      	ldr	r3, [r7, #28]
 c0015fe:	f1c3 0307 	rsb	r3, r3, #7
 c001602:	2b03      	cmp	r3, #3
 c001604:	bf28      	it	cs
 c001606:	2303      	movcs	r3, #3
 c001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00160a:	69fb      	ldr	r3, [r7, #28]
 c00160c:	3303      	adds	r3, #3
 c00160e:	2b06      	cmp	r3, #6
 c001610:	d902      	bls.n	c001618 <NVIC_EncodePriority+0x30>
 c001612:	69fb      	ldr	r3, [r7, #28]
 c001614:	3b04      	subs	r3, #4
 c001616:	e000      	b.n	c00161a <NVIC_EncodePriority+0x32>
 c001618:	2300      	movs	r3, #0
 c00161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00161c:	f04f 32ff 	mov.w	r2, #4294967295
 c001620:	69bb      	ldr	r3, [r7, #24]
 c001622:	fa02 f303 	lsl.w	r3, r2, r3
 c001626:	43da      	mvns	r2, r3
 c001628:	68bb      	ldr	r3, [r7, #8]
 c00162a:	401a      	ands	r2, r3
 c00162c:	697b      	ldr	r3, [r7, #20]
 c00162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001630:	f04f 31ff 	mov.w	r1, #4294967295
 c001634:	697b      	ldr	r3, [r7, #20]
 c001636:	fa01 f303 	lsl.w	r3, r1, r3
 c00163a:	43d9      	mvns	r1, r3
 c00163c:	687b      	ldr	r3, [r7, #4]
 c00163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001640:	4313      	orrs	r3, r2
         );
}
 c001642:	4618      	mov	r0, r3
 c001644:	3724      	adds	r7, #36	; 0x24
 c001646:	46bd      	mov	sp, r7
 c001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00164c:	4770      	bx	lr
	...

0c001650 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 c001650:	b480      	push	{r7}
 c001652:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 c001654:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 c001658:	4b05      	ldr	r3, [pc, #20]	; (c001670 <__NVIC_SystemReset+0x20>)
 c00165a:	68db      	ldr	r3, [r3, #12]
 c00165c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 c001660:	4903      	ldr	r1, [pc, #12]	; (c001670 <__NVIC_SystemReset+0x20>)
 c001662:	4b04      	ldr	r3, [pc, #16]	; (c001674 <__NVIC_SystemReset+0x24>)
 c001664:	4313      	orrs	r3, r2
 c001666:	60cb      	str	r3, [r1, #12]
 c001668:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 c00166c:	bf00      	nop
 c00166e:	e7fd      	b.n	c00166c <__NVIC_SystemReset+0x1c>
 c001670:	e000ed00 	.word	0xe000ed00
 c001674:	05fa0004 	.word	0x05fa0004

0c001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001678:	b580      	push	{r7, lr}
 c00167a:	b082      	sub	sp, #8
 c00167c:	af00      	add	r7, sp, #0
 c00167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001680:	687b      	ldr	r3, [r7, #4]
 c001682:	3b01      	subs	r3, #1
 c001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001688:	d301      	bcc.n	c00168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00168a:	2301      	movs	r3, #1
 c00168c:	e00f      	b.n	c0016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c00168e:	4a0a      	ldr	r2, [pc, #40]	; (c0016b8 <SysTick_Config+0x40>)
 c001690:	687b      	ldr	r3, [r7, #4]
 c001692:	3b01      	subs	r3, #1
 c001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001696:	2107      	movs	r1, #7
 c001698:	f04f 30ff 	mov.w	r0, #4294967295
 c00169c:	f7ff ff7a 	bl	c001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0016a0:	4b05      	ldr	r3, [pc, #20]	; (c0016b8 <SysTick_Config+0x40>)
 c0016a2:	2200      	movs	r2, #0
 c0016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0016a6:	4b04      	ldr	r3, [pc, #16]	; (c0016b8 <SysTick_Config+0x40>)
 c0016a8:	2207      	movs	r2, #7
 c0016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0016ac:	2300      	movs	r3, #0
}
 c0016ae:	4618      	mov	r0, r3
 c0016b0:	3708      	adds	r7, #8
 c0016b2:	46bd      	mov	sp, r7
 c0016b4:	bd80      	pop	{r7, pc}
 c0016b6:	bf00      	nop
 c0016b8:	e000e010 	.word	0xe000e010

0c0016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0016bc:	b580      	push	{r7, lr}
 c0016be:	b082      	sub	sp, #8
 c0016c0:	af00      	add	r7, sp, #0
 c0016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0016c4:	6878      	ldr	r0, [r7, #4]
 c0016c6:	f7ff ff15 	bl	c0014f4 <__NVIC_SetPriorityGrouping>
}
 c0016ca:	bf00      	nop
 c0016cc:	3708      	adds	r7, #8
 c0016ce:	46bd      	mov	sp, r7
 c0016d0:	bd80      	pop	{r7, pc}

0c0016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0016d2:	b580      	push	{r7, lr}
 c0016d4:	b086      	sub	sp, #24
 c0016d6:	af00      	add	r7, sp, #0
 c0016d8:	4603      	mov	r3, r0
 c0016da:	60b9      	str	r1, [r7, #8]
 c0016dc:	607a      	str	r2, [r7, #4]
 c0016de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0016e0:	f7ff ff2c 	bl	c00153c <__NVIC_GetPriorityGrouping>
 c0016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0016e6:	687a      	ldr	r2, [r7, #4]
 c0016e8:	68b9      	ldr	r1, [r7, #8]
 c0016ea:	6978      	ldr	r0, [r7, #20]
 c0016ec:	f7ff ff7c 	bl	c0015e8 <NVIC_EncodePriority>
 c0016f0:	4602      	mov	r2, r0
 c0016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0016f6:	4611      	mov	r1, r2
 c0016f8:	4618      	mov	r0, r3
 c0016fa:	f7ff ff4b 	bl	c001594 <__NVIC_SetPriority>
}
 c0016fe:	bf00      	nop
 c001700:	3718      	adds	r7, #24
 c001702:	46bd      	mov	sp, r7
 c001704:	bd80      	pop	{r7, pc}

0c001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001706:	b580      	push	{r7, lr}
 c001708:	b082      	sub	sp, #8
 c00170a:	af00      	add	r7, sp, #0
 c00170c:	4603      	mov	r3, r0
 c00170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001714:	4618      	mov	r0, r3
 c001716:	f7ff ff1f 	bl	c001558 <__NVIC_EnableIRQ>
}
 c00171a:	bf00      	nop
 c00171c:	3708      	adds	r7, #8
 c00171e:	46bd      	mov	sp, r7
 c001720:	bd80      	pop	{r7, pc}

0c001722 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 c001722:	b580      	push	{r7, lr}
 c001724:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 c001726:	f7ff ff93 	bl	c001650 <__NVIC_SystemReset>

0c00172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00172a:	b580      	push	{r7, lr}
 c00172c:	b082      	sub	sp, #8
 c00172e:	af00      	add	r7, sp, #0
 c001730:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001732:	6878      	ldr	r0, [r7, #4]
 c001734:	f7ff ffa0 	bl	c001678 <SysTick_Config>
 c001738:	4603      	mov	r3, r0
}
 c00173a:	4618      	mov	r0, r3
 c00173c:	3708      	adds	r7, #8
 c00173e:	46bd      	mov	sp, r7
 c001740:	bd80      	pop	{r7, pc}
	...

0c001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001744:	b480      	push	{r7}
 c001746:	b087      	sub	sp, #28
 c001748:	af00      	add	r7, sp, #0
 c00174a:	6078      	str	r0, [r7, #4]
 c00174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c00174e:	2300      	movs	r3, #0
 c001750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001752:	e158      	b.n	c001a06 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001754:	683b      	ldr	r3, [r7, #0]
 c001756:	681a      	ldr	r2, [r3, #0]
 c001758:	2101      	movs	r1, #1
 c00175a:	697b      	ldr	r3, [r7, #20]
 c00175c:	fa01 f303 	lsl.w	r3, r1, r3
 c001760:	4013      	ands	r3, r2
 c001762:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c001764:	68fb      	ldr	r3, [r7, #12]
 c001766:	2b00      	cmp	r3, #0
 c001768:	f000 814a 	beq.w	c001a00 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c00176c:	683b      	ldr	r3, [r7, #0]
 c00176e:	685b      	ldr	r3, [r3, #4]
 c001770:	2b01      	cmp	r3, #1
 c001772:	d00b      	beq.n	c00178c <HAL_GPIO_Init+0x48>
 c001774:	683b      	ldr	r3, [r7, #0]
 c001776:	685b      	ldr	r3, [r3, #4]
 c001778:	2b02      	cmp	r3, #2
 c00177a:	d007      	beq.n	c00178c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00177c:	683b      	ldr	r3, [r7, #0]
 c00177e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001780:	2b11      	cmp	r3, #17
 c001782:	d003      	beq.n	c00178c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001784:	683b      	ldr	r3, [r7, #0]
 c001786:	685b      	ldr	r3, [r3, #4]
 c001788:	2b12      	cmp	r3, #18
 c00178a:	d130      	bne.n	c0017ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c00178c:	687b      	ldr	r3, [r7, #4]
 c00178e:	689b      	ldr	r3, [r3, #8]
 c001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001792:	697b      	ldr	r3, [r7, #20]
 c001794:	005b      	lsls	r3, r3, #1
 c001796:	2203      	movs	r2, #3
 c001798:	fa02 f303 	lsl.w	r3, r2, r3
 c00179c:	43db      	mvns	r3, r3
 c00179e:	693a      	ldr	r2, [r7, #16]
 c0017a0:	4013      	ands	r3, r2
 c0017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0017a4:	683b      	ldr	r3, [r7, #0]
 c0017a6:	68da      	ldr	r2, [r3, #12]
 c0017a8:	697b      	ldr	r3, [r7, #20]
 c0017aa:	005b      	lsls	r3, r3, #1
 c0017ac:	fa02 f303 	lsl.w	r3, r2, r3
 c0017b0:	693a      	ldr	r2, [r7, #16]
 c0017b2:	4313      	orrs	r3, r2
 c0017b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c0017b6:	687b      	ldr	r3, [r7, #4]
 c0017b8:	693a      	ldr	r2, [r7, #16]
 c0017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c0017bc:	687b      	ldr	r3, [r7, #4]
 c0017be:	685b      	ldr	r3, [r3, #4]
 c0017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0017c2:	2201      	movs	r2, #1
 c0017c4:	697b      	ldr	r3, [r7, #20]
 c0017c6:	fa02 f303 	lsl.w	r3, r2, r3
 c0017ca:	43db      	mvns	r3, r3
 c0017cc:	693a      	ldr	r2, [r7, #16]
 c0017ce:	4013      	ands	r3, r2
 c0017d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c0017d2:	683b      	ldr	r3, [r7, #0]
 c0017d4:	685b      	ldr	r3, [r3, #4]
 c0017d6:	091b      	lsrs	r3, r3, #4
 c0017d8:	f003 0201 	and.w	r2, r3, #1
 c0017dc:	697b      	ldr	r3, [r7, #20]
 c0017de:	fa02 f303 	lsl.w	r3, r2, r3
 c0017e2:	693a      	ldr	r2, [r7, #16]
 c0017e4:	4313      	orrs	r3, r2
 c0017e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c0017e8:	687b      	ldr	r3, [r7, #4]
 c0017ea:	693a      	ldr	r2, [r7, #16]
 c0017ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c0017ee:	687b      	ldr	r3, [r7, #4]
 c0017f0:	68db      	ldr	r3, [r3, #12]
 c0017f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0017f4:	697b      	ldr	r3, [r7, #20]
 c0017f6:	005b      	lsls	r3, r3, #1
 c0017f8:	2203      	movs	r2, #3
 c0017fa:	fa02 f303 	lsl.w	r3, r2, r3
 c0017fe:	43db      	mvns	r3, r3
 c001800:	693a      	ldr	r2, [r7, #16]
 c001802:	4013      	ands	r3, r2
 c001804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001806:	683b      	ldr	r3, [r7, #0]
 c001808:	689a      	ldr	r2, [r3, #8]
 c00180a:	697b      	ldr	r3, [r7, #20]
 c00180c:	005b      	lsls	r3, r3, #1
 c00180e:	fa02 f303 	lsl.w	r3, r2, r3
 c001812:	693a      	ldr	r2, [r7, #16]
 c001814:	4313      	orrs	r3, r2
 c001816:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c001818:	687b      	ldr	r3, [r7, #4]
 c00181a:	693a      	ldr	r2, [r7, #16]
 c00181c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00181e:	683b      	ldr	r3, [r7, #0]
 c001820:	685b      	ldr	r3, [r3, #4]
 c001822:	2b02      	cmp	r3, #2
 c001824:	d003      	beq.n	c00182e <HAL_GPIO_Init+0xea>
 c001826:	683b      	ldr	r3, [r7, #0]
 c001828:	685b      	ldr	r3, [r3, #4]
 c00182a:	2b12      	cmp	r3, #18
 c00182c:	d123      	bne.n	c001876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c00182e:	697b      	ldr	r3, [r7, #20]
 c001830:	08da      	lsrs	r2, r3, #3
 c001832:	687b      	ldr	r3, [r7, #4]
 c001834:	3208      	adds	r2, #8
 c001836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00183a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c00183c:	697b      	ldr	r3, [r7, #20]
 c00183e:	f003 0307 	and.w	r3, r3, #7
 c001842:	009b      	lsls	r3, r3, #2
 c001844:	220f      	movs	r2, #15
 c001846:	fa02 f303 	lsl.w	r3, r2, r3
 c00184a:	43db      	mvns	r3, r3
 c00184c:	693a      	ldr	r2, [r7, #16]
 c00184e:	4013      	ands	r3, r2
 c001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001852:	683b      	ldr	r3, [r7, #0]
 c001854:	691a      	ldr	r2, [r3, #16]
 c001856:	697b      	ldr	r3, [r7, #20]
 c001858:	f003 0307 	and.w	r3, r3, #7
 c00185c:	009b      	lsls	r3, r3, #2
 c00185e:	fa02 f303 	lsl.w	r3, r2, r3
 c001862:	693a      	ldr	r2, [r7, #16]
 c001864:	4313      	orrs	r3, r2
 c001866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001868:	697b      	ldr	r3, [r7, #20]
 c00186a:	08da      	lsrs	r2, r3, #3
 c00186c:	687b      	ldr	r3, [r7, #4]
 c00186e:	3208      	adds	r2, #8
 c001870:	6939      	ldr	r1, [r7, #16]
 c001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001876:	687b      	ldr	r3, [r7, #4]
 c001878:	681b      	ldr	r3, [r3, #0]
 c00187a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00187c:	697b      	ldr	r3, [r7, #20]
 c00187e:	005b      	lsls	r3, r3, #1
 c001880:	2203      	movs	r2, #3
 c001882:	fa02 f303 	lsl.w	r3, r2, r3
 c001886:	43db      	mvns	r3, r3
 c001888:	693a      	ldr	r2, [r7, #16]
 c00188a:	4013      	ands	r3, r2
 c00188c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00188e:	683b      	ldr	r3, [r7, #0]
 c001890:	685b      	ldr	r3, [r3, #4]
 c001892:	f003 0203 	and.w	r2, r3, #3
 c001896:	697b      	ldr	r3, [r7, #20]
 c001898:	005b      	lsls	r3, r3, #1
 c00189a:	fa02 f303 	lsl.w	r3, r2, r3
 c00189e:	693a      	ldr	r2, [r7, #16]
 c0018a0:	4313      	orrs	r3, r2
 c0018a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c0018a4:	687b      	ldr	r3, [r7, #4]
 c0018a6:	693a      	ldr	r2, [r7, #16]
 c0018a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c0018aa:	683b      	ldr	r3, [r7, #0]
 c0018ac:	685b      	ldr	r3, [r3, #4]
 c0018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0018b2:	2b00      	cmp	r3, #0
 c0018b4:	f000 80a4 	beq.w	c001a00 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c0018b8:	4a5a      	ldr	r2, [pc, #360]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c0018ba:	697b      	ldr	r3, [r7, #20]
 c0018bc:	089b      	lsrs	r3, r3, #2
 c0018be:	3318      	adds	r3, #24
 c0018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0018c4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0018c6:	697b      	ldr	r3, [r7, #20]
 c0018c8:	f003 0303 	and.w	r3, r3, #3
 c0018cc:	00db      	lsls	r3, r3, #3
 c0018ce:	220f      	movs	r2, #15
 c0018d0:	fa02 f303 	lsl.w	r3, r2, r3
 c0018d4:	43db      	mvns	r3, r3
 c0018d6:	693a      	ldr	r2, [r7, #16]
 c0018d8:	4013      	ands	r3, r2
 c0018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0018dc:	687b      	ldr	r3, [r7, #4]
 c0018de:	4a52      	ldr	r2, [pc, #328]	; (c001a28 <HAL_GPIO_Init+0x2e4>)
 c0018e0:	4293      	cmp	r3, r2
 c0018e2:	d025      	beq.n	c001930 <HAL_GPIO_Init+0x1ec>
 c0018e4:	687b      	ldr	r3, [r7, #4]
 c0018e6:	4a51      	ldr	r2, [pc, #324]	; (c001a2c <HAL_GPIO_Init+0x2e8>)
 c0018e8:	4293      	cmp	r3, r2
 c0018ea:	d01f      	beq.n	c00192c <HAL_GPIO_Init+0x1e8>
 c0018ec:	687b      	ldr	r3, [r7, #4]
 c0018ee:	4a50      	ldr	r2, [pc, #320]	; (c001a30 <HAL_GPIO_Init+0x2ec>)
 c0018f0:	4293      	cmp	r3, r2
 c0018f2:	d019      	beq.n	c001928 <HAL_GPIO_Init+0x1e4>
 c0018f4:	687b      	ldr	r3, [r7, #4]
 c0018f6:	4a4f      	ldr	r2, [pc, #316]	; (c001a34 <HAL_GPIO_Init+0x2f0>)
 c0018f8:	4293      	cmp	r3, r2
 c0018fa:	d013      	beq.n	c001924 <HAL_GPIO_Init+0x1e0>
 c0018fc:	687b      	ldr	r3, [r7, #4]
 c0018fe:	4a4e      	ldr	r2, [pc, #312]	; (c001a38 <HAL_GPIO_Init+0x2f4>)
 c001900:	4293      	cmp	r3, r2
 c001902:	d00d      	beq.n	c001920 <HAL_GPIO_Init+0x1dc>
 c001904:	687b      	ldr	r3, [r7, #4]
 c001906:	4a4d      	ldr	r2, [pc, #308]	; (c001a3c <HAL_GPIO_Init+0x2f8>)
 c001908:	4293      	cmp	r3, r2
 c00190a:	d007      	beq.n	c00191c <HAL_GPIO_Init+0x1d8>
 c00190c:	687b      	ldr	r3, [r7, #4]
 c00190e:	4a4c      	ldr	r2, [pc, #304]	; (c001a40 <HAL_GPIO_Init+0x2fc>)
 c001910:	4293      	cmp	r3, r2
 c001912:	d101      	bne.n	c001918 <HAL_GPIO_Init+0x1d4>
 c001914:	2306      	movs	r3, #6
 c001916:	e00c      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c001918:	2307      	movs	r3, #7
 c00191a:	e00a      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c00191c:	2305      	movs	r3, #5
 c00191e:	e008      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c001920:	2304      	movs	r3, #4
 c001922:	e006      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c001924:	2303      	movs	r3, #3
 c001926:	e004      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c001928:	2302      	movs	r3, #2
 c00192a:	e002      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c00192c:	2301      	movs	r3, #1
 c00192e:	e000      	b.n	c001932 <HAL_GPIO_Init+0x1ee>
 c001930:	2300      	movs	r3, #0
 c001932:	697a      	ldr	r2, [r7, #20]
 c001934:	f002 0203 	and.w	r2, r2, #3
 c001938:	00d2      	lsls	r2, r2, #3
 c00193a:	4093      	lsls	r3, r2
 c00193c:	693a      	ldr	r2, [r7, #16]
 c00193e:	4313      	orrs	r3, r2
 c001940:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001942:	4938      	ldr	r1, [pc, #224]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c001944:	697b      	ldr	r3, [r7, #20]
 c001946:	089b      	lsrs	r3, r3, #2
 c001948:	3318      	adds	r3, #24
 c00194a:	693a      	ldr	r2, [r7, #16]
 c00194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c001950:	4b34      	ldr	r3, [pc, #208]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c001952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001958:	68fb      	ldr	r3, [r7, #12]
 c00195a:	43db      	mvns	r3, r3
 c00195c:	693a      	ldr	r2, [r7, #16]
 c00195e:	4013      	ands	r3, r2
 c001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001962:	683b      	ldr	r3, [r7, #0]
 c001964:	685b      	ldr	r3, [r3, #4]
 c001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00196a:	2b00      	cmp	r3, #0
 c00196c:	d003      	beq.n	c001976 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c00196e:	693a      	ldr	r2, [r7, #16]
 c001970:	68fb      	ldr	r3, [r7, #12]
 c001972:	4313      	orrs	r3, r2
 c001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c001976:	4a2b      	ldr	r2, [pc, #172]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c001978:	693b      	ldr	r3, [r7, #16]
 c00197a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c00197e:	4b29      	ldr	r3, [pc, #164]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c001980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001986:	68fb      	ldr	r3, [r7, #12]
 c001988:	43db      	mvns	r3, r3
 c00198a:	693a      	ldr	r2, [r7, #16]
 c00198c:	4013      	ands	r3, r2
 c00198e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001990:	683b      	ldr	r3, [r7, #0]
 c001992:	685b      	ldr	r3, [r3, #4]
 c001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001998:	2b00      	cmp	r3, #0
 c00199a:	d003      	beq.n	c0019a4 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c00199c:	693a      	ldr	r2, [r7, #16]
 c00199e:	68fb      	ldr	r3, [r7, #12]
 c0019a0:	4313      	orrs	r3, r2
 c0019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c0019a4:	4a1f      	ldr	r2, [pc, #124]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c0019a6:	693b      	ldr	r3, [r7, #16]
 c0019a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c0019ac:	4b1d      	ldr	r3, [pc, #116]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c0019ae:	681b      	ldr	r3, [r3, #0]
 c0019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0019b2:	68fb      	ldr	r3, [r7, #12]
 c0019b4:	43db      	mvns	r3, r3
 c0019b6:	693a      	ldr	r2, [r7, #16]
 c0019b8:	4013      	ands	r3, r2
 c0019ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c0019bc:	683b      	ldr	r3, [r7, #0]
 c0019be:	685b      	ldr	r3, [r3, #4]
 c0019c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0019c4:	2b00      	cmp	r3, #0
 c0019c6:	d003      	beq.n	c0019d0 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c0019c8:	693a      	ldr	r2, [r7, #16]
 c0019ca:	68fb      	ldr	r3, [r7, #12]
 c0019cc:	4313      	orrs	r3, r2
 c0019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c0019d0:	4a14      	ldr	r2, [pc, #80]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c0019d2:	693b      	ldr	r3, [r7, #16]
 c0019d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c0019d6:	4b13      	ldr	r3, [pc, #76]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c0019d8:	685b      	ldr	r3, [r3, #4]
 c0019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0019dc:	68fb      	ldr	r3, [r7, #12]
 c0019de:	43db      	mvns	r3, r3
 c0019e0:	693a      	ldr	r2, [r7, #16]
 c0019e2:	4013      	ands	r3, r2
 c0019e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c0019e6:	683b      	ldr	r3, [r7, #0]
 c0019e8:	685b      	ldr	r3, [r3, #4]
 c0019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0019ee:	2b00      	cmp	r3, #0
 c0019f0:	d003      	beq.n	c0019fa <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c0019f2:	693a      	ldr	r2, [r7, #16]
 c0019f4:	68fb      	ldr	r3, [r7, #12]
 c0019f6:	4313      	orrs	r3, r2
 c0019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0019fa:	4a0a      	ldr	r2, [pc, #40]	; (c001a24 <HAL_GPIO_Init+0x2e0>)
 c0019fc:	693b      	ldr	r3, [r7, #16]
 c0019fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c001a00:	697b      	ldr	r3, [r7, #20]
 c001a02:	3301      	adds	r3, #1
 c001a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001a06:	683b      	ldr	r3, [r7, #0]
 c001a08:	681a      	ldr	r2, [r3, #0]
 c001a0a:	697b      	ldr	r3, [r7, #20]
 c001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 c001a10:	2b00      	cmp	r3, #0
 c001a12:	f47f ae9f 	bne.w	c001754 <HAL_GPIO_Init+0x10>
  }
}
 c001a16:	bf00      	nop
 c001a18:	371c      	adds	r7, #28
 c001a1a:	46bd      	mov	sp, r7
 c001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a20:	4770      	bx	lr
 c001a22:	bf00      	nop
 c001a24:	5002f400 	.word	0x5002f400
 c001a28:	52020000 	.word	0x52020000
 c001a2c:	52020400 	.word	0x52020400
 c001a30:	52020800 	.word	0x52020800
 c001a34:	52020c00 	.word	0x52020c00
 c001a38:	52021000 	.word	0x52021000
 c001a3c:	52021400 	.word	0x52021400
 c001a40:	52021800 	.word	0x52021800

0c001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001a44:	b480      	push	{r7}
 c001a46:	b083      	sub	sp, #12
 c001a48:	af00      	add	r7, sp, #0
 c001a4a:	6078      	str	r0, [r7, #4]
 c001a4c:	460b      	mov	r3, r1
 c001a4e:	807b      	strh	r3, [r7, #2]
 c001a50:	4613      	mov	r3, r2
 c001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001a54:	787b      	ldrb	r3, [r7, #1]
 c001a56:	2b00      	cmp	r3, #0
 c001a58:	d003      	beq.n	c001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001a5a:	887a      	ldrh	r2, [r7, #2]
 c001a5c:	687b      	ldr	r3, [r7, #4]
 c001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001a60:	e002      	b.n	c001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001a62:	887a      	ldrh	r2, [r7, #2]
 c001a64:	687b      	ldr	r3, [r7, #4]
 c001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001a68:	bf00      	nop
 c001a6a:	370c      	adds	r7, #12
 c001a6c:	46bd      	mov	sp, r7
 c001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a72:	4770      	bx	lr

0c001a74 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001a74:	b480      	push	{r7}
 c001a76:	b089      	sub	sp, #36	; 0x24
 c001a78:	af00      	add	r7, sp, #0
 c001a7a:	60f8      	str	r0, [r7, #12]
 c001a7c:	460b      	mov	r3, r1
 c001a7e:	607a      	str	r2, [r7, #4]
 c001a80:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c001a82:	2300      	movs	r3, #0
 c001a84:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c001a86:	68fb      	ldr	r3, [r7, #12]
 c001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001a8a:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001a8c:	e01b      	b.n	c001ac6 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001a8e:	897a      	ldrh	r2, [r7, #10]
 c001a90:	2101      	movs	r1, #1
 c001a92:	69fb      	ldr	r3, [r7, #28]
 c001a94:	fa01 f303 	lsl.w	r3, r1, r3
 c001a98:	4013      	ands	r3, r2
 c001a9a:	617b      	str	r3, [r7, #20]

    if(iocurrent != 0U)
 c001a9c:	697b      	ldr	r3, [r7, #20]
 c001a9e:	2b00      	cmp	r3, #0
 c001aa0:	d00e      	beq.n	c001ac0 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001aa2:	2201      	movs	r2, #1
 c001aa4:	69fb      	ldr	r3, [r7, #28]
 c001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 c001aaa:	43db      	mvns	r3, r3
 c001aac:	69ba      	ldr	r2, [r7, #24]
 c001aae:	4013      	ands	r3, r2
 c001ab0:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001ab2:	687a      	ldr	r2, [r7, #4]
 c001ab4:	69fb      	ldr	r3, [r7, #28]
 c001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 c001aba:	69ba      	ldr	r2, [r7, #24]
 c001abc:	4313      	orrs	r3, r2
 c001abe:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c001ac0:	69fb      	ldr	r3, [r7, #28]
 c001ac2:	3301      	adds	r3, #1
 c001ac4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c001ac6:	897a      	ldrh	r2, [r7, #10]
 c001ac8:	69fb      	ldr	r3, [r7, #28]
 c001aca:	fa42 f303 	asr.w	r3, r2, r3
 c001ace:	2b00      	cmp	r3, #0
 c001ad0:	d1dd      	bne.n	c001a8e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001ad2:	68fb      	ldr	r3, [r7, #12]
 c001ad4:	69ba      	ldr	r2, [r7, #24]
 c001ad6:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001ad8:	bf00      	nop
 c001ada:	3724      	adds	r7, #36	; 0x24
 c001adc:	46bd      	mov	sp, r7
 c001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ae2:	4770      	bx	lr

0c001ae4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001ae4:	b480      	push	{r7}
 c001ae6:	b085      	sub	sp, #20
 c001ae8:	af00      	add	r7, sp, #0
 c001aea:	6078      	str	r0, [r7, #4]
 c001aec:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if (   (PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001aee:	683b      	ldr	r3, [r7, #0]
 c001af0:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c001af4:	d216      	bcs.n	c001b24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (  HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001af6:	687b      	ldr	r3, [r7, #4]
 c001af8:	0f1b      	lsrs	r3, r3, #28
 c001afa:	015a      	lsls	r2, r3, #5
 c001afc:	687b      	ldr	r3, [r7, #4]
 c001afe:	f003 031f 	and.w	r3, r3, #31
 c001b02:	4413      	add	r3, r2
 c001b04:	2b32      	cmp	r3, #50	; 0x32
 c001b06:	d80d      	bhi.n	c001b24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (   ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001b08:	687b      	ldr	r3, [r7, #4]
 c001b0a:	f003 0320 	and.w	r3, r3, #32
 c001b0e:	2b00      	cmp	r3, #0
 c001b10:	d00a      	beq.n	c001b28 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001b12:	687b      	ldr	r3, [r7, #4]
 c001b14:	0f1b      	lsrs	r3, r3, #28
 c001b16:	015a      	lsls	r2, r3, #5
 c001b18:	687b      	ldr	r3, [r7, #4]
 c001b1a:	f003 031f 	and.w	r3, r3, #31
 c001b1e:	4413      	add	r3, r2
 c001b20:	2b00      	cmp	r3, #0
 c001b22:	d001      	beq.n	c001b28 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c001b24:	2301      	movs	r3, #1
 c001b26:	e0a4      	b.n	c001c72 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001b28:	687b      	ldr	r3, [r7, #4]
 c001b2a:	f003 0320 	and.w	r3, r3, #32
 c001b2e:	2b00      	cmp	r3, #0
 c001b30:	d04a      	beq.n	c001bc8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001b32:	683a      	ldr	r2, [r7, #0]
 c001b34:	f240 1301 	movw	r3, #257	; 0x101
 c001b38:	4013      	ands	r3, r2
 c001b3a:	f240 1201 	movw	r2, #257	; 0x101
 c001b3e:	4293      	cmp	r3, r2
 c001b40:	d10c      	bne.n	c001b5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001b42:	4b4f      	ldr	r3, [pc, #316]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b44:	691b      	ldr	r3, [r3, #16]
 c001b46:	4b4e      	ldr	r3, [pc, #312]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b48:	f04f 32ff 	mov.w	r2, #4294967295
 c001b4c:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c001b4e:	4b4c      	ldr	r3, [pc, #304]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b50:	695a      	ldr	r2, [r3, #20]
 c001b52:	494b      	ldr	r1, [pc, #300]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b54:	4b4b      	ldr	r3, [pc, #300]	; (c001c84 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c001b56:	4313      	orrs	r3, r2
 c001b58:	614b      	str	r3, [r1, #20]
 c001b5a:	e00f      	b.n	c001b7c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001b5c:	683b      	ldr	r3, [r7, #0]
 c001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001b62:	2b00      	cmp	r3, #0
 c001b64:	d00a      	beq.n	c001b7c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001b66:	4b46      	ldr	r3, [pc, #280]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b68:	691b      	ldr	r3, [r3, #16]
 c001b6a:	4b45      	ldr	r3, [pc, #276]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b6c:	2200      	movs	r2, #0
 c001b6e:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c001b70:	4b43      	ldr	r3, [pc, #268]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b72:	695a      	ldr	r2, [r3, #20]
 c001b74:	4942      	ldr	r1, [pc, #264]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b76:	4b44      	ldr	r3, [pc, #272]	; (c001c88 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c001b78:	4013      	ands	r3, r2
 c001b7a:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001b7c:	683a      	ldr	r2, [r7, #0]
 c001b7e:	f240 2302 	movw	r3, #514	; 0x202
 c001b82:	4013      	ands	r3, r2
 c001b84:	f240 2202 	movw	r2, #514	; 0x202
 c001b88:	4293      	cmp	r3, r2
 c001b8a:	d10c      	bne.n	c001ba6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c001b8c:	4b3c      	ldr	r3, [pc, #240]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b8e:	6a1b      	ldr	r3, [r3, #32]
 c001b90:	4b3b      	ldr	r3, [pc, #236]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b92:	f04f 32ff 	mov.w	r2, #4294967295
 c001b96:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001b98:	4b39      	ldr	r3, [pc, #228]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001b9c:	4938      	ldr	r1, [pc, #224]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001b9e:	4b39      	ldr	r3, [pc, #228]	; (c001c84 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c001ba0:	4313      	orrs	r3, r2
 c001ba2:	624b      	str	r3, [r1, #36]	; 0x24
 c001ba4:	e064      	b.n	c001c70 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001ba6:	683b      	ldr	r3, [r7, #0]
 c001ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001bac:	2b00      	cmp	r3, #0
 c001bae:	d05f      	beq.n	c001c70 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c001bb0:	4b33      	ldr	r3, [pc, #204]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001bb2:	6a1b      	ldr	r3, [r3, #32]
 c001bb4:	4b32      	ldr	r3, [pc, #200]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001bb6:	2200      	movs	r2, #0
 c001bb8:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001bba:	4b31      	ldr	r3, [pc, #196]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001bbe:	4930      	ldr	r1, [pc, #192]	; (c001c80 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c001bc0:	4b31      	ldr	r3, [pc, #196]	; (c001c88 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c001bc2:	4013      	ands	r3, r2
 c001bc4:	624b      	str	r3, [r1, #36]	; 0x24
 c001bc6:	e053      	b.n	c001c70 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address =   (uint32_t)&(GTZC_TZSC->SECCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001bc8:	687b      	ldr	r3, [r7, #4]
 c001bca:	0f1a      	lsrs	r2, r3, #28
 c001bcc:	4b2f      	ldr	r3, [pc, #188]	; (c001c8c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c001bce:	4413      	add	r3, r2
    register_address =   (uint32_t)&(GTZC_TZSC->SECCFGR1)
 c001bd0:	009b      	lsls	r3, r3, #2
 c001bd2:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001bd4:	683a      	ldr	r2, [r7, #0]
 c001bd6:	f240 1301 	movw	r3, #257	; 0x101
 c001bda:	4013      	ands	r3, r2
 c001bdc:	f240 1201 	movw	r2, #257	; 0x101
 c001be0:	4293      	cmp	r3, r2
 c001be2:	d10a      	bne.n	c001bfa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001be4:	68fb      	ldr	r3, [r7, #12]
 c001be6:	6819      	ldr	r1, [r3, #0]
 c001be8:	687b      	ldr	r3, [r7, #4]
 c001bea:	f003 031f 	and.w	r3, r3, #31
 c001bee:	2201      	movs	r2, #1
 c001bf0:	409a      	lsls	r2, r3
 c001bf2:	68fb      	ldr	r3, [r7, #12]
 c001bf4:	430a      	orrs	r2, r1
 c001bf6:	601a      	str	r2, [r3, #0]
 c001bf8:	e010      	b.n	c001c1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001bfa:	683b      	ldr	r3, [r7, #0]
 c001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001c00:	2b00      	cmp	r3, #0
 c001c02:	d00b      	beq.n	c001c1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c04:	68fb      	ldr	r3, [r7, #12]
 c001c06:	6819      	ldr	r1, [r3, #0]
 c001c08:	687b      	ldr	r3, [r7, #4]
 c001c0a:	f003 031f 	and.w	r3, r3, #31
 c001c0e:	2201      	movs	r2, #1
 c001c10:	fa02 f303 	lsl.w	r3, r2, r3
 c001c14:	43da      	mvns	r2, r3
 c001c16:	68fb      	ldr	r3, [r7, #12]
 c001c18:	400a      	ands	r2, r1
 c001c1a:	601a      	str	r2, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address =   (uint32_t)&(GTZC_TZSC->PRIVCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001c1c:	687b      	ldr	r3, [r7, #4]
 c001c1e:	0f1a      	lsrs	r2, r3, #28
 c001c20:	4b1b      	ldr	r3, [pc, #108]	; (c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c001c22:	4413      	add	r3, r2
    register_address =   (uint32_t)&(GTZC_TZSC->PRIVCFGR1)
 c001c24:	009b      	lsls	r3, r3, #2
 c001c26:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001c28:	683a      	ldr	r2, [r7, #0]
 c001c2a:	f240 2302 	movw	r3, #514	; 0x202
 c001c2e:	4013      	ands	r3, r2
 c001c30:	f240 2202 	movw	r2, #514	; 0x202
 c001c34:	4293      	cmp	r3, r2
 c001c36:	d10a      	bne.n	c001c4e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c38:	68fb      	ldr	r3, [r7, #12]
 c001c3a:	6819      	ldr	r1, [r3, #0]
 c001c3c:	687b      	ldr	r3, [r7, #4]
 c001c3e:	f003 031f 	and.w	r3, r3, #31
 c001c42:	2201      	movs	r2, #1
 c001c44:	409a      	lsls	r2, r3
 c001c46:	68fb      	ldr	r3, [r7, #12]
 c001c48:	430a      	orrs	r2, r1
 c001c4a:	601a      	str	r2, [r3, #0]
 c001c4c:	e010      	b.n	c001c70 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001c4e:	683b      	ldr	r3, [r7, #0]
 c001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001c54:	2b00      	cmp	r3, #0
 c001c56:	d00b      	beq.n	c001c70 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c58:	68fb      	ldr	r3, [r7, #12]
 c001c5a:	6819      	ldr	r1, [r3, #0]
 c001c5c:	687b      	ldr	r3, [r7, #4]
 c001c5e:	f003 031f 	and.w	r3, r3, #31
 c001c62:	2201      	movs	r2, #1
 c001c64:	fa02 f303 	lsl.w	r3, r2, r3
 c001c68:	43da      	mvns	r2, r3
 c001c6a:	68fb      	ldr	r3, [r7, #12]
 c001c6c:	400a      	ands	r2, r1
 c001c6e:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001c70:	2300      	movs	r3, #0
}
 c001c72:	4618      	mov	r0, r3
 c001c74:	3714      	adds	r7, #20
 c001c76:	46bd      	mov	sp, r7
 c001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c7c:	4770      	bx	lr
 c001c7e:	bf00      	nop
 c001c80:	50032400 	.word	0x50032400
 c001c84:	00076fff 	.word	0x00076fff
 c001c88:	fff89000 	.word	0xfff89000
 c001c8c:	1400c904 	.word	0x1400c904
 c001c90:	1400c908 	.word	0x1400c908

0c001c94 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001c94:	b480      	push	{r7}
 c001c96:	b089      	sub	sp, #36	; 0x24
 c001c98:	af00      	add	r7, sp, #0
 c001c9a:	6078      	str	r0, [r7, #4]
 c001c9c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001c9e:	687b      	ldr	r3, [r7, #4]
 c001ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001ca4:	d00b      	beq.n	c001cbe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001ca6:	687b      	ldr	r3, [r7, #4]
 c001ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001cac:	d007      	beq.n	c001cbe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
           &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c001cae:	687b      	ldr	r3, [r7, #4]
 c001cb0:	4a36      	ldr	r2, [pc, #216]	; (c001d8c <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c001cb2:	4293      	cmp	r3, r2
 c001cb4:	d003      	beq.n	c001cbe <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001cb6:	687b      	ldr	r3, [r7, #4]
 c001cb8:	4a35      	ldr	r2, [pc, #212]	; (c001d90 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c001cba:	4293      	cmp	r3, r2
 c001cbc:	d111      	bne.n	c001ce2 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || (   (    pMPCBB_desc->SecureRWIllegalMode
 c001cbe:	683b      	ldr	r3, [r7, #0]
 c001cc0:	681b      	ldr	r3, [r3, #0]
 c001cc2:	2b00      	cmp	r3, #0
 c001cc4:	d004      	beq.n	c001cd0 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
               != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (    pMPCBB_desc->SecureRWIllegalMode
 c001cc6:	683b      	ldr	r3, [r7, #0]
 c001cc8:	681b      	ldr	r3, [r3, #0]
 c001cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001cce:	d108      	bne.n	c001ce2 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
               != GTZC_MPCBB_SRWILADIS_DISABLE))
      || (   (    pMPCBB_desc->InvertSecureState
 c001cd0:	683b      	ldr	r3, [r7, #0]
 c001cd2:	685b      	ldr	r3, [r3, #4]
 c001cd4:	2b00      	cmp	r3, #0
 c001cd6:	d006      	beq.n	c001ce6 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (    pMPCBB_desc->InvertSecureState
 c001cd8:	683b      	ldr	r3, [r7, #0]
 c001cda:	685b      	ldr	r3, [r3, #4]
 c001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001ce0:	d001      	beq.n	c001ce6 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_INVERTED)))
  {
    return HAL_ERROR;
 c001ce2:	2301      	movs	r3, #1
 c001ce4:	e04b      	b.n	c001d7e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001ce6:	683b      	ldr	r3, [r7, #0]
 c001ce8:	685b      	ldr	r3, [r3, #4]
 c001cea:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001cec:	683b      	ldr	r3, [r7, #0]
 c001cee:	681b      	ldr	r3, [r3, #0]
 c001cf0:	693a      	ldr	r2, [r7, #16]
 c001cf2:	4313      	orrs	r3, r2
 c001cf4:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001cf6:	687b      	ldr	r3, [r7, #4]
 c001cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001cfc:	d003      	beq.n	c001d06 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001cfe:	687b      	ldr	r3, [r7, #4]
 c001d00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001d04:	d105      	bne.n	c001d12 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001d06:	4b23      	ldr	r3, [pc, #140]	; (c001d94 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001d08:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001d0a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c001d0e:	61bb      	str	r3, [r7, #24]
 c001d10:	e004      	b.n	c001d1c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001d12:	4b21      	ldr	r3, [pc, #132]	; (c001d98 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001d14:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001d1a:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001d1c:	69fb      	ldr	r3, [r7, #28]
 c001d1e:	681b      	ldr	r3, [r3, #0]
 c001d20:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001d24:	693b      	ldr	r3, [r7, #16]
 c001d26:	431a      	orrs	r2, r3
 c001d28:	69fb      	ldr	r3, [r7, #28]
 c001d2a:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c001d2c:	69bb      	ldr	r3, [r7, #24]
 c001d2e:	0b5b      	lsrs	r3, r3, #13
 c001d30:	2201      	movs	r2, #1
 c001d32:	fa02 f303 	lsl.w	r3, r2, r3
 c001d36:	3b01      	subs	r3, #1
 c001d38:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001d3a:	69fb      	ldr	r3, [r7, #28]
 c001d3c:	691a      	ldr	r2, [r3, #16]
 c001d3e:	68fb      	ldr	r3, [r7, #12]
 c001d40:	43db      	mvns	r3, r3
 c001d42:	401a      	ands	r2, r3
 c001d44:	683b      	ldr	r3, [r7, #0]
 c001d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001d48:	431a      	orrs	r2, r3
 c001d4a:	69fb      	ldr	r3, [r7, #28]
 c001d4c:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001d4e:	69bb      	ldr	r3, [r7, #24]
 c001d50:	0b5b      	lsrs	r3, r3, #13
 c001d52:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c001d54:	2300      	movs	r3, #0
 c001d56:	617b      	str	r3, [r7, #20]
 c001d58:	e00c      	b.n	c001d74 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001d5a:	683b      	ldr	r3, [r7, #0]
 c001d5c:	697a      	ldr	r2, [r7, #20]
 c001d5e:	3202      	adds	r2, #2
 c001d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001d64:	69fb      	ldr	r3, [r7, #28]
 c001d66:	697a      	ldr	r2, [r7, #20]
 c001d68:	3240      	adds	r2, #64	; 0x40
 c001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001d6e:	697b      	ldr	r3, [r7, #20]
 c001d70:	3301      	adds	r3, #1
 c001d72:	617b      	str	r3, [r7, #20]
 c001d74:	697a      	ldr	r2, [r7, #20]
 c001d76:	68bb      	ldr	r3, [r7, #8]
 c001d78:	429a      	cmp	r2, r3
 c001d7a:	d3ee      	bcc.n	c001d5a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c001d7c:	2300      	movs	r3, #0
}
 c001d7e:	4618      	mov	r0, r3
 c001d80:	3724      	adds	r7, #36	; 0x24
 c001d82:	46bd      	mov	sp, r7
 c001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d88:	4770      	bx	lr
 c001d8a:	bf00      	nop
 c001d8c:	20030000 	.word	0x20030000
 c001d90:	30030000 	.word	0x30030000
 c001d94:	50032c00 	.word	0x50032c00
 c001d98:	50033000 	.word	0x50033000

0c001d9c <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c001d9c:	b480      	push	{r7}
 c001d9e:	b085      	sub	sp, #20
 c001da0:	af00      	add	r7, sp, #0
 c001da2:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if (   (   HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c001da4:	687b      	ldr	r3, [r7, #4]
 c001da6:	0f1b      	lsrs	r3, r3, #28
 c001da8:	015a      	lsls	r2, r3, #5
 c001daa:	687b      	ldr	r3, [r7, #4]
 c001dac:	f003 031f 	and.w	r3, r3, #31
 c001db0:	4413      	add	r3, r2
 c001db2:	2b47      	cmp	r3, #71	; 0x47
 c001db4:	d80d      	bhi.n	c001dd2 <HAL_GTZC_TZIC_EnableIT+0x36>
      || (    ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001db6:	687b      	ldr	r3, [r7, #4]
 c001db8:	f003 0320 	and.w	r3, r3, #32
 c001dbc:	2b00      	cmp	r3, #0
 c001dbe:	d00a      	beq.n	c001dd6 <HAL_GTZC_TZIC_EnableIT+0x3a>
           && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001dc0:	687b      	ldr	r3, [r7, #4]
 c001dc2:	0f1b      	lsrs	r3, r3, #28
 c001dc4:	015a      	lsls	r2, r3, #5
 c001dc6:	687b      	ldr	r3, [r7, #4]
 c001dc8:	f003 031f 	and.w	r3, r3, #31
 c001dcc:	4413      	add	r3, r2
 c001dce:	2b00      	cmp	r3, #0
 c001dd0:	d001      	beq.n	c001dd6 <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c001dd2:	2301      	movs	r3, #1
 c001dd4:	e022      	b.n	c001e1c <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001dd6:	687b      	ldr	r3, [r7, #4]
 c001dd8:	f003 0320 	and.w	r3, r3, #32
 c001ddc:	2b00      	cmp	r3, #0
 c001dde:	d00a      	beq.n	c001df6 <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c001de0:	4b11      	ldr	r3, [pc, #68]	; (c001e28 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c001de2:	f04f 32ff 	mov.w	r2, #4294967295
 c001de6:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c001de8:	4b0f      	ldr	r3, [pc, #60]	; (c001e28 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c001dea:	4a10      	ldr	r2, [pc, #64]	; (c001e2c <HAL_GTZC_TZIC_EnableIT+0x90>)
 c001dec:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c001dee:	4b0e      	ldr	r3, [pc, #56]	; (c001e28 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c001df0:	22ff      	movs	r2, #255	; 0xff
 c001df2:	609a      	str	r2, [r3, #8]
 c001df4:	e011      	b.n	c001e1a <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address =   (uint32_t)&(GTZC_TZIC->IER1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001df6:	687b      	ldr	r3, [r7, #4]
 c001df8:	0f1b      	lsrs	r3, r3, #28
 c001dfa:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c001dfe:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
    register_address =   (uint32_t)&(GTZC_TZIC->IER1)
 c001e02:	009b      	lsls	r3, r3, #2
 c001e04:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001e06:	68fb      	ldr	r3, [r7, #12]
 c001e08:	6819      	ldr	r1, [r3, #0]
 c001e0a:	687b      	ldr	r3, [r7, #4]
 c001e0c:	f003 031f 	and.w	r3, r3, #31
 c001e10:	2201      	movs	r2, #1
 c001e12:	409a      	lsls	r2, r3
 c001e14:	68fb      	ldr	r3, [r7, #12]
 c001e16:	430a      	orrs	r2, r1
 c001e18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c001e1a:	2300      	movs	r3, #0
}
 c001e1c:	4618      	mov	r0, r3
 c001e1e:	3714      	adds	r7, #20
 c001e20:	46bd      	mov	sp, r7
 c001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e26:	4770      	bx	lr
 c001e28:	50032800 	.word	0x50032800
 c001e2c:	3fff6fff 	.word	0x3fff6fff

0c001e30 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c001e30:	b580      	push	{r7, lr}
 c001e32:	b084      	sub	sp, #16
 c001e34:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c001e36:	4b3f      	ldr	r3, [pc, #252]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001e38:	681b      	ldr	r3, [r3, #0]
 c001e3a:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c001e3c:	4b3d      	ldr	r3, [pc, #244]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001e3e:	691b      	ldr	r3, [r3, #16]
 c001e40:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001e42:	68ba      	ldr	r2, [r7, #8]
 c001e44:	687b      	ldr	r3, [r7, #4]
 c001e46:	4013      	ands	r3, r2
 c001e48:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001e4a:	683b      	ldr	r3, [r7, #0]
 c001e4c:	2b00      	cmp	r3, #0
 c001e4e:	d019      	beq.n	c001e84 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c001e50:	4a38      	ldr	r2, [pc, #224]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001e52:	683b      	ldr	r3, [r7, #0]
 c001e54:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001e56:	2300      	movs	r3, #0
 c001e58:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001e5a:	e00d      	b.n	c001e78 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c001e5c:	683a      	ldr	r2, [r7, #0]
 c001e5e:	68fb      	ldr	r3, [r7, #12]
 c001e60:	fa22 f303 	lsr.w	r3, r2, r3
 c001e64:	f003 0301 	and.w	r3, r3, #1
 c001e68:	2b00      	cmp	r3, #0
 c001e6a:	d002      	beq.n	c001e72 <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c001e6c:	68f8      	ldr	r0, [r7, #12]
 c001e6e:	f7fe fc69 	bl	c000744 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001e72:	68fb      	ldr	r3, [r7, #12]
 c001e74:	3301      	adds	r3, #1
 c001e76:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001e78:	683a      	ldr	r2, [r7, #0]
 c001e7a:	68fb      	ldr	r3, [r7, #12]
 c001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 c001e80:	2b00      	cmp	r3, #0
 c001e82:	d1eb      	bne.n	c001e5c <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c001e84:	4b2b      	ldr	r3, [pc, #172]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001e86:	685b      	ldr	r3, [r3, #4]
 c001e88:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c001e8a:	4b2a      	ldr	r3, [pc, #168]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001e8c:	695b      	ldr	r3, [r3, #20]
 c001e8e:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001e90:	68ba      	ldr	r2, [r7, #8]
 c001e92:	687b      	ldr	r3, [r7, #4]
 c001e94:	4013      	ands	r3, r2
 c001e96:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001e98:	683b      	ldr	r3, [r7, #0]
 c001e9a:	2b00      	cmp	r3, #0
 c001e9c:	d01c      	beq.n	c001ed8 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c001e9e:	4a25      	ldr	r2, [pc, #148]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001ea0:	683b      	ldr	r3, [r7, #0]
 c001ea2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001ea4:	2300      	movs	r3, #0
 c001ea6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001ea8:	e010      	b.n	c001ecc <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c001eaa:	683a      	ldr	r2, [r7, #0]
 c001eac:	68fb      	ldr	r3, [r7, #12]
 c001eae:	fa22 f303 	lsr.w	r3, r2, r3
 c001eb2:	f003 0301 	and.w	r3, r3, #1
 c001eb6:	2b00      	cmp	r3, #0
 c001eb8:	d005      	beq.n	c001ec6 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c001eba:	68fb      	ldr	r3, [r7, #12]
 c001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001ec0:	4618      	mov	r0, r3
 c001ec2:	f7fe fc3f 	bl	c000744 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001ec6:	68fb      	ldr	r3, [r7, #12]
 c001ec8:	3301      	adds	r3, #1
 c001eca:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001ecc:	683a      	ldr	r2, [r7, #0]
 c001ece:	68fb      	ldr	r3, [r7, #12]
 c001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 c001ed4:	2b00      	cmp	r3, #0
 c001ed6:	d1e8      	bne.n	c001eaa <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c001ed8:	4b16      	ldr	r3, [pc, #88]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001eda:	689b      	ldr	r3, [r3, #8]
 c001edc:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c001ede:	4b15      	ldr	r3, [pc, #84]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001ee0:	699b      	ldr	r3, [r3, #24]
 c001ee2:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001ee4:	68ba      	ldr	r2, [r7, #8]
 c001ee6:	687b      	ldr	r3, [r7, #4]
 c001ee8:	4013      	ands	r3, r2
 c001eea:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001eec:	683b      	ldr	r3, [r7, #0]
 c001eee:	2b00      	cmp	r3, #0
 c001ef0:	d01c      	beq.n	c001f2c <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c001ef2:	4a10      	ldr	r2, [pc, #64]	; (c001f34 <HAL_GTZC_IRQHandler+0x104>)
 c001ef4:	683b      	ldr	r3, [r7, #0]
 c001ef6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001ef8:	2300      	movs	r3, #0
 c001efa:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001efc:	e010      	b.n	c001f20 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c001efe:	683a      	ldr	r2, [r7, #0]
 c001f00:	68fb      	ldr	r3, [r7, #12]
 c001f02:	fa22 f303 	lsr.w	r3, r2, r3
 c001f06:	f003 0301 	and.w	r3, r3, #1
 c001f0a:	2b00      	cmp	r3, #0
 c001f0c:	d005      	beq.n	c001f1a <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c001f0e:	68fb      	ldr	r3, [r7, #12]
 c001f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c001f14:	4618      	mov	r0, r3
 c001f16:	f7fe fc15 	bl	c000744 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001f1a:	68fb      	ldr	r3, [r7, #12]
 c001f1c:	3301      	adds	r3, #1
 c001f1e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001f20:	683a      	ldr	r2, [r7, #0]
 c001f22:	68fb      	ldr	r3, [r7, #12]
 c001f24:	fa22 f303 	lsr.w	r3, r2, r3
 c001f28:	2b00      	cmp	r3, #0
 c001f2a:	d1e8      	bne.n	c001efe <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c001f2c:	bf00      	nop
 c001f2e:	3710      	adds	r7, #16
 c001f30:	46bd      	mov	sp, r7
 c001f32:	bd80      	pop	{r7, pc}
 c001f34:	50032800 	.word	0x50032800

0c001f38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 c001f38:	b480      	push	{r7}
 c001f3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c001f3c:	4b05      	ldr	r3, [pc, #20]	; (c001f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 c001f3e:	681b      	ldr	r3, [r3, #0]
 c001f40:	4a04      	ldr	r2, [pc, #16]	; (c001f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 c001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001f46:	6013      	str	r3, [r2, #0]
}
 c001f48:	bf00      	nop
 c001f4a:	46bd      	mov	sp, r7
 c001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f50:	4770      	bx	lr
 c001f52:	bf00      	nop
 c001f54:	50007000 	.word	0x50007000

0c001f58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c001f58:	b480      	push	{r7}
 c001f5a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c001f5c:	4b04      	ldr	r3, [pc, #16]	; (c001f70 <HAL_PWREx_GetVoltageRange+0x18>)
 c001f5e:	681b      	ldr	r3, [r3, #0]
 c001f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c001f64:	4618      	mov	r0, r3
 c001f66:	46bd      	mov	sp, r7
 c001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f6c:	4770      	bx	lr
 c001f6e:	bf00      	nop
 c001f70:	50007000 	.word	0x50007000

0c001f74 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c001f74:	b580      	push	{r7, lr}
 c001f76:	b084      	sub	sp, #16
 c001f78:	af00      	add	r7, sp, #0
 c001f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001f7c:	4b27      	ldr	r3, [pc, #156]	; (c00201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001f7e:	681b      	ldr	r3, [r3, #0]
 c001f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c001f84:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c001f86:	f000 f871 	bl	c00206c <HAL_PWREx_SMPS_GetEffectiveMode>
 c001f8a:	4603      	mov	r3, r0
 c001f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001f90:	d101      	bne.n	c001f96 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c001f92:	2301      	movs	r3, #1
 c001f94:	e03e      	b.n	c002014 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c001f96:	4b21      	ldr	r3, [pc, #132]	; (c00201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001f98:	68db      	ldr	r3, [r3, #12]
 c001f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001fa2:	d101      	bne.n	c001fa8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c001fa4:	2301      	movs	r3, #1
 c001fa6:	e035      	b.n	c002014 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c001fa8:	68ba      	ldr	r2, [r7, #8]
 c001faa:	687b      	ldr	r3, [r7, #4]
 c001fac:	429a      	cmp	r2, r3
 c001fae:	d101      	bne.n	c001fb4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c001fb0:	2300      	movs	r3, #0
 c001fb2:	e02f      	b.n	c002014 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001fb4:	4b19      	ldr	r3, [pc, #100]	; (c00201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001fb6:	681b      	ldr	r3, [r3, #0]
 c001fb8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c001fbc:	4917      	ldr	r1, [pc, #92]	; (c00201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001fbe:	687b      	ldr	r3, [r7, #4]
 c001fc0:	4313      	orrs	r3, r2
 c001fc2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001fc4:	4b16      	ldr	r3, [pc, #88]	; (c002020 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c001fc6:	681b      	ldr	r3, [r3, #0]
 c001fc8:	095b      	lsrs	r3, r3, #5
 c001fca:	4a16      	ldr	r2, [pc, #88]	; (c002024 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 c001fd0:	09db      	lsrs	r3, r3, #7
 c001fd2:	2232      	movs	r2, #50	; 0x32
 c001fd4:	fb02 f303 	mul.w	r3, r2, r3
 c001fd8:	4a13      	ldr	r2, [pc, #76]	; (c002028 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c001fda:	fba2 2303 	umull	r2, r3, r2, r3
 c001fde:	08db      	lsrs	r3, r3, #3
 c001fe0:	3301      	adds	r3, #1
 c001fe2:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001fe4:	e002      	b.n	c001fec <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c001fe6:	68fb      	ldr	r3, [r7, #12]
 c001fe8:	3b01      	subs	r3, #1
 c001fea:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001fec:	4b0b      	ldr	r3, [pc, #44]	; (c00201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001fee:	695b      	ldr	r3, [r3, #20]
 c001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001ff8:	d102      	bne.n	c002000 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c001ffa:	68fb      	ldr	r3, [r7, #12]
 c001ffc:	2b00      	cmp	r3, #0
 c001ffe:	d1f2      	bne.n	c001fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c002000:	4b06      	ldr	r3, [pc, #24]	; (c00201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002002:	695b      	ldr	r3, [r3, #20]
 c002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00200c:	d101      	bne.n	c002012 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c00200e:	2303      	movs	r3, #3
 c002010:	e000      	b.n	c002014 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c002012:	2300      	movs	r3, #0
}
 c002014:	4618      	mov	r0, r3
 c002016:	3710      	adds	r7, #16
 c002018:	46bd      	mov	sp, r7
 c00201a:	bd80      	pop	{r7, pc}
 c00201c:	50007000 	.word	0x50007000
 c002020:	30000000 	.word	0x30000000
 c002024:	0a7c5ac5 	.word	0x0a7c5ac5
 c002028:	cccccccd 	.word	0xcccccccd

0c00202c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c00202c:	b480      	push	{r7}
 c00202e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c002030:	4b05      	ldr	r3, [pc, #20]	; (c002048 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002032:	685b      	ldr	r3, [r3, #4]
 c002034:	4a04      	ldr	r2, [pc, #16]	; (c002048 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c00203a:	6053      	str	r3, [r2, #4]
}
 c00203c:	bf00      	nop
 c00203e:	46bd      	mov	sp, r7
 c002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002044:	4770      	bx	lr
 c002046:	bf00      	nop
 c002048:	50007000 	.word	0x50007000

0c00204c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @brief Disable dead battery behavior.
  * @note  This feature is secured by secured UCPD1 when system implements security (TZEN=1).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c00204c:	b480      	push	{r7}
 c00204e:	af00      	add	r7, sp, #0
  /* Disable dead battery behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c002050:	4b05      	ldr	r3, [pc, #20]	; (c002068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002052:	689b      	ldr	r3, [r3, #8]
 c002054:	4a04      	ldr	r2, [pc, #16]	; (c002068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c00205a:	6093      	str	r3, [r2, #8]
}
 c00205c:	bf00      	nop
 c00205e:	46bd      	mov	sp, r7
 c002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002064:	4770      	bx	lr
 c002066:	bf00      	nop
 c002068:	50007000 	.word	0x50007000

0c00206c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c00206c:	b480      	push	{r7}
 c00206e:	b083      	sub	sp, #12
 c002070:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c002072:	4b0f      	ldr	r3, [pc, #60]	; (c0020b0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c002074:	691b      	ldr	r3, [r3, #16]
 c002076:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c002078:	683b      	ldr	r3, [r7, #0]
 c00207a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00207e:	2b00      	cmp	r3, #0
 c002080:	d003      	beq.n	c00208a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c002082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002086:	607b      	str	r3, [r7, #4]
 c002088:	e00a      	b.n	c0020a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c00208a:	683b      	ldr	r3, [r7, #0]
 c00208c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002090:	2b00      	cmp	r3, #0
 c002092:	d103      	bne.n	c00209c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c002094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c002098:	607b      	str	r3, [r7, #4]
 c00209a:	e001      	b.n	c0020a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c00209c:	2300      	movs	r3, #0
 c00209e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c0020a0:	687b      	ldr	r3, [r7, #4]
}
 c0020a2:	4618      	mov	r0, r3
 c0020a4:	370c      	adds	r7, #12
 c0020a6:	46bd      	mov	sp, r7
 c0020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0020ac:	4770      	bx	lr
 c0020ae:	bf00      	nop
 c0020b0:	50007000 	.word	0x50007000

0c0020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0020b4:	b580      	push	{r7, lr}
 c0020b6:	b088      	sub	sp, #32
 c0020b8:	af00      	add	r7, sp, #0
 c0020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0020bc:	687b      	ldr	r3, [r7, #4]
 c0020be:	2b00      	cmp	r3, #0
 c0020c0:	d102      	bne.n	c0020c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0020c2:	2301      	movs	r3, #1
 c0020c4:	f000 bc5c 	b.w	c002980 <HAL_RCC_OscConfig+0x8cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0020c8:	4ba4      	ldr	r3, [pc, #656]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0020ca:	689b      	ldr	r3, [r3, #8]
 c0020cc:	f003 030c 	and.w	r3, r3, #12
 c0020d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0020d2:	4ba2      	ldr	r3, [pc, #648]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0020d4:	68db      	ldr	r3, [r3, #12]
 c0020d6:	f003 0303 	and.w	r3, r3, #3
 c0020da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0020dc:	687b      	ldr	r3, [r7, #4]
 c0020de:	681b      	ldr	r3, [r3, #0]
 c0020e0:	f003 0310 	and.w	r3, r3, #16
 c0020e4:	2b00      	cmp	r3, #0
 c0020e6:	f000 80e2 	beq.w	c0022ae <HAL_RCC_OscConfig+0x1fa>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 c0020ea:	69bb      	ldr	r3, [r7, #24]
 c0020ec:	2b00      	cmp	r3, #0
 c0020ee:	d007      	beq.n	c002100 <HAL_RCC_OscConfig+0x4c>
 c0020f0:	69bb      	ldr	r3, [r7, #24]
 c0020f2:	2b0c      	cmp	r3, #12
 c0020f4:	f040 8089 	bne.w	c00220a <HAL_RCC_OscConfig+0x156>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0020f8:	697b      	ldr	r3, [r7, #20]
 c0020fa:	2b01      	cmp	r3, #1
 c0020fc:	f040 8085 	bne.w	c00220a <HAL_RCC_OscConfig+0x156>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c002100:	4b96      	ldr	r3, [pc, #600]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002102:	681b      	ldr	r3, [r3, #0]
 c002104:	f003 0302 	and.w	r3, r3, #2
 c002108:	2b00      	cmp	r3, #0
 c00210a:	d006      	beq.n	c00211a <HAL_RCC_OscConfig+0x66>
 c00210c:	687b      	ldr	r3, [r7, #4]
 c00210e:	69db      	ldr	r3, [r3, #28]
 c002110:	2b00      	cmp	r3, #0
 c002112:	d102      	bne.n	c00211a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 c002114:	2301      	movs	r3, #1
 c002116:	f000 bc33 	b.w	c002980 <HAL_RCC_OscConfig+0x8cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c00211a:	687b      	ldr	r3, [r7, #4]
 c00211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c00211e:	4b8f      	ldr	r3, [pc, #572]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002120:	681b      	ldr	r3, [r3, #0]
 c002122:	f003 0308 	and.w	r3, r3, #8
 c002126:	2b00      	cmp	r3, #0
 c002128:	d004      	beq.n	c002134 <HAL_RCC_OscConfig+0x80>
 c00212a:	4b8c      	ldr	r3, [pc, #560]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00212c:	681b      	ldr	r3, [r3, #0]
 c00212e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002132:	e005      	b.n	c002140 <HAL_RCC_OscConfig+0x8c>
 c002134:	4b89      	ldr	r3, [pc, #548]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00213a:	091b      	lsrs	r3, r3, #4
 c00213c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002140:	4293      	cmp	r3, r2
 c002142:	d224      	bcs.n	c00218e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c002144:	687b      	ldr	r3, [r7, #4]
 c002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002148:	4618      	mov	r0, r3
 c00214a:	f000 fe15 	bl	c002d78 <RCC_SetFlashLatencyFromMSIRange>
 c00214e:	4603      	mov	r3, r0
 c002150:	2b00      	cmp	r3, #0
 c002152:	d002      	beq.n	c00215a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 c002154:	2301      	movs	r3, #1
 c002156:	f000 bc13 	b.w	c002980 <HAL_RCC_OscConfig+0x8cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00215a:	4b80      	ldr	r3, [pc, #512]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00215c:	681b      	ldr	r3, [r3, #0]
 c00215e:	4a7f      	ldr	r2, [pc, #508]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002160:	f043 0308 	orr.w	r3, r3, #8
 c002164:	6013      	str	r3, [r2, #0]
 c002166:	4b7d      	ldr	r3, [pc, #500]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002168:	681b      	ldr	r3, [r3, #0]
 c00216a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00216e:	687b      	ldr	r3, [r7, #4]
 c002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002172:	497a      	ldr	r1, [pc, #488]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002174:	4313      	orrs	r3, r2
 c002176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002178:	4b78      	ldr	r3, [pc, #480]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00217a:	685b      	ldr	r3, [r3, #4]
 c00217c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c002180:	687b      	ldr	r3, [r7, #4]
 c002182:	6a1b      	ldr	r3, [r3, #32]
 c002184:	021b      	lsls	r3, r3, #8
 c002186:	4975      	ldr	r1, [pc, #468]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002188:	4313      	orrs	r3, r2
 c00218a:	604b      	str	r3, [r1, #4]
 c00218c:	e025      	b.n	c0021da <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00218e:	4b73      	ldr	r3, [pc, #460]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002190:	681b      	ldr	r3, [r3, #0]
 c002192:	4a72      	ldr	r2, [pc, #456]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002194:	f043 0308 	orr.w	r3, r3, #8
 c002198:	6013      	str	r3, [r2, #0]
 c00219a:	4b70      	ldr	r3, [pc, #448]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00219c:	681b      	ldr	r3, [r3, #0]
 c00219e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0021a2:	687b      	ldr	r3, [r7, #4]
 c0021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0021a6:	496d      	ldr	r1, [pc, #436]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0021a8:	4313      	orrs	r3, r2
 c0021aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0021ac:	4b6b      	ldr	r3, [pc, #428]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0021ae:	685b      	ldr	r3, [r3, #4]
 c0021b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0021b4:	687b      	ldr	r3, [r7, #4]
 c0021b6:	6a1b      	ldr	r3, [r3, #32]
 c0021b8:	021b      	lsls	r3, r3, #8
 c0021ba:	4968      	ldr	r1, [pc, #416]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0021bc:	4313      	orrs	r3, r2
 c0021be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_CFGR_SWS_MSI)
 c0021c0:	69bb      	ldr	r3, [r7, #24]
 c0021c2:	2b00      	cmp	r3, #0
 c0021c4:	d109      	bne.n	c0021da <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0021c6:	687b      	ldr	r3, [r7, #4]
 c0021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0021ca:	4618      	mov	r0, r3
 c0021cc:	f000 fdd4 	bl	c002d78 <RCC_SetFlashLatencyFromMSIRange>
 c0021d0:	4603      	mov	r3, r0
 c0021d2:	2b00      	cmp	r3, #0
 c0021d4:	d001      	beq.n	c0021da <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c0021d6:	2301      	movs	r3, #1
 c0021d8:	e3d2      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 c0021da:	f000 fcff 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c0021de:	4601      	mov	r1, r0
 c0021e0:	4b5e      	ldr	r3, [pc, #376]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0021e2:	689b      	ldr	r3, [r3, #8]
 c0021e4:	091b      	lsrs	r3, r3, #4
 c0021e6:	f003 030f 	and.w	r3, r3, #15
 c0021ea:	4a5d      	ldr	r2, [pc, #372]	; (c002360 <HAL_RCC_OscConfig+0x2ac>)
 c0021ec:	5cd3      	ldrb	r3, [r2, r3]
 c0021ee:	fa21 f303 	lsr.w	r3, r1, r3
 c0021f2:	4a5c      	ldr	r2, [pc, #368]	; (c002364 <HAL_RCC_OscConfig+0x2b0>)
 c0021f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(TICK_INT_PRIORITY);
 c0021f6:	2000      	movs	r0, #0
 c0021f8:	f7ff f924 	bl	c001444 <HAL_InitTick>
 c0021fc:	4603      	mov	r3, r0
 c0021fe:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c002200:	7bfb      	ldrb	r3, [r7, #15]
 c002202:	2b00      	cmp	r3, #0
 c002204:	d052      	beq.n	c0022ac <HAL_RCC_OscConfig+0x1f8>
        {
          return status;
 c002206:	7bfb      	ldrb	r3, [r7, #15]
 c002208:	e3ba      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00220a:	687b      	ldr	r3, [r7, #4]
 c00220c:	69db      	ldr	r3, [r3, #28]
 c00220e:	2b00      	cmp	r3, #0
 c002210:	d032      	beq.n	c002278 <HAL_RCC_OscConfig+0x1c4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c002212:	4b52      	ldr	r3, [pc, #328]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002214:	681b      	ldr	r3, [r3, #0]
 c002216:	4a51      	ldr	r2, [pc, #324]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002218:	f043 0301 	orr.w	r3, r3, #1
 c00221c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00221e:	f7ff f95d 	bl	c0014dc <HAL_GetTick>
 c002222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002224:	e008      	b.n	c002238 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002226:	f7ff f959 	bl	c0014dc <HAL_GetTick>
 c00222a:	4602      	mov	r2, r0
 c00222c:	693b      	ldr	r3, [r7, #16]
 c00222e:	1ad3      	subs	r3, r2, r3
 c002230:	2b02      	cmp	r3, #2
 c002232:	d901      	bls.n	c002238 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 c002234:	2303      	movs	r3, #3
 c002236:	e3a3      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002238:	4b48      	ldr	r3, [pc, #288]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00223a:	681b      	ldr	r3, [r3, #0]
 c00223c:	f003 0302 	and.w	r3, r3, #2
 c002240:	2b00      	cmp	r3, #0
 c002242:	d0f0      	beq.n	c002226 <HAL_RCC_OscConfig+0x172>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002244:	4b45      	ldr	r3, [pc, #276]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002246:	681b      	ldr	r3, [r3, #0]
 c002248:	4a44      	ldr	r2, [pc, #272]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00224a:	f043 0308 	orr.w	r3, r3, #8
 c00224e:	6013      	str	r3, [r2, #0]
 c002250:	4b42      	ldr	r3, [pc, #264]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002252:	681b      	ldr	r3, [r3, #0]
 c002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002258:	687b      	ldr	r3, [r7, #4]
 c00225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00225c:	493f      	ldr	r1, [pc, #252]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00225e:	4313      	orrs	r3, r2
 c002260:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002262:	4b3e      	ldr	r3, [pc, #248]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002264:	685b      	ldr	r3, [r3, #4]
 c002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00226a:	687b      	ldr	r3, [r7, #4]
 c00226c:	6a1b      	ldr	r3, [r3, #32]
 c00226e:	021b      	lsls	r3, r3, #8
 c002270:	493a      	ldr	r1, [pc, #232]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002272:	4313      	orrs	r3, r2
 c002274:	604b      	str	r3, [r1, #4]
 c002276:	e01a      	b.n	c0022ae <HAL_RCC_OscConfig+0x1fa>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c002278:	4b38      	ldr	r3, [pc, #224]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00227a:	681b      	ldr	r3, [r3, #0]
 c00227c:	4a37      	ldr	r2, [pc, #220]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00227e:	f023 0301 	bic.w	r3, r3, #1
 c002282:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c002284:	f7ff f92a 	bl	c0014dc <HAL_GetTick>
 c002288:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c00228a:	e008      	b.n	c00229e <HAL_RCC_OscConfig+0x1ea>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00228c:	f7ff f926 	bl	c0014dc <HAL_GetTick>
 c002290:	4602      	mov	r2, r0
 c002292:	693b      	ldr	r3, [r7, #16]
 c002294:	1ad3      	subs	r3, r2, r3
 c002296:	2b02      	cmp	r3, #2
 c002298:	d901      	bls.n	c00229e <HAL_RCC_OscConfig+0x1ea>
          {
            return HAL_TIMEOUT;
 c00229a:	2303      	movs	r3, #3
 c00229c:	e370      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c00229e:	4b2f      	ldr	r3, [pc, #188]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0022a0:	681b      	ldr	r3, [r3, #0]
 c0022a2:	f003 0302 	and.w	r3, r3, #2
 c0022a6:	2b00      	cmp	r3, #0
 c0022a8:	d1f0      	bne.n	c00228c <HAL_RCC_OscConfig+0x1d8>
 c0022aa:	e000      	b.n	c0022ae <HAL_RCC_OscConfig+0x1fa>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0022ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0022ae:	687b      	ldr	r3, [r7, #4]
 c0022b0:	681b      	ldr	r3, [r3, #0]
 c0022b2:	f003 0301 	and.w	r3, r3, #1
 c0022b6:	2b00      	cmp	r3, #0
 c0022b8:	d072      	beq.n	c0023a0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_CFGR_SWS_HSE) ||
 c0022ba:	69bb      	ldr	r3, [r7, #24]
 c0022bc:	2b08      	cmp	r3, #8
 c0022be:	d005      	beq.n	c0022cc <HAL_RCC_OscConfig+0x218>
 c0022c0:	69bb      	ldr	r3, [r7, #24]
 c0022c2:	2b0c      	cmp	r3, #12
 c0022c4:	d10e      	bne.n	c0022e4 <HAL_RCC_OscConfig+0x230>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0022c6:	697b      	ldr	r3, [r7, #20]
 c0022c8:	2b03      	cmp	r3, #3
 c0022ca:	d10b      	bne.n	c0022e4 <HAL_RCC_OscConfig+0x230>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0022cc:	4b23      	ldr	r3, [pc, #140]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0022ce:	681b      	ldr	r3, [r3, #0]
 c0022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0022d4:	2b00      	cmp	r3, #0
 c0022d6:	d062      	beq.n	c00239e <HAL_RCC_OscConfig+0x2ea>
 c0022d8:	687b      	ldr	r3, [r7, #4]
 c0022da:	685b      	ldr	r3, [r3, #4]
 c0022dc:	2b00      	cmp	r3, #0
 c0022de:	d15e      	bne.n	c00239e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 c0022e0:	2301      	movs	r3, #1
 c0022e2:	e34d      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0022e4:	687b      	ldr	r3, [r7, #4]
 c0022e6:	685b      	ldr	r3, [r3, #4]
 c0022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0022ec:	d106      	bne.n	c0022fc <HAL_RCC_OscConfig+0x248>
 c0022ee:	4b1b      	ldr	r3, [pc, #108]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0022f0:	681b      	ldr	r3, [r3, #0]
 c0022f2:	4a1a      	ldr	r2, [pc, #104]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c0022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0022f8:	6013      	str	r3, [r2, #0]
 c0022fa:	e01d      	b.n	c002338 <HAL_RCC_OscConfig+0x284>
 c0022fc:	687b      	ldr	r3, [r7, #4]
 c0022fe:	685b      	ldr	r3, [r3, #4]
 c002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c002304:	d10c      	bne.n	c002320 <HAL_RCC_OscConfig+0x26c>
 c002306:	4b15      	ldr	r3, [pc, #84]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002308:	681b      	ldr	r3, [r3, #0]
 c00230a:	4a14      	ldr	r2, [pc, #80]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002310:	6013      	str	r3, [r2, #0]
 c002312:	4b12      	ldr	r3, [pc, #72]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002314:	681b      	ldr	r3, [r3, #0]
 c002316:	4a11      	ldr	r2, [pc, #68]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00231c:	6013      	str	r3, [r2, #0]
 c00231e:	e00b      	b.n	c002338 <HAL_RCC_OscConfig+0x284>
 c002320:	4b0e      	ldr	r3, [pc, #56]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002322:	681b      	ldr	r3, [r3, #0]
 c002324:	4a0d      	ldr	r2, [pc, #52]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00232a:	6013      	str	r3, [r2, #0]
 c00232c:	4b0b      	ldr	r3, [pc, #44]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c00232e:	681b      	ldr	r3, [r3, #0]
 c002330:	4a0a      	ldr	r2, [pc, #40]	; (c00235c <HAL_RCC_OscConfig+0x2a8>)
 c002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c002338:	687b      	ldr	r3, [r7, #4]
 c00233a:	685b      	ldr	r3, [r3, #4]
 c00233c:	2b00      	cmp	r3, #0
 c00233e:	d01a      	beq.n	c002376 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002340:	f7ff f8cc 	bl	c0014dc <HAL_GetTick>
 c002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002346:	e00f      	b.n	c002368 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002348:	f7ff f8c8 	bl	c0014dc <HAL_GetTick>
 c00234c:	4602      	mov	r2, r0
 c00234e:	693b      	ldr	r3, [r7, #16]
 c002350:	1ad3      	subs	r3, r2, r3
 c002352:	2b64      	cmp	r3, #100	; 0x64
 c002354:	d908      	bls.n	c002368 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 c002356:	2303      	movs	r3, #3
 c002358:	e312      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
 c00235a:	bf00      	nop
 c00235c:	50021000 	.word	0x50021000
 c002360:	0c0062dc 	.word	0x0c0062dc
 c002364:	30000000 	.word	0x30000000
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002368:	4baa      	ldr	r3, [pc, #680]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00236a:	681b      	ldr	r3, [r3, #0]
 c00236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002370:	2b00      	cmp	r3, #0
 c002372:	d0e9      	beq.n	c002348 <HAL_RCC_OscConfig+0x294>
 c002374:	e014      	b.n	c0023a0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002376:	f7ff f8b1 	bl	c0014dc <HAL_GetTick>
 c00237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00237c:	e008      	b.n	c002390 <HAL_RCC_OscConfig+0x2dc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c00237e:	f7ff f8ad 	bl	c0014dc <HAL_GetTick>
 c002382:	4602      	mov	r2, r0
 c002384:	693b      	ldr	r3, [r7, #16]
 c002386:	1ad3      	subs	r3, r2, r3
 c002388:	2b64      	cmp	r3, #100	; 0x64
 c00238a:	d901      	bls.n	c002390 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 c00238c:	2303      	movs	r3, #3
 c00238e:	e2f7      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002390:	4ba0      	ldr	r3, [pc, #640]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002392:	681b      	ldr	r3, [r3, #0]
 c002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002398:	2b00      	cmp	r3, #0
 c00239a:	d1f0      	bne.n	c00237e <HAL_RCC_OscConfig+0x2ca>
 c00239c:	e000      	b.n	c0023a0 <HAL_RCC_OscConfig+0x2ec>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c00239e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0023a0:	687b      	ldr	r3, [r7, #4]
 c0023a2:	681b      	ldr	r3, [r3, #0]
 c0023a4:	f003 0302 	and.w	r3, r3, #2
 c0023a8:	2b00      	cmp	r3, #0
 c0023aa:	d060      	beq.n	c00246e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_HSI) ||
 c0023ac:	69bb      	ldr	r3, [r7, #24]
 c0023ae:	2b04      	cmp	r3, #4
 c0023b0:	d005      	beq.n	c0023be <HAL_RCC_OscConfig+0x30a>
 c0023b2:	69bb      	ldr	r3, [r7, #24]
 c0023b4:	2b0c      	cmp	r3, #12
 c0023b6:	d119      	bne.n	c0023ec <HAL_RCC_OscConfig+0x338>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 c0023b8:	697b      	ldr	r3, [r7, #20]
 c0023ba:	2b02      	cmp	r3, #2
 c0023bc:	d116      	bne.n	c0023ec <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0023be:	4b95      	ldr	r3, [pc, #596]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0023c0:	681b      	ldr	r3, [r3, #0]
 c0023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0023c6:	2b00      	cmp	r3, #0
 c0023c8:	d005      	beq.n	c0023d6 <HAL_RCC_OscConfig+0x322>
 c0023ca:	687b      	ldr	r3, [r7, #4]
 c0023cc:	68db      	ldr	r3, [r3, #12]
 c0023ce:	2b00      	cmp	r3, #0
 c0023d0:	d101      	bne.n	c0023d6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 c0023d2:	2301      	movs	r3, #1
 c0023d4:	e2d4      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0023d6:	4b8f      	ldr	r3, [pc, #572]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0023d8:	685b      	ldr	r3, [r3, #4]
 c0023da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0023de:	687b      	ldr	r3, [r7, #4]
 c0023e0:	691b      	ldr	r3, [r3, #16]
 c0023e2:	061b      	lsls	r3, r3, #24
 c0023e4:	498b      	ldr	r1, [pc, #556]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0023e6:	4313      	orrs	r3, r2
 c0023e8:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0023ea:	e040      	b.n	c00246e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0023ec:	687b      	ldr	r3, [r7, #4]
 c0023ee:	68db      	ldr	r3, [r3, #12]
 c0023f0:	2b00      	cmp	r3, #0
 c0023f2:	d023      	beq.n	c00243c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c0023f4:	4b87      	ldr	r3, [pc, #540]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0023f6:	681b      	ldr	r3, [r3, #0]
 c0023f8:	4a86      	ldr	r2, [pc, #536]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002400:	f7ff f86c 	bl	c0014dc <HAL_GetTick>
 c002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002406:	e008      	b.n	c00241a <HAL_RCC_OscConfig+0x366>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002408:	f7ff f868 	bl	c0014dc <HAL_GetTick>
 c00240c:	4602      	mov	r2, r0
 c00240e:	693b      	ldr	r3, [r7, #16]
 c002410:	1ad3      	subs	r3, r2, r3
 c002412:	2b02      	cmp	r3, #2
 c002414:	d901      	bls.n	c00241a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 c002416:	2303      	movs	r3, #3
 c002418:	e2b2      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c00241a:	4b7e      	ldr	r3, [pc, #504]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00241c:	681b      	ldr	r3, [r3, #0]
 c00241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002422:	2b00      	cmp	r3, #0
 c002424:	d0f0      	beq.n	c002408 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c002426:	4b7b      	ldr	r3, [pc, #492]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002428:	685b      	ldr	r3, [r3, #4]
 c00242a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c00242e:	687b      	ldr	r3, [r7, #4]
 c002430:	691b      	ldr	r3, [r3, #16]
 c002432:	061b      	lsls	r3, r3, #24
 c002434:	4977      	ldr	r1, [pc, #476]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002436:	4313      	orrs	r3, r2
 c002438:	604b      	str	r3, [r1, #4]
 c00243a:	e018      	b.n	c00246e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c00243c:	4b75      	ldr	r3, [pc, #468]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00243e:	681b      	ldr	r3, [r3, #0]
 c002440:	4a74      	ldr	r2, [pc, #464]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c002446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002448:	f7ff f848 	bl	c0014dc <HAL_GetTick>
 c00244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00244e:	e008      	b.n	c002462 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002450:	f7ff f844 	bl	c0014dc <HAL_GetTick>
 c002454:	4602      	mov	r2, r0
 c002456:	693b      	ldr	r3, [r7, #16]
 c002458:	1ad3      	subs	r3, r2, r3
 c00245a:	2b02      	cmp	r3, #2
 c00245c:	d901      	bls.n	c002462 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 c00245e:	2303      	movs	r3, #3
 c002460:	e28e      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002462:	4b6c      	ldr	r3, [pc, #432]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002464:	681b      	ldr	r3, [r3, #0]
 c002466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00246a:	2b00      	cmp	r3, #0
 c00246c:	d1f0      	bne.n	c002450 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c00246e:	687b      	ldr	r3, [r7, #4]
 c002470:	681b      	ldr	r3, [r3, #0]
 c002472:	f003 0308 	and.w	r3, r3, #8
 c002476:	2b00      	cmp	r3, #0
 c002478:	d051      	beq.n	c00251e <HAL_RCC_OscConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c00247a:	687b      	ldr	r3, [r7, #4]
 c00247c:	695b      	ldr	r3, [r3, #20]
 c00247e:	2b00      	cmp	r3, #0
 c002480:	d031      	beq.n	c0024e6 <HAL_RCC_OscConfig+0x432>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c002482:	687b      	ldr	r3, [r7, #4]
 c002484:	699b      	ldr	r3, [r3, #24]
 c002486:	2b00      	cmp	r3, #0
 c002488:	d108      	bne.n	c00249c <HAL_RCC_OscConfig+0x3e8>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c00248a:	4b62      	ldr	r3, [pc, #392]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00248c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002490:	4a60      	ldr	r2, [pc, #384]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002492:	f023 0310 	bic.w	r3, r3, #16
 c002496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c00249a:	e007      	b.n	c0024ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c00249c:	4b5d      	ldr	r3, [pc, #372]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0024a2:	4a5c      	ldr	r2, [pc, #368]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0024a4:	f043 0310 	orr.w	r3, r3, #16
 c0024a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c0024ac:	4b59      	ldr	r3, [pc, #356]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0024b2:	4a58      	ldr	r2, [pc, #352]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0024b4:	f043 0301 	orr.w	r3, r3, #1
 c0024b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0024bc:	f7ff f80e 	bl	c0014dc <HAL_GetTick>
 c0024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0024c2:	e008      	b.n	c0024d6 <HAL_RCC_OscConfig+0x422>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0024c4:	f7ff f80a 	bl	c0014dc <HAL_GetTick>
 c0024c8:	4602      	mov	r2, r0
 c0024ca:	693b      	ldr	r3, [r7, #16]
 c0024cc:	1ad3      	subs	r3, r2, r3
 c0024ce:	2b07      	cmp	r3, #7
 c0024d0:	d901      	bls.n	c0024d6 <HAL_RCC_OscConfig+0x422>
        {
          return HAL_TIMEOUT;
 c0024d2:	2303      	movs	r3, #3
 c0024d4:	e254      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0024d6:	4b4f      	ldr	r3, [pc, #316]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0024d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0024dc:	f003 0302 	and.w	r3, r3, #2
 c0024e0:	2b00      	cmp	r3, #0
 c0024e2:	d0ef      	beq.n	c0024c4 <HAL_RCC_OscConfig+0x410>
 c0024e4:	e01b      	b.n	c00251e <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c0024e6:	4b4b      	ldr	r3, [pc, #300]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0024ec:	4a49      	ldr	r2, [pc, #292]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0024ee:	f023 0301 	bic.w	r3, r3, #1
 c0024f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0024f6:	f7fe fff1 	bl	c0014dc <HAL_GetTick>
 c0024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0024fc:	e008      	b.n	c002510 <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0024fe:	f7fe ffed 	bl	c0014dc <HAL_GetTick>
 c002502:	4602      	mov	r2, r0
 c002504:	693b      	ldr	r3, [r7, #16]
 c002506:	1ad3      	subs	r3, r2, r3
 c002508:	2b07      	cmp	r3, #7
 c00250a:	d901      	bls.n	c002510 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 c00250c:	2303      	movs	r3, #3
 c00250e:	e237      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c002510:	4b40      	ldr	r3, [pc, #256]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002516:	f003 0302 	and.w	r3, r3, #2
 c00251a:	2b00      	cmp	r3, #0
 c00251c:	d1ef      	bne.n	c0024fe <HAL_RCC_OscConfig+0x44a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00251e:	687b      	ldr	r3, [r7, #4]
 c002520:	681b      	ldr	r3, [r3, #0]
 c002522:	f003 0304 	and.w	r3, r3, #4
 c002526:	2b00      	cmp	r3, #0
 c002528:	f000 8109 	beq.w	c00273e <HAL_RCC_OscConfig+0x68a>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00252c:	2300      	movs	r3, #0
 c00252e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c002530:	4b38      	ldr	r3, [pc, #224]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002538:	2b00      	cmp	r3, #0
 c00253a:	d10d      	bne.n	c002558 <HAL_RCC_OscConfig+0x4a4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00253c:	4b35      	ldr	r3, [pc, #212]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002540:	4a34      	ldr	r2, [pc, #208]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002546:	6593      	str	r3, [r2, #88]	; 0x58
 c002548:	4b32      	ldr	r3, [pc, #200]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c00254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002550:	60bb      	str	r3, [r7, #8]
 c002552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c002554:	2301      	movs	r3, #1
 c002556:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002558:	4b2f      	ldr	r3, [pc, #188]	; (c002618 <HAL_RCC_OscConfig+0x564>)
 c00255a:	681b      	ldr	r3, [r3, #0]
 c00255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002560:	2b00      	cmp	r3, #0
 c002562:	d118      	bne.n	c002596 <HAL_RCC_OscConfig+0x4e2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002564:	4b2c      	ldr	r3, [pc, #176]	; (c002618 <HAL_RCC_OscConfig+0x564>)
 c002566:	681b      	ldr	r3, [r3, #0]
 c002568:	4a2b      	ldr	r2, [pc, #172]	; (c002618 <HAL_RCC_OscConfig+0x564>)
 c00256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00256e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c002570:	f7fe ffb4 	bl	c0014dc <HAL_GetTick>
 c002574:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002576:	e008      	b.n	c00258a <HAL_RCC_OscConfig+0x4d6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002578:	f7fe ffb0 	bl	c0014dc <HAL_GetTick>
 c00257c:	4602      	mov	r2, r0
 c00257e:	693b      	ldr	r3, [r7, #16]
 c002580:	1ad3      	subs	r3, r2, r3
 c002582:	2b02      	cmp	r3, #2
 c002584:	d901      	bls.n	c00258a <HAL_RCC_OscConfig+0x4d6>
        {
          return HAL_TIMEOUT;
 c002586:	2303      	movs	r3, #3
 c002588:	e1fa      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00258a:	4b23      	ldr	r3, [pc, #140]	; (c002618 <HAL_RCC_OscConfig+0x564>)
 c00258c:	681b      	ldr	r3, [r3, #0]
 c00258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002592:	2b00      	cmp	r3, #0
 c002594:	d0f0      	beq.n	c002578 <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c002596:	687b      	ldr	r3, [r7, #4]
 c002598:	689b      	ldr	r3, [r3, #8]
 c00259a:	f003 0301 	and.w	r3, r3, #1
 c00259e:	2b00      	cmp	r3, #0
 c0025a0:	d01f      	beq.n	c0025e2 <HAL_RCC_OscConfig+0x52e>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c0025a2:	687b      	ldr	r3, [r7, #4]
 c0025a4:	689b      	ldr	r3, [r3, #8]
 c0025a6:	f003 0304 	and.w	r3, r3, #4
 c0025aa:	2b00      	cmp	r3, #0
 c0025ac:	d010      	beq.n	c0025d0 <HAL_RCC_OscConfig+0x51c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0025ae:	4b19      	ldr	r3, [pc, #100]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0025b4:	4a17      	ldr	r2, [pc, #92]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025b6:	f043 0304 	orr.w	r3, r3, #4
 c0025ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0025be:	4b15      	ldr	r3, [pc, #84]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0025c4:	4a13      	ldr	r2, [pc, #76]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025c6:	f043 0301 	orr.w	r3, r3, #1
 c0025ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0025ce:	e018      	b.n	c002602 <HAL_RCC_OscConfig+0x54e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0025d0:	4b10      	ldr	r3, [pc, #64]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0025d6:	4a0f      	ldr	r2, [pc, #60]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025d8:	f043 0301 	orr.w	r3, r3, #1
 c0025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0025e0:	e00f      	b.n	c002602 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0025e2:	4b0c      	ldr	r3, [pc, #48]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0025e8:	4a0a      	ldr	r2, [pc, #40]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025ea:	f023 0301 	bic.w	r3, r3, #1
 c0025ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0025f2:	4b08      	ldr	r3, [pc, #32]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0025f8:	4a06      	ldr	r2, [pc, #24]	; (c002614 <HAL_RCC_OscConfig+0x560>)
 c0025fa:	f023 0304 	bic.w	r3, r3, #4
 c0025fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002602:	687b      	ldr	r3, [r7, #4]
 c002604:	689b      	ldr	r3, [r3, #8]
 c002606:	2b00      	cmp	r3, #0
 c002608:	d058      	beq.n	c0026bc <HAL_RCC_OscConfig+0x608>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00260a:	f7fe ff67 	bl	c0014dc <HAL_GetTick>
 c00260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002610:	e00f      	b.n	c002632 <HAL_RCC_OscConfig+0x57e>
 c002612:	bf00      	nop
 c002614:	50021000 	.word	0x50021000
 c002618:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00261c:	f7fe ff5e 	bl	c0014dc <HAL_GetTick>
 c002620:	4602      	mov	r2, r0
 c002622:	693b      	ldr	r3, [r7, #16]
 c002624:	1ad3      	subs	r3, r2, r3
 c002626:	f241 3288 	movw	r2, #5000	; 0x1388
 c00262a:	4293      	cmp	r3, r2
 c00262c:	d901      	bls.n	c002632 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 c00262e:	2303      	movs	r3, #3
 c002630:	e1a6      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002632:	4bb1      	ldr	r3, [pc, #708]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002638:	f003 0302 	and.w	r3, r3, #2
 c00263c:	2b00      	cmp	r3, #0
 c00263e:	d0ed      	beq.n	c00261c <HAL_RCC_OscConfig+0x568>
        }
      }

      /* Enable LSESYS additionnally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c002640:	687b      	ldr	r3, [r7, #4]
 c002642:	689b      	ldr	r3, [r3, #8]
 c002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002648:	2b00      	cmp	r3, #0
 c00264a:	d01b      	beq.n	c002684 <HAL_RCC_OscConfig+0x5d0>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00264c:	4baa      	ldr	r3, [pc, #680]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002652:	4aa9      	ldr	r2, [pc, #676]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00265c:	e00a      	b.n	c002674 <HAL_RCC_OscConfig+0x5c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00265e:	f7fe ff3d 	bl	c0014dc <HAL_GetTick>
 c002662:	4602      	mov	r2, r0
 c002664:	693b      	ldr	r3, [r7, #16]
 c002666:	1ad3      	subs	r3, r2, r3
 c002668:	f241 3288 	movw	r2, #5000	; 0x1388
 c00266c:	4293      	cmp	r3, r2
 c00266e:	d901      	bls.n	c002674 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 c002670:	2303      	movs	r3, #3
 c002672:	e185      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002674:	4ba0      	ldr	r3, [pc, #640]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00267a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00267e:	2b00      	cmp	r3, #0
 c002680:	d0ed      	beq.n	c00265e <HAL_RCC_OscConfig+0x5aa>
 c002682:	e053      	b.n	c00272c <HAL_RCC_OscConfig+0x678>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002684:	4b9c      	ldr	r3, [pc, #624]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00268a:	4a9b      	ldr	r2, [pc, #620]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00268c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002694:	e00a      	b.n	c0026ac <HAL_RCC_OscConfig+0x5f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002696:	f7fe ff21 	bl	c0014dc <HAL_GetTick>
 c00269a:	4602      	mov	r2, r0
 c00269c:	693b      	ldr	r3, [r7, #16]
 c00269e:	1ad3      	subs	r3, r2, r3
 c0026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0026a4:	4293      	cmp	r3, r2
 c0026a6:	d901      	bls.n	c0026ac <HAL_RCC_OscConfig+0x5f8>
          {
            return HAL_TIMEOUT;
 c0026a8:	2303      	movs	r3, #3
 c0026aa:	e169      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0026ac:	4b92      	ldr	r3, [pc, #584]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0026b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0026b6:	2b00      	cmp	r3, #0
 c0026b8:	d1ed      	bne.n	c002696 <HAL_RCC_OscConfig+0x5e2>
 c0026ba:	e037      	b.n	c00272c <HAL_RCC_OscConfig+0x678>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0026bc:	f7fe ff0e 	bl	c0014dc <HAL_GetTick>
 c0026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0026c2:	e00a      	b.n	c0026da <HAL_RCC_OscConfig+0x626>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0026c4:	f7fe ff0a 	bl	c0014dc <HAL_GetTick>
 c0026c8:	4602      	mov	r2, r0
 c0026ca:	693b      	ldr	r3, [r7, #16]
 c0026cc:	1ad3      	subs	r3, r2, r3
 c0026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 c0026d2:	4293      	cmp	r3, r2
 c0026d4:	d901      	bls.n	c0026da <HAL_RCC_OscConfig+0x626>
        {
          return HAL_TIMEOUT;
 c0026d6:	2303      	movs	r3, #3
 c0026d8:	e152      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0026da:	4b87      	ldr	r3, [pc, #540]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0026e0:	f003 0302 	and.w	r3, r3, #2
 c0026e4:	2b00      	cmp	r3, #0
 c0026e6:	d1ed      	bne.n	c0026c4 <HAL_RCC_OscConfig+0x610>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0026e8:	4b83      	ldr	r3, [pc, #524]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0026f2:	2b00      	cmp	r3, #0
 c0026f4:	d01a      	beq.n	c00272c <HAL_RCC_OscConfig+0x678>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0026f6:	4b80      	ldr	r3, [pc, #512]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0026fc:	4a7e      	ldr	r2, [pc, #504]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0026fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002706:	e00a      	b.n	c00271e <HAL_RCC_OscConfig+0x66a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002708:	f7fe fee8 	bl	c0014dc <HAL_GetTick>
 c00270c:	4602      	mov	r2, r0
 c00270e:	693b      	ldr	r3, [r7, #16]
 c002710:	1ad3      	subs	r3, r2, r3
 c002712:	f241 3288 	movw	r2, #5000	; 0x1388
 c002716:	4293      	cmp	r3, r2
 c002718:	d901      	bls.n	c00271e <HAL_RCC_OscConfig+0x66a>
          {
            return HAL_TIMEOUT;
 c00271a:	2303      	movs	r3, #3
 c00271c:	e130      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00271e:	4b76      	ldr	r3, [pc, #472]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002728:	2b00      	cmp	r3, #0
 c00272a:	d1ed      	bne.n	c002708 <HAL_RCC_OscConfig+0x654>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00272c:	7ffb      	ldrb	r3, [r7, #31]
 c00272e:	2b01      	cmp	r3, #1
 c002730:	d105      	bne.n	c00273e <HAL_RCC_OscConfig+0x68a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002732:	4b71      	ldr	r3, [pc, #452]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002736:	4a70      	ldr	r2, [pc, #448]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00273c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c00273e:	687b      	ldr	r3, [r7, #4]
 c002740:	681b      	ldr	r3, [r3, #0]
 c002742:	f003 0320 	and.w	r3, r3, #32
 c002746:	2b00      	cmp	r3, #0
 c002748:	d03c      	beq.n	c0027c4 <HAL_RCC_OscConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00274a:	687b      	ldr	r3, [r7, #4]
 c00274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00274e:	2b00      	cmp	r3, #0
 c002750:	d01c      	beq.n	c00278c <HAL_RCC_OscConfig+0x6d8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c002752:	4b69      	ldr	r3, [pc, #420]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002758:	4a67      	ldr	r2, [pc, #412]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00275a:	f043 0301 	orr.w	r3, r3, #1
 c00275e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002762:	f7fe febb 	bl	c0014dc <HAL_GetTick>
 c002766:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002768:	e008      	b.n	c00277c <HAL_RCC_OscConfig+0x6c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00276a:	f7fe feb7 	bl	c0014dc <HAL_GetTick>
 c00276e:	4602      	mov	r2, r0
 c002770:	693b      	ldr	r3, [r7, #16]
 c002772:	1ad3      	subs	r3, r2, r3
 c002774:	2b02      	cmp	r3, #2
 c002776:	d901      	bls.n	c00277c <HAL_RCC_OscConfig+0x6c8>
        {
          return HAL_TIMEOUT;
 c002778:	2303      	movs	r3, #3
 c00277a:	e101      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00277c:	4b5e      	ldr	r3, [pc, #376]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00277e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002782:	f003 0302 	and.w	r3, r3, #2
 c002786:	2b00      	cmp	r3, #0
 c002788:	d0ef      	beq.n	c00276a <HAL_RCC_OscConfig+0x6b6>
 c00278a:	e01b      	b.n	c0027c4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c00278c:	4b5a      	ldr	r3, [pc, #360]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00278e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002792:	4a59      	ldr	r2, [pc, #356]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002794:	f023 0301 	bic.w	r3, r3, #1
 c002798:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00279c:	f7fe fe9e 	bl	c0014dc <HAL_GetTick>
 c0027a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0027a2:	e008      	b.n	c0027b6 <HAL_RCC_OscConfig+0x702>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0027a4:	f7fe fe9a 	bl	c0014dc <HAL_GetTick>
 c0027a8:	4602      	mov	r2, r0
 c0027aa:	693b      	ldr	r3, [r7, #16]
 c0027ac:	1ad3      	subs	r3, r2, r3
 c0027ae:	2b02      	cmp	r3, #2
 c0027b0:	d901      	bls.n	c0027b6 <HAL_RCC_OscConfig+0x702>
        {
          return HAL_TIMEOUT;
 c0027b2:	2303      	movs	r3, #3
 c0027b4:	e0e4      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0027b6:	4b50      	ldr	r3, [pc, #320]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0027b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0027bc:	f003 0302 	and.w	r3, r3, #2
 c0027c0:	2b00      	cmp	r3, #0
 c0027c2:	d1ef      	bne.n	c0027a4 <HAL_RCC_OscConfig+0x6f0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0027c4:	687b      	ldr	r3, [r7, #4]
 c0027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0027c8:	2b00      	cmp	r3, #0
 c0027ca:	f000 80d8 	beq.w	c00297e <HAL_RCC_OscConfig+0x8ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 c0027ce:	4b4a      	ldr	r3, [pc, #296]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0027d0:	689b      	ldr	r3, [r3, #8]
 c0027d2:	f003 030c 	and.w	r3, r3, #12
 c0027d6:	2b0c      	cmp	r3, #12
 c0027d8:	f000 8092 	beq.w	c002900 <HAL_RCC_OscConfig+0x84c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0027dc:	687b      	ldr	r3, [r7, #4]
 c0027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0027e0:	2b02      	cmp	r3, #2
 c0027e2:	d15a      	bne.n	c00289a <HAL_RCC_OscConfig+0x7e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0027e4:	4b44      	ldr	r3, [pc, #272]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0027e6:	681b      	ldr	r3, [r3, #0]
 c0027e8:	4a43      	ldr	r2, [pc, #268]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0027ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0027ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0027f0:	f7fe fe74 	bl	c0014dc <HAL_GetTick>
 c0027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0027f6:	e008      	b.n	c00280a <HAL_RCC_OscConfig+0x756>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0027f8:	f7fe fe70 	bl	c0014dc <HAL_GetTick>
 c0027fc:	4602      	mov	r2, r0
 c0027fe:	693b      	ldr	r3, [r7, #16]
 c002800:	1ad3      	subs	r3, r2, r3
 c002802:	2b02      	cmp	r3, #2
 c002804:	d901      	bls.n	c00280a <HAL_RCC_OscConfig+0x756>
          {
            return HAL_TIMEOUT;
 c002806:	2303      	movs	r3, #3
 c002808:	e0ba      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00280a:	4b3b      	ldr	r3, [pc, #236]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00280c:	681b      	ldr	r3, [r3, #0]
 c00280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002812:	2b00      	cmp	r3, #0
 c002814:	d1f0      	bne.n	c0027f8 <HAL_RCC_OscConfig+0x744>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c002816:	4b38      	ldr	r3, [pc, #224]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002818:	68da      	ldr	r2, [r3, #12]
 c00281a:	4b38      	ldr	r3, [pc, #224]	; (c0028fc <HAL_RCC_OscConfig+0x848>)
 c00281c:	4013      	ands	r3, r2
 c00281e:	687a      	ldr	r2, [r7, #4]
 c002820:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c002822:	687a      	ldr	r2, [r7, #4]
 c002824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c002826:	3a01      	subs	r2, #1
 c002828:	0112      	lsls	r2, r2, #4
 c00282a:	4311      	orrs	r1, r2
 c00282c:	687a      	ldr	r2, [r7, #4]
 c00282e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002830:	0212      	lsls	r2, r2, #8
 c002832:	4311      	orrs	r1, r2
 c002834:	687a      	ldr	r2, [r7, #4]
 c002836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c002838:	0852      	lsrs	r2, r2, #1
 c00283a:	3a01      	subs	r2, #1
 c00283c:	0552      	lsls	r2, r2, #21
 c00283e:	4311      	orrs	r1, r2
 c002840:	687a      	ldr	r2, [r7, #4]
 c002842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c002844:	0852      	lsrs	r2, r2, #1
 c002846:	3a01      	subs	r2, #1
 c002848:	0652      	lsls	r2, r2, #25
 c00284a:	4311      	orrs	r1, r2
 c00284c:	687a      	ldr	r2, [r7, #4]
 c00284e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002850:	06d2      	lsls	r2, r2, #27
 c002852:	430a      	orrs	r2, r1
 c002854:	4928      	ldr	r1, [pc, #160]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002856:	4313      	orrs	r3, r2
 c002858:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c00285a:	4b27      	ldr	r3, [pc, #156]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00285c:	681b      	ldr	r3, [r3, #0]
 c00285e:	4a26      	ldr	r2, [pc, #152]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002864:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c002866:	4b24      	ldr	r3, [pc, #144]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c002868:	68db      	ldr	r3, [r3, #12]
 c00286a:	4a23      	ldr	r2, [pc, #140]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002870:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002872:	f7fe fe33 	bl	c0014dc <HAL_GetTick>
 c002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002878:	e008      	b.n	c00288c <HAL_RCC_OscConfig+0x7d8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00287a:	f7fe fe2f 	bl	c0014dc <HAL_GetTick>
 c00287e:	4602      	mov	r2, r0
 c002880:	693b      	ldr	r3, [r7, #16]
 c002882:	1ad3      	subs	r3, r2, r3
 c002884:	2b02      	cmp	r3, #2
 c002886:	d901      	bls.n	c00288c <HAL_RCC_OscConfig+0x7d8>
          {
            return HAL_TIMEOUT;
 c002888:	2303      	movs	r3, #3
 c00288a:	e079      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00288c:	4b1a      	ldr	r3, [pc, #104]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00288e:	681b      	ldr	r3, [r3, #0]
 c002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002894:	2b00      	cmp	r3, #0
 c002896:	d0f0      	beq.n	c00287a <HAL_RCC_OscConfig+0x7c6>
 c002898:	e071      	b.n	c00297e <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c00289a:	4b17      	ldr	r3, [pc, #92]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c00289c:	681b      	ldr	r3, [r3, #0]
 c00289e:	4a16      	ldr	r2, [pc, #88]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0028a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c0028a6:	4b14      	ldr	r3, [pc, #80]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028a8:	681b      	ldr	r3, [r3, #0]
 c0028aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c0028ae:	2b00      	cmp	r3, #0
 c0028b0:	d105      	bne.n	c0028be <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c0028b2:	4b11      	ldr	r3, [pc, #68]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028b4:	68db      	ldr	r3, [r3, #12]
 c0028b6:	4a10      	ldr	r2, [pc, #64]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028b8:	f023 0303 	bic.w	r3, r3, #3
 c0028bc:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0028be:	4b0e      	ldr	r3, [pc, #56]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028c0:	68db      	ldr	r3, [r3, #12]
 c0028c2:	4a0d      	ldr	r2, [pc, #52]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c0028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0028cc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0028ce:	f7fe fe05 	bl	c0014dc <HAL_GetTick>
 c0028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0028d4:	e008      	b.n	c0028e8 <HAL_RCC_OscConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0028d6:	f7fe fe01 	bl	c0014dc <HAL_GetTick>
 c0028da:	4602      	mov	r2, r0
 c0028dc:	693b      	ldr	r3, [r7, #16]
 c0028de:	1ad3      	subs	r3, r2, r3
 c0028e0:	2b02      	cmp	r3, #2
 c0028e2:	d901      	bls.n	c0028e8 <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 c0028e4:	2303      	movs	r3, #3
 c0028e6:	e04b      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0028e8:	4b03      	ldr	r3, [pc, #12]	; (c0028f8 <HAL_RCC_OscConfig+0x844>)
 c0028ea:	681b      	ldr	r3, [r3, #0]
 c0028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0028f0:	2b00      	cmp	r3, #0
 c0028f2:	d1f0      	bne.n	c0028d6 <HAL_RCC_OscConfig+0x822>
 c0028f4:	e043      	b.n	c00297e <HAL_RCC_OscConfig+0x8ca>
 c0028f6:	bf00      	nop
 c0028f8:	50021000 	.word	0x50021000
 c0028fc:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c002900:	687b      	ldr	r3, [r7, #4]
 c002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002904:	2b01      	cmp	r3, #1
 c002906:	d101      	bne.n	c00290c <HAL_RCC_OscConfig+0x858>
      {
        return HAL_ERROR;
 c002908:	2301      	movs	r3, #1
 c00290a:	e039      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c00290c:	4b1e      	ldr	r3, [pc, #120]	; (c002988 <HAL_RCC_OscConfig+0x8d4>)
 c00290e:	68db      	ldr	r3, [r3, #12]
 c002910:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002912:	697b      	ldr	r3, [r7, #20]
 c002914:	f003 0203 	and.w	r2, r3, #3
 c002918:	687b      	ldr	r3, [r7, #4]
 c00291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00291c:	429a      	cmp	r2, r3
 c00291e:	d12c      	bne.n	c00297a <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002920:	697b      	ldr	r3, [r7, #20]
 c002922:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c002926:	687b      	ldr	r3, [r7, #4]
 c002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00292a:	3b01      	subs	r3, #1
 c00292c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00292e:	429a      	cmp	r2, r3
 c002930:	d123      	bne.n	c00297a <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002932:	697b      	ldr	r3, [r7, #20]
 c002934:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c002938:	687b      	ldr	r3, [r7, #4]
 c00293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00293c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00293e:	429a      	cmp	r2, r3
 c002940:	d11b      	bne.n	c00297a <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002942:	697b      	ldr	r3, [r7, #20]
 c002944:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c002948:	687b      	ldr	r3, [r7, #4]
 c00294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00294c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00294e:	429a      	cmp	r2, r3
 c002950:	d113      	bne.n	c00297a <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002952:	697b      	ldr	r3, [r7, #20]
 c002954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c002958:	687b      	ldr	r3, [r7, #4]
 c00295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00295c:	085b      	lsrs	r3, r3, #1
 c00295e:	3b01      	subs	r3, #1
 c002960:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002962:	429a      	cmp	r2, r3
 c002964:	d109      	bne.n	c00297a <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c002966:	697b      	ldr	r3, [r7, #20]
 c002968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c00296c:	687b      	ldr	r3, [r7, #4]
 c00296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002970:	085b      	lsrs	r3, r3, #1
 c002972:	3b01      	subs	r3, #1
 c002974:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002976:	429a      	cmp	r2, r3
 c002978:	d001      	beq.n	c00297e <HAL_RCC_OscConfig+0x8ca>
        {
          return HAL_ERROR;
 c00297a:	2301      	movs	r3, #1
 c00297c:	e000      	b.n	c002980 <HAL_RCC_OscConfig+0x8cc>
        }
      }
    }
  }

  return HAL_OK;
 c00297e:	2300      	movs	r3, #0
}
 c002980:	4618      	mov	r0, r3
 c002982:	3720      	adds	r7, #32
 c002984:	46bd      	mov	sp, r7
 c002986:	bd80      	pop	{r7, pc}
 c002988:	50021000 	.word	0x50021000

0c00298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c00298c:	b580      	push	{r7, lr}
 c00298e:	b086      	sub	sp, #24
 c002990:	af00      	add	r7, sp, #0
 c002992:	6078      	str	r0, [r7, #4]
 c002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c002996:	2300      	movs	r3, #0
 c002998:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c00299a:	687b      	ldr	r3, [r7, #4]
 c00299c:	2b00      	cmp	r3, #0
 c00299e:	d101      	bne.n	c0029a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0029a0:	2301      	movs	r3, #1
 c0029a2:	e10d      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0029a4:	4b88      	ldr	r3, [pc, #544]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c0029a6:	681b      	ldr	r3, [r3, #0]
 c0029a8:	f003 030f 	and.w	r3, r3, #15
 c0029ac:	683a      	ldr	r2, [r7, #0]
 c0029ae:	429a      	cmp	r2, r3
 c0029b0:	d910      	bls.n	c0029d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0029b2:	4b85      	ldr	r3, [pc, #532]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c0029b4:	681b      	ldr	r3, [r3, #0]
 c0029b6:	f023 020f 	bic.w	r2, r3, #15
 c0029ba:	4983      	ldr	r1, [pc, #524]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c0029bc:	683b      	ldr	r3, [r7, #0]
 c0029be:	4313      	orrs	r3, r2
 c0029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0029c2:	4b81      	ldr	r3, [pc, #516]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c0029c4:	681b      	ldr	r3, [r3, #0]
 c0029c6:	f003 030f 	and.w	r3, r3, #15
 c0029ca:	683a      	ldr	r2, [r7, #0]
 c0029cc:	429a      	cmp	r2, r3
 c0029ce:	d001      	beq.n	c0029d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0029d0:	2301      	movs	r3, #1
 c0029d2:	e0f5      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0029d4:	687b      	ldr	r3, [r7, #4]
 c0029d6:	681b      	ldr	r3, [r3, #0]
 c0029d8:	f003 0301 	and.w	r3, r3, #1
 c0029dc:	2b00      	cmp	r3, #0
 c0029de:	f000 808b 	beq.w	c002af8 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0029e2:	687b      	ldr	r3, [r7, #4]
 c0029e4:	685b      	ldr	r3, [r3, #4]
 c0029e6:	2b03      	cmp	r3, #3
 c0029e8:	d134      	bne.n	c002a54 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0029ea:	4b78      	ldr	r3, [pc, #480]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c0029ec:	681b      	ldr	r3, [r3, #0]
 c0029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0029f2:	2b00      	cmp	r3, #0
 c0029f4:	d101      	bne.n	c0029fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c0029f6:	2301      	movs	r3, #1
 c0029f8:	e0e2      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c0029fa:	f000 fa21 	bl	c002e40 <RCC_GetSysClockFreqFromPLLSource>
 c0029fe:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c002a00:	693b      	ldr	r3, [r7, #16]
 c002a02:	4a73      	ldr	r2, [pc, #460]	; (c002bd0 <HAL_RCC_ClockConfig+0x244>)
 c002a04:	4293      	cmp	r3, r2
 c002a06:	d956      	bls.n	c002ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002a08:	4b70      	ldr	r3, [pc, #448]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a0a:	689b      	ldr	r3, [r3, #8]
 c002a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002a10:	2b00      	cmp	r3, #0
 c002a12:	d10a      	bne.n	c002a2a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002a14:	4b6d      	ldr	r3, [pc, #436]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a16:	689b      	ldr	r3, [r3, #8]
 c002a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002a1c:	4a6b      	ldr	r2, [pc, #428]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002a22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c002a24:	2380      	movs	r3, #128	; 0x80
 c002a26:	617b      	str	r3, [r7, #20]
 c002a28:	e045      	b.n	c002ab6 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c002a2a:	687b      	ldr	r3, [r7, #4]
 c002a2c:	681b      	ldr	r3, [r3, #0]
 c002a2e:	f003 0302 	and.w	r3, r3, #2
 c002a32:	2b00      	cmp	r3, #0
 c002a34:	d03f      	beq.n	c002ab6 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c002a36:	687b      	ldr	r3, [r7, #4]
 c002a38:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c002a3a:	2b00      	cmp	r3, #0
 c002a3c:	d13b      	bne.n	c002ab6 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002a3e:	4b63      	ldr	r3, [pc, #396]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a40:	689b      	ldr	r3, [r3, #8]
 c002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002a46:	4a61      	ldr	r2, [pc, #388]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c002a4e:	2380      	movs	r3, #128	; 0x80
 c002a50:	617b      	str	r3, [r7, #20]
 c002a52:	e030      	b.n	c002ab6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002a54:	687b      	ldr	r3, [r7, #4]
 c002a56:	685b      	ldr	r3, [r3, #4]
 c002a58:	2b02      	cmp	r3, #2
 c002a5a:	d107      	bne.n	c002a6c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002a5c:	4b5b      	ldr	r3, [pc, #364]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a5e:	681b      	ldr	r3, [r3, #0]
 c002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002a64:	2b00      	cmp	r3, #0
 c002a66:	d115      	bne.n	c002a94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002a68:	2301      	movs	r3, #1
 c002a6a:	e0a9      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c002a6c:	687b      	ldr	r3, [r7, #4]
 c002a6e:	685b      	ldr	r3, [r3, #4]
 c002a70:	2b00      	cmp	r3, #0
 c002a72:	d107      	bne.n	c002a84 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002a74:	4b55      	ldr	r3, [pc, #340]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a76:	681b      	ldr	r3, [r3, #0]
 c002a78:	f003 0302 	and.w	r3, r3, #2
 c002a7c:	2b00      	cmp	r3, #0
 c002a7e:	d109      	bne.n	c002a94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002a80:	2301      	movs	r3, #1
 c002a82:	e09d      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002a84:	4b51      	ldr	r3, [pc, #324]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002a86:	681b      	ldr	r3, [r3, #0]
 c002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002a8c:	2b00      	cmp	r3, #0
 c002a8e:	d101      	bne.n	c002a94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002a90:	2301      	movs	r3, #1
 c002a92:	e095      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c002a94:	f000 f8a2 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c002a98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c002a9a:	693b      	ldr	r3, [r7, #16]
 c002a9c:	4a4c      	ldr	r2, [pc, #304]	; (c002bd0 <HAL_RCC_ClockConfig+0x244>)
 c002a9e:	4293      	cmp	r3, r2
 c002aa0:	d909      	bls.n	c002ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002aa2:	4b4a      	ldr	r3, [pc, #296]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002aa4:	689b      	ldr	r3, [r3, #8]
 c002aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002aaa:	4a48      	ldr	r2, [pc, #288]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002ab0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c002ab2:	2380      	movs	r3, #128	; 0x80
 c002ab4:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c002ab6:	4b45      	ldr	r3, [pc, #276]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002ab8:	689b      	ldr	r3, [r3, #8]
 c002aba:	f023 0203 	bic.w	r2, r3, #3
 c002abe:	687b      	ldr	r3, [r7, #4]
 c002ac0:	685b      	ldr	r3, [r3, #4]
 c002ac2:	4942      	ldr	r1, [pc, #264]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002ac4:	4313      	orrs	r3, r2
 c002ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c002ac8:	f7fe fd08 	bl	c0014dc <HAL_GetTick>
 c002acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002ace:	e00a      	b.n	c002ae6 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c002ad0:	f7fe fd04 	bl	c0014dc <HAL_GetTick>
 c002ad4:	4602      	mov	r2, r0
 c002ad6:	68fb      	ldr	r3, [r7, #12]
 c002ad8:	1ad3      	subs	r3, r2, r3
 c002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 c002ade:	4293      	cmp	r3, r2
 c002ae0:	d901      	bls.n	c002ae6 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 c002ae2:	2303      	movs	r3, #3
 c002ae4:	e06c      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002ae6:	4b39      	ldr	r3, [pc, #228]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002ae8:	689b      	ldr	r3, [r3, #8]
 c002aea:	f003 020c 	and.w	r2, r3, #12
 c002aee:	687b      	ldr	r3, [r7, #4]
 c002af0:	685b      	ldr	r3, [r3, #4]
 c002af2:	009b      	lsls	r3, r3, #2
 c002af4:	429a      	cmp	r2, r3
 c002af6:	d1eb      	bne.n	c002ad0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002af8:	687b      	ldr	r3, [r7, #4]
 c002afa:	681b      	ldr	r3, [r3, #0]
 c002afc:	f003 0302 	and.w	r3, r3, #2
 c002b00:	2b00      	cmp	r3, #0
 c002b02:	d009      	beq.n	c002b18 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c002b04:	4b31      	ldr	r3, [pc, #196]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b06:	689b      	ldr	r3, [r3, #8]
 c002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002b0c:	687b      	ldr	r3, [r7, #4]
 c002b0e:	689b      	ldr	r3, [r3, #8]
 c002b10:	492e      	ldr	r1, [pc, #184]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b12:	4313      	orrs	r3, r2
 c002b14:	608b      	str	r3, [r1, #8]
 c002b16:	e008      	b.n	c002b2a <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c002b18:	697b      	ldr	r3, [r7, #20]
 c002b1a:	2b80      	cmp	r3, #128	; 0x80
 c002b1c:	d105      	bne.n	c002b2a <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c002b1e:	4b2b      	ldr	r3, [pc, #172]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b20:	689b      	ldr	r3, [r3, #8]
 c002b22:	4a2a      	ldr	r2, [pc, #168]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002b28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c002b2a:	4b27      	ldr	r3, [pc, #156]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c002b2c:	681b      	ldr	r3, [r3, #0]
 c002b2e:	f003 030f 	and.w	r3, r3, #15
 c002b32:	683a      	ldr	r2, [r7, #0]
 c002b34:	429a      	cmp	r2, r3
 c002b36:	d210      	bcs.n	c002b5a <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002b38:	4b23      	ldr	r3, [pc, #140]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c002b3a:	681b      	ldr	r3, [r3, #0]
 c002b3c:	f023 020f 	bic.w	r2, r3, #15
 c002b40:	4921      	ldr	r1, [pc, #132]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c002b42:	683b      	ldr	r3, [r7, #0]
 c002b44:	4313      	orrs	r3, r2
 c002b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002b48:	4b1f      	ldr	r3, [pc, #124]	; (c002bc8 <HAL_RCC_ClockConfig+0x23c>)
 c002b4a:	681b      	ldr	r3, [r3, #0]
 c002b4c:	f003 030f 	and.w	r3, r3, #15
 c002b50:	683a      	ldr	r2, [r7, #0]
 c002b52:	429a      	cmp	r2, r3
 c002b54:	d001      	beq.n	c002b5a <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 c002b56:	2301      	movs	r3, #1
 c002b58:	e032      	b.n	c002bc0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c002b5a:	687b      	ldr	r3, [r7, #4]
 c002b5c:	681b      	ldr	r3, [r3, #0]
 c002b5e:	f003 0304 	and.w	r3, r3, #4
 c002b62:	2b00      	cmp	r3, #0
 c002b64:	d008      	beq.n	c002b78 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c002b66:	4b19      	ldr	r3, [pc, #100]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b68:	689b      	ldr	r3, [r3, #8]
 c002b6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c002b6e:	687b      	ldr	r3, [r7, #4]
 c002b70:	68db      	ldr	r3, [r3, #12]
 c002b72:	4916      	ldr	r1, [pc, #88]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b74:	4313      	orrs	r3, r2
 c002b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002b78:	687b      	ldr	r3, [r7, #4]
 c002b7a:	681b      	ldr	r3, [r3, #0]
 c002b7c:	f003 0308 	and.w	r3, r3, #8
 c002b80:	2b00      	cmp	r3, #0
 c002b82:	d009      	beq.n	c002b98 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002b84:	4b11      	ldr	r3, [pc, #68]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b86:	689b      	ldr	r3, [r3, #8]
 c002b88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c002b8c:	687b      	ldr	r3, [r7, #4]
 c002b8e:	691b      	ldr	r3, [r3, #16]
 c002b90:	00db      	lsls	r3, r3, #3
 c002b92:	490e      	ldr	r1, [pc, #56]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002b94:	4313      	orrs	r3, r2
 c002b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 c002b98:	f000 f820 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c002b9c:	4601      	mov	r1, r0
 c002b9e:	4b0b      	ldr	r3, [pc, #44]	; (c002bcc <HAL_RCC_ClockConfig+0x240>)
 c002ba0:	689b      	ldr	r3, [r3, #8]
 c002ba2:	091b      	lsrs	r3, r3, #4
 c002ba4:	f003 030f 	and.w	r3, r3, #15
 c002ba8:	4a0a      	ldr	r2, [pc, #40]	; (c002bd4 <HAL_RCC_ClockConfig+0x248>)
 c002baa:	5cd3      	ldrb	r3, [r2, r3]
 c002bac:	fa21 f303 	lsr.w	r3, r1, r3
 c002bb0:	4a09      	ldr	r2, [pc, #36]	; (c002bd8 <HAL_RCC_ClockConfig+0x24c>)
 c002bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 c002bb4:	2000      	movs	r0, #0
 c002bb6:	f7fe fc45 	bl	c001444 <HAL_InitTick>
 c002bba:	4603      	mov	r3, r0
 c002bbc:	72fb      	strb	r3, [r7, #11]

  return status;
 c002bbe:	7afb      	ldrb	r3, [r7, #11]
}
 c002bc0:	4618      	mov	r0, r3
 c002bc2:	3718      	adds	r7, #24
 c002bc4:	46bd      	mov	sp, r7
 c002bc6:	bd80      	pop	{r7, pc}
 c002bc8:	50022000 	.word	0x50022000
 c002bcc:	50021000 	.word	0x50021000
 c002bd0:	04c4b400 	.word	0x04c4b400
 c002bd4:	0c0062dc 	.word	0x0c0062dc
 c002bd8:	30000000 	.word	0x30000000

0c002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c002bdc:	b480      	push	{r7}
 c002bde:	b089      	sub	sp, #36	; 0x24
 c002be0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c002be2:	2300      	movs	r3, #0
 c002be4:	61fb      	str	r3, [r7, #28]
 c002be6:	2300      	movs	r3, #0
 c002be8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002bea:	4b46      	ldr	r3, [pc, #280]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002bec:	689b      	ldr	r3, [r3, #8]
 c002bee:	f003 030c 	and.w	r3, r3, #12
 c002bf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002bf4:	4b43      	ldr	r3, [pc, #268]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002bf6:	68db      	ldr	r3, [r3, #12]
 c002bf8:	f003 0303 	and.w	r3, r3, #3
 c002bfc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 c002bfe:	693b      	ldr	r3, [r7, #16]
 c002c00:	2b00      	cmp	r3, #0
 c002c02:	d005      	beq.n	c002c10 <HAL_RCC_GetSysClockFreq+0x34>
 c002c04:	693b      	ldr	r3, [r7, #16]
 c002c06:	2b0c      	cmp	r3, #12
 c002c08:	d121      	bne.n	c002c4e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c002c0a:	68fb      	ldr	r3, [r7, #12]
 c002c0c:	2b01      	cmp	r3, #1
 c002c0e:	d11e      	bne.n	c002c4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002c10:	4b3c      	ldr	r3, [pc, #240]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002c12:	681b      	ldr	r3, [r3, #0]
 c002c14:	f003 0308 	and.w	r3, r3, #8
 c002c18:	2b00      	cmp	r3, #0
 c002c1a:	d107      	bne.n	c002c2c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002c1c:	4b39      	ldr	r3, [pc, #228]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002c22:	0a1b      	lsrs	r3, r3, #8
 c002c24:	f003 030f 	and.w	r3, r3, #15
 c002c28:	61fb      	str	r3, [r7, #28]
 c002c2a:	e005      	b.n	c002c38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002c2c:	4b35      	ldr	r3, [pc, #212]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002c2e:	681b      	ldr	r3, [r3, #0]
 c002c30:	091b      	lsrs	r3, r3, #4
 c002c32:	f003 030f 	and.w	r3, r3, #15
 c002c36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002c38:	4a33      	ldr	r2, [pc, #204]	; (c002d08 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002c3a:	69fb      	ldr	r3, [r7, #28]
 c002c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002c40:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_CFGR_SWS_MSI)
 c002c42:	693b      	ldr	r3, [r7, #16]
 c002c44:	2b00      	cmp	r3, #0
 c002c46:	d10d      	bne.n	c002c64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c002c48:	69fb      	ldr	r3, [r7, #28]
 c002c4a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_CFGR_SWS_MSI)
 c002c4c:	e00a      	b.n	c002c64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSI)
 c002c4e:	693b      	ldr	r3, [r7, #16]
 c002c50:	2b04      	cmp	r3, #4
 c002c52:	d102      	bne.n	c002c5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c002c54:	4b2d      	ldr	r3, [pc, #180]	; (c002d0c <HAL_RCC_GetSysClockFreq+0x130>)
 c002c56:	61bb      	str	r3, [r7, #24]
 c002c58:	e004      	b.n	c002c64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSE)
 c002c5a:	693b      	ldr	r3, [r7, #16]
 c002c5c:	2b08      	cmp	r3, #8
 c002c5e:	d101      	bne.n	c002c64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c002c60:	4b2b      	ldr	r3, [pc, #172]	; (c002d10 <HAL_RCC_GetSysClockFreq+0x134>)
 c002c62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_CFGR_SWS_PLL)
 c002c64:	693b      	ldr	r3, [r7, #16]
 c002c66:	2b0c      	cmp	r3, #12
 c002c68:	d145      	bne.n	c002cf6 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002c6a:	4b26      	ldr	r3, [pc, #152]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002c6c:	68db      	ldr	r3, [r3, #12]
 c002c6e:	f003 0303 	and.w	r3, r3, #3
 c002c72:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002c74:	4b23      	ldr	r3, [pc, #140]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002c76:	68db      	ldr	r3, [r3, #12]
 c002c78:	091b      	lsrs	r3, r3, #4
 c002c7a:	f003 030f 	and.w	r3, r3, #15
 c002c7e:	3301      	adds	r3, #1
 c002c80:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c002c82:	68bb      	ldr	r3, [r7, #8]
 c002c84:	2b02      	cmp	r3, #2
 c002c86:	d002      	beq.n	c002c8e <HAL_RCC_GetSysClockFreq+0xb2>
 c002c88:	2b03      	cmp	r3, #3
 c002c8a:	d00d      	beq.n	c002ca8 <HAL_RCC_GetSysClockFreq+0xcc>
 c002c8c:	e019      	b.n	c002cc2 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002c8e:	4a1f      	ldr	r2, [pc, #124]	; (c002d0c <HAL_RCC_GetSysClockFreq+0x130>)
 c002c90:	687b      	ldr	r3, [r7, #4]
 c002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 c002c96:	4a1b      	ldr	r2, [pc, #108]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002c98:	68d2      	ldr	r2, [r2, #12]
 c002c9a:	0a12      	lsrs	r2, r2, #8
 c002c9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002ca0:	fb02 f303 	mul.w	r3, r2, r3
 c002ca4:	617b      	str	r3, [r7, #20]
        break;
 c002ca6:	e019      	b.n	c002cdc <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002ca8:	4a19      	ldr	r2, [pc, #100]	; (c002d10 <HAL_RCC_GetSysClockFreq+0x134>)
 c002caa:	687b      	ldr	r3, [r7, #4]
 c002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 c002cb0:	4a14      	ldr	r2, [pc, #80]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002cb2:	68d2      	ldr	r2, [r2, #12]
 c002cb4:	0a12      	lsrs	r2, r2, #8
 c002cb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002cba:	fb02 f303 	mul.w	r3, r2, r3
 c002cbe:	617b      	str	r3, [r7, #20]
        break;
 c002cc0:	e00c      	b.n	c002cdc <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002cc2:	69fa      	ldr	r2, [r7, #28]
 c002cc4:	687b      	ldr	r3, [r7, #4]
 c002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 c002cca:	4a0e      	ldr	r2, [pc, #56]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002ccc:	68d2      	ldr	r2, [r2, #12]
 c002cce:	0a12      	lsrs	r2, r2, #8
 c002cd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002cd4:	fb02 f303 	mul.w	r3, r2, r3
 c002cd8:	617b      	str	r3, [r7, #20]
        break;
 c002cda:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002cdc:	4b09      	ldr	r3, [pc, #36]	; (c002d04 <HAL_RCC_GetSysClockFreq+0x128>)
 c002cde:	68db      	ldr	r3, [r3, #12]
 c002ce0:	0e5b      	lsrs	r3, r3, #25
 c002ce2:	f003 0303 	and.w	r3, r3, #3
 c002ce6:	3301      	adds	r3, #1
 c002ce8:	005b      	lsls	r3, r3, #1
 c002cea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c002cec:	697a      	ldr	r2, [r7, #20]
 c002cee:	683b      	ldr	r3, [r7, #0]
 c002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 c002cf4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c002cf6:	69bb      	ldr	r3, [r7, #24]
}
 c002cf8:	4618      	mov	r0, r3
 c002cfa:	3724      	adds	r7, #36	; 0x24
 c002cfc:	46bd      	mov	sp, r7
 c002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d02:	4770      	bx	lr
 c002d04:	50021000 	.word	0x50021000
 c002d08:	0c0062f4 	.word	0x0c0062f4
 c002d0c:	00f42400 	.word	0x00f42400
 c002d10:	007a1200 	.word	0x007a1200

0c002d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c002d14:	b580      	push	{r7, lr}
 c002d16:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c002d18:	f7fe fa62 	bl	c0011e0 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c002d1c:	4b01      	ldr	r3, [pc, #4]	; (c002d24 <HAL_RCC_GetHCLKFreq+0x10>)
 c002d1e:	681b      	ldr	r3, [r3, #0]
}
 c002d20:	4618      	mov	r0, r3
 c002d22:	bd80      	pop	{r7, pc}
 c002d24:	30000000 	.word	0x30000000

0c002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c002d28:	b580      	push	{r7, lr}
 c002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c002d2c:	f7ff fff2 	bl	c002d14 <HAL_RCC_GetHCLKFreq>
 c002d30:	4601      	mov	r1, r0
 c002d32:	4b05      	ldr	r3, [pc, #20]	; (c002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 c002d34:	689b      	ldr	r3, [r3, #8]
 c002d36:	0a1b      	lsrs	r3, r3, #8
 c002d38:	f003 0307 	and.w	r3, r3, #7
 c002d3c:	4a03      	ldr	r2, [pc, #12]	; (c002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 c002d3e:	5cd3      	ldrb	r3, [r2, r3]
 c002d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 c002d44:	4618      	mov	r0, r3
 c002d46:	bd80      	pop	{r7, pc}
 c002d48:	50021000 	.word	0x50021000
 c002d4c:	0c0062ec 	.word	0x0c0062ec

0c002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c002d50:	b580      	push	{r7, lr}
 c002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c002d54:	f7ff ffde 	bl	c002d14 <HAL_RCC_GetHCLKFreq>
 c002d58:	4601      	mov	r1, r0
 c002d5a:	4b05      	ldr	r3, [pc, #20]	; (c002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 c002d5c:	689b      	ldr	r3, [r3, #8]
 c002d5e:	0adb      	lsrs	r3, r3, #11
 c002d60:	f003 0307 	and.w	r3, r3, #7
 c002d64:	4a03      	ldr	r2, [pc, #12]	; (c002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 c002d66:	5cd3      	ldrb	r3, [r2, r3]
 c002d68:	fa21 f303 	lsr.w	r3, r1, r3
}
 c002d6c:	4618      	mov	r0, r3
 c002d6e:	bd80      	pop	{r7, pc}
 c002d70:	50021000 	.word	0x50021000
 c002d74:	0c0062ec 	.word	0x0c0062ec

0c002d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c002d78:	b580      	push	{r7, lr}
 c002d7a:	b086      	sub	sp, #24
 c002d7c:	af00      	add	r7, sp, #0
 c002d7e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c002d80:	2300      	movs	r3, #0
 c002d82:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c002d84:	4b2c      	ldr	r3, [pc, #176]	; (c002e38 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002d8c:	2b00      	cmp	r3, #0
 c002d8e:	d003      	beq.n	c002d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c002d90:	f7ff f8e2 	bl	c001f58 <HAL_PWREx_GetVoltageRange>
 c002d94:	6138      	str	r0, [r7, #16]
 c002d96:	e014      	b.n	c002dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c002d98:	4b27      	ldr	r3, [pc, #156]	; (c002e38 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002d9c:	4a26      	ldr	r2, [pc, #152]	; (c002e38 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002da2:	6593      	str	r3, [r2, #88]	; 0x58
 c002da4:	4b24      	ldr	r3, [pc, #144]	; (c002e38 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002dac:	60fb      	str	r3, [r7, #12]
 c002dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c002db0:	f7ff f8d2 	bl	c001f58 <HAL_PWREx_GetVoltageRange>
 c002db4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c002db6:	4b20      	ldr	r3, [pc, #128]	; (c002e38 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002dba:	4a1f      	ldr	r2, [pc, #124]	; (c002e38 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c002dc2:	693b      	ldr	r3, [r7, #16]
 c002dc4:	2b00      	cmp	r3, #0
 c002dc6:	d003      	beq.n	c002dd0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c002dc8:	693b      	ldr	r3, [r7, #16]
 c002dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002dce:	d10b      	bne.n	c002de8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c002dd0:	687b      	ldr	r3, [r7, #4]
 c002dd2:	2b80      	cmp	r3, #128	; 0x80
 c002dd4:	d919      	bls.n	c002e0a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c002dd6:	687b      	ldr	r3, [r7, #4]
 c002dd8:	2ba0      	cmp	r3, #160	; 0xa0
 c002dda:	d902      	bls.n	c002de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002ddc:	2302      	movs	r3, #2
 c002dde:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c002de0:	e013      	b.n	c002e0a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c002de2:	2301      	movs	r3, #1
 c002de4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c002de6:	e010      	b.n	c002e0a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c002de8:	687b      	ldr	r3, [r7, #4]
 c002dea:	2b80      	cmp	r3, #128	; 0x80
 c002dec:	d902      	bls.n	c002df4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c002dee:	2303      	movs	r3, #3
 c002df0:	617b      	str	r3, [r7, #20]
 c002df2:	e00a      	b.n	c002e0a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c002df4:	687b      	ldr	r3, [r7, #4]
 c002df6:	2b80      	cmp	r3, #128	; 0x80
 c002df8:	d102      	bne.n	c002e00 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002dfa:	2302      	movs	r3, #2
 c002dfc:	617b      	str	r3, [r7, #20]
 c002dfe:	e004      	b.n	c002e0a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c002e00:	687b      	ldr	r3, [r7, #4]
 c002e02:	2b70      	cmp	r3, #112	; 0x70
 c002e04:	d101      	bne.n	c002e0a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c002e06:	2301      	movs	r3, #1
 c002e08:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c002e0a:	4b0c      	ldr	r3, [pc, #48]	; (c002e3c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002e0c:	681b      	ldr	r3, [r3, #0]
 c002e0e:	f023 020f 	bic.w	r2, r3, #15
 c002e12:	490a      	ldr	r1, [pc, #40]	; (c002e3c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002e14:	697b      	ldr	r3, [r7, #20]
 c002e16:	4313      	orrs	r3, r2
 c002e18:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c002e1a:	4b08      	ldr	r3, [pc, #32]	; (c002e3c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002e1c:	681b      	ldr	r3, [r3, #0]
 c002e1e:	f003 030f 	and.w	r3, r3, #15
 c002e22:	697a      	ldr	r2, [r7, #20]
 c002e24:	429a      	cmp	r2, r3
 c002e26:	d001      	beq.n	c002e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c002e28:	2301      	movs	r3, #1
 c002e2a:	e000      	b.n	c002e2e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c002e2c:	2300      	movs	r3, #0
}
 c002e2e:	4618      	mov	r0, r3
 c002e30:	3718      	adds	r7, #24
 c002e32:	46bd      	mov	sp, r7
 c002e34:	bd80      	pop	{r7, pc}
 c002e36:	bf00      	nop
 c002e38:	50021000 	.word	0x50021000
 c002e3c:	50022000 	.word	0x50022000

0c002e40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c002e40:	b480      	push	{r7}
 c002e42:	b087      	sub	sp, #28
 c002e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c002e46:	2300      	movs	r3, #0
 c002e48:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c002e4a:	4b36      	ldr	r3, [pc, #216]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002e4c:	68db      	ldr	r3, [r3, #12]
 c002e4e:	f003 0303 	and.w	r3, r3, #3
 c002e52:	2b01      	cmp	r3, #1
 c002e54:	d118      	bne.n	c002e88 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002e56:	4b33      	ldr	r3, [pc, #204]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002e58:	681b      	ldr	r3, [r3, #0]
 c002e5a:	f003 0308 	and.w	r3, r3, #8
 c002e5e:	2b00      	cmp	r3, #0
 c002e60:	d107      	bne.n	c002e72 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002e62:	4b30      	ldr	r3, [pc, #192]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002e68:	0a1b      	lsrs	r3, r3, #8
 c002e6a:	f003 030f 	and.w	r3, r3, #15
 c002e6e:	617b      	str	r3, [r7, #20]
 c002e70:	e005      	b.n	c002e7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002e72:	4b2c      	ldr	r3, [pc, #176]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002e74:	681b      	ldr	r3, [r3, #0]
 c002e76:	091b      	lsrs	r3, r3, #4
 c002e78:	f003 030f 	and.w	r3, r3, #15
 c002e7c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002e7e:	4a2a      	ldr	r2, [pc, #168]	; (c002f28 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c002e80:	697b      	ldr	r3, [r7, #20]
 c002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002e86:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c002e88:	4b26      	ldr	r3, [pc, #152]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002e8a:	68db      	ldr	r3, [r3, #12]
 c002e8c:	f003 0303 	and.w	r3, r3, #3
 c002e90:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002e92:	4b24      	ldr	r3, [pc, #144]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002e94:	68db      	ldr	r3, [r3, #12]
 c002e96:	091b      	lsrs	r3, r3, #4
 c002e98:	f003 030f 	and.w	r3, r3, #15
 c002e9c:	3301      	adds	r3, #1
 c002e9e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c002ea0:	68fb      	ldr	r3, [r7, #12]
 c002ea2:	2b02      	cmp	r3, #2
 c002ea4:	d002      	beq.n	c002eac <RCC_GetSysClockFreqFromPLLSource+0x6c>
 c002ea6:	2b03      	cmp	r3, #3
 c002ea8:	d00d      	beq.n	c002ec6 <RCC_GetSysClockFreqFromPLLSource+0x86>
 c002eaa:	e019      	b.n	c002ee0 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002eac:	4a1f      	ldr	r2, [pc, #124]	; (c002f2c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c002eae:	68bb      	ldr	r3, [r7, #8]
 c002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 c002eb4:	4a1b      	ldr	r2, [pc, #108]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002eb6:	68d2      	ldr	r2, [r2, #12]
 c002eb8:	0a12      	lsrs	r2, r2, #8
 c002eba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002ebe:	fb02 f303 	mul.w	r3, r2, r3
 c002ec2:	613b      	str	r3, [r7, #16]
      break;
 c002ec4:	e019      	b.n	c002efa <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002ec6:	4a1a      	ldr	r2, [pc, #104]	; (c002f30 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 c002ec8:	68bb      	ldr	r3, [r7, #8]
 c002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 c002ece:	4a15      	ldr	r2, [pc, #84]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002ed0:	68d2      	ldr	r2, [r2, #12]
 c002ed2:	0a12      	lsrs	r2, r2, #8
 c002ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002ed8:	fb02 f303 	mul.w	r3, r2, r3
 c002edc:	613b      	str	r3, [r7, #16]
      break;
 c002ede:	e00c      	b.n	c002efa <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002ee0:	697a      	ldr	r2, [r7, #20]
 c002ee2:	68bb      	ldr	r3, [r7, #8]
 c002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 c002ee8:	4a0e      	ldr	r2, [pc, #56]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002eea:	68d2      	ldr	r2, [r2, #12]
 c002eec:	0a12      	lsrs	r2, r2, #8
 c002eee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002ef2:	fb02 f303 	mul.w	r3, r2, r3
 c002ef6:	613b      	str	r3, [r7, #16]
      break;
 c002ef8:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002efa:	4b0a      	ldr	r3, [pc, #40]	; (c002f24 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002efc:	68db      	ldr	r3, [r3, #12]
 c002efe:	0e5b      	lsrs	r3, r3, #25
 c002f00:	f003 0303 	and.w	r3, r3, #3
 c002f04:	3301      	adds	r3, #1
 c002f06:	005b      	lsls	r3, r3, #1
 c002f08:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c002f0a:	693a      	ldr	r2, [r7, #16]
 c002f0c:	687b      	ldr	r3, [r7, #4]
 c002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002f12:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c002f14:	683b      	ldr	r3, [r7, #0]
}
 c002f16:	4618      	mov	r0, r3
 c002f18:	371c      	adds	r7, #28
 c002f1a:	46bd      	mov	sp, r7
 c002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f20:	4770      	bx	lr
 c002f22:	bf00      	nop
 c002f24:	50021000 	.word	0x50021000
 c002f28:	0c0062f4 	.word	0x0c0062f4
 c002f2c:	00f42400 	.word	0x00f42400
 c002f30:	007a1200 	.word	0x007a1200

0c002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c002f34:	b580      	push	{r7, lr}
 c002f36:	b088      	sub	sp, #32
 c002f38:	af00      	add	r7, sp, #0
 c002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c002f3c:	2300      	movs	r3, #0
 c002f3e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c002f40:	2300      	movs	r3, #0
 c002f42:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c002f44:	687b      	ldr	r3, [r7, #4]
 c002f46:	681b      	ldr	r3, [r3, #0]
 c002f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002f4c:	2b00      	cmp	r3, #0
 c002f4e:	d03d      	beq.n	c002fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c002f50:	687b      	ldr	r3, [r7, #4]
 c002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002f54:	2b40      	cmp	r3, #64	; 0x40
 c002f56:	d00b      	beq.n	c002f70 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 c002f58:	2b40      	cmp	r3, #64	; 0x40
 c002f5a:	d804      	bhi.n	c002f66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 c002f5c:	2b00      	cmp	r3, #0
 c002f5e:	d00e      	beq.n	c002f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 c002f60:	2b20      	cmp	r3, #32
 c002f62:	d015      	beq.n	c002f90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 c002f64:	e01d      	b.n	c002fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 c002f66:	2b60      	cmp	r3, #96	; 0x60
 c002f68:	d01e      	beq.n	c002fa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c002f6a:	2b80      	cmp	r3, #128	; 0x80
 c002f6c:	d01c      	beq.n	c002fa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c002f6e:	e018      	b.n	c002fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c002f70:	4b84      	ldr	r3, [pc, #528]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c002f72:	68db      	ldr	r3, [r3, #12]
 c002f74:	4a83      	ldr	r2, [pc, #524]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c002f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002f7a:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002f7c:	e015      	b.n	c002faa <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c002f7e:	687b      	ldr	r3, [r7, #4]
 c002f80:	3304      	adds	r3, #4
 c002f82:	2100      	movs	r1, #0
 c002f84:	4618      	mov	r0, r3
 c002f86:	f000 fb3f 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c002f8a:	4603      	mov	r3, r0
 c002f8c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002f8e:	e00c      	b.n	c002faa <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c002f90:	687b      	ldr	r3, [r7, #4]
 c002f92:	3320      	adds	r3, #32
 c002f94:	2100      	movs	r1, #0
 c002f96:	4618      	mov	r0, r3
 c002f98:	f000 fc08 	bl	c0037ac <RCCEx_PLLSAI2_Config>
 c002f9c:	4603      	mov	r3, r0
 c002f9e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002fa0:	e003      	b.n	c002faa <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c002fa2:	2301      	movs	r3, #1
 c002fa4:	77fb      	strb	r3, [r7, #31]
        break;
 c002fa6:	e000      	b.n	c002faa <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 c002fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c002faa:	7ffb      	ldrb	r3, [r7, #31]
 c002fac:	2b00      	cmp	r3, #0
 c002fae:	d10b      	bne.n	c002fc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c002fb0:	4b74      	ldr	r3, [pc, #464]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c002fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002fb6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c002fba:	687b      	ldr	r3, [r7, #4]
 c002fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002fbe:	4971      	ldr	r1, [pc, #452]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c002fc0:	4313      	orrs	r3, r2
 c002fc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c002fc6:	e001      	b.n	c002fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c002fc8:	7ffb      	ldrb	r3, [r7, #31]
 c002fca:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c002fcc:	687b      	ldr	r3, [r7, #4]
 c002fce:	681b      	ldr	r3, [r3, #0]
 c002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c002fd4:	2b00      	cmp	r3, #0
 c002fd6:	d042      	beq.n	c00305e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c002fd8:	687b      	ldr	r3, [r7, #4]
 c002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002fe0:	d00f      	beq.n	c003002 <HAL_RCCEx_PeriphCLKConfig+0xce>
 c002fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002fe6:	d805      	bhi.n	c002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 c002fe8:	2b00      	cmp	r3, #0
 c002fea:	d011      	beq.n	c003010 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 c002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c002ff0:	d017      	beq.n	c003022 <HAL_RCCEx_PeriphCLKConfig+0xee>
 c002ff2:	e01f      	b.n	c003034 <HAL_RCCEx_PeriphCLKConfig+0x100>
 c002ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c002ff8:	d01f      	beq.n	c00303a <HAL_RCCEx_PeriphCLKConfig+0x106>
 c002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002ffe:	d01c      	beq.n	c00303a <HAL_RCCEx_PeriphCLKConfig+0x106>
 c003000:	e018      	b.n	c003034 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003002:	4b60      	ldr	r3, [pc, #384]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003004:	68db      	ldr	r3, [r3, #12]
 c003006:	4a5f      	ldr	r2, [pc, #380]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00300c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00300e:	e015      	b.n	c00303c <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003010:	687b      	ldr	r3, [r7, #4]
 c003012:	3304      	adds	r3, #4
 c003014:	2100      	movs	r1, #0
 c003016:	4618      	mov	r0, r3
 c003018:	f000 faf6 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c00301c:	4603      	mov	r3, r0
 c00301e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003020:	e00c      	b.n	c00303c <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003022:	687b      	ldr	r3, [r7, #4]
 c003024:	3320      	adds	r3, #32
 c003026:	2100      	movs	r1, #0
 c003028:	4618      	mov	r0, r3
 c00302a:	f000 fbbf 	bl	c0037ac <RCCEx_PLLSAI2_Config>
 c00302e:	4603      	mov	r3, r0
 c003030:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003032:	e003      	b.n	c00303c <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003034:	2301      	movs	r3, #1
 c003036:	77fb      	strb	r3, [r7, #31]
        break;
 c003038:	e000      	b.n	c00303c <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 c00303a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00303c:	7ffb      	ldrb	r3, [r7, #31]
 c00303e:	2b00      	cmp	r3, #0
 c003040:	d10b      	bne.n	c00305a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c003042:	4b50      	ldr	r3, [pc, #320]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00304c:	687b      	ldr	r3, [r7, #4]
 c00304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003050:	494c      	ldr	r1, [pc, #304]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003052:	4313      	orrs	r3, r2
 c003054:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003058:	e001      	b.n	c00305e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00305a:	7ffb      	ldrb	r3, [r7, #31]
 c00305c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00305e:	687b      	ldr	r3, [r7, #4]
 c003060:	681b      	ldr	r3, [r3, #0]
 c003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003066:	2b00      	cmp	r3, #0
 c003068:	f000 809b 	beq.w	c0031a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00306c:	2300      	movs	r3, #0
 c00306e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003070:	4b44      	ldr	r3, [pc, #272]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003078:	2b00      	cmp	r3, #0
 c00307a:	d10d      	bne.n	c003098 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00307c:	4b41      	ldr	r3, [pc, #260]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c00307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003080:	4a40      	ldr	r2, [pc, #256]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003086:	6593      	str	r3, [r2, #88]	; 0x58
 c003088:	4b3e      	ldr	r3, [pc, #248]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c00308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003090:	60fb      	str	r3, [r7, #12]
 c003092:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c003094:	2301      	movs	r3, #1
 c003096:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003098:	4b3b      	ldr	r3, [pc, #236]	; (c003188 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 c00309a:	681b      	ldr	r3, [r3, #0]
 c00309c:	4a3a      	ldr	r2, [pc, #232]	; (c003188 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 c00309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0030a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0030a4:	f7fe fa1a 	bl	c0014dc <HAL_GetTick>
 c0030a8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0030aa:	e009      	b.n	c0030c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0030ac:	f7fe fa16 	bl	c0014dc <HAL_GetTick>
 c0030b0:	4602      	mov	r2, r0
 c0030b2:	693b      	ldr	r3, [r7, #16]
 c0030b4:	1ad3      	subs	r3, r2, r3
 c0030b6:	2b02      	cmp	r3, #2
 c0030b8:	d902      	bls.n	c0030c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 c0030ba:	2303      	movs	r3, #3
 c0030bc:	77fb      	strb	r3, [r7, #31]
        break;
 c0030be:	e005      	b.n	c0030cc <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0030c0:	4b31      	ldr	r3, [pc, #196]	; (c003188 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 c0030c2:	681b      	ldr	r3, [r3, #0]
 c0030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0030c8:	2b00      	cmp	r3, #0
 c0030ca:	d0ef      	beq.n	c0030ac <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 c0030cc:	7ffb      	ldrb	r3, [r7, #31]
 c0030ce:	2b00      	cmp	r3, #0
 c0030d0:	d15c      	bne.n	c00318c <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c0030d2:	4b2c      	ldr	r3, [pc, #176]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c0030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0030d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0030dc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c0030de:	69bb      	ldr	r3, [r7, #24]
 c0030e0:	2b00      	cmp	r3, #0
 c0030e2:	d01f      	beq.n	c003124 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 c0030e4:	687b      	ldr	r3, [r7, #4]
 c0030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0030ea:	69ba      	ldr	r2, [r7, #24]
 c0030ec:	429a      	cmp	r2, r3
 c0030ee:	d019      	beq.n	c003124 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0030f0:	4b24      	ldr	r3, [pc, #144]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c0030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0030fa:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0030fc:	4b21      	ldr	r3, [pc, #132]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c0030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003102:	4a20      	ldr	r2, [pc, #128]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c00310c:	4b1d      	ldr	r3, [pc, #116]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c00310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003112:	4a1c      	ldr	r2, [pc, #112]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c003118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c00311c:	4a19      	ldr	r2, [pc, #100]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c00311e:	69bb      	ldr	r3, [r7, #24]
 c003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c003124:	69bb      	ldr	r3, [r7, #24]
 c003126:	f003 0301 	and.w	r3, r3, #1
 c00312a:	2b00      	cmp	r3, #0
 c00312c:	d016      	beq.n	c00315c <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00312e:	f7fe f9d5 	bl	c0014dc <HAL_GetTick>
 c003132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003134:	e00b      	b.n	c00314e <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003136:	f7fe f9d1 	bl	c0014dc <HAL_GetTick>
 c00313a:	4602      	mov	r2, r0
 c00313c:	693b      	ldr	r3, [r7, #16]
 c00313e:	1ad3      	subs	r3, r2, r3
 c003140:	f241 3288 	movw	r2, #5000	; 0x1388
 c003144:	4293      	cmp	r3, r2
 c003146:	d902      	bls.n	c00314e <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 c003148:	2303      	movs	r3, #3
 c00314a:	77fb      	strb	r3, [r7, #31]
            break;
 c00314c:	e006      	b.n	c00315c <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00314e:	4b0d      	ldr	r3, [pc, #52]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003154:	f003 0302 	and.w	r3, r3, #2
 c003158:	2b00      	cmp	r3, #0
 c00315a:	d0ec      	beq.n	c003136 <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 c00315c:	7ffb      	ldrb	r3, [r7, #31]
 c00315e:	2b00      	cmp	r3, #0
 c003160:	d10c      	bne.n	c00317c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c003162:	4b08      	ldr	r3, [pc, #32]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c00316c:	687b      	ldr	r3, [r7, #4]
 c00316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003172:	4904      	ldr	r1, [pc, #16]	; (c003184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 c003174:	4313      	orrs	r3, r2
 c003176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c00317a:	e009      	b.n	c003190 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00317c:	7ffb      	ldrb	r3, [r7, #31]
 c00317e:	77bb      	strb	r3, [r7, #30]
 c003180:	e006      	b.n	c003190 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 c003182:	bf00      	nop
 c003184:	50021000 	.word	0x50021000
 c003188:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00318c:	7ffb      	ldrb	r3, [r7, #31]
 c00318e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003190:	7dfb      	ldrb	r3, [r7, #23]
 c003192:	2b01      	cmp	r3, #1
 c003194:	d105      	bne.n	c0031a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003196:	4bae      	ldr	r3, [pc, #696]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00319a:	4aad      	ldr	r2, [pc, #692]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0031a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0031a2:	687b      	ldr	r3, [r7, #4]
 c0031a4:	681b      	ldr	r3, [r3, #0]
 c0031a6:	f003 0301 	and.w	r3, r3, #1
 c0031aa:	2b00      	cmp	r3, #0
 c0031ac:	d00a      	beq.n	c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c0031ae:	4ba8      	ldr	r3, [pc, #672]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0031b4:	f023 0203 	bic.w	r2, r3, #3
 c0031b8:	687b      	ldr	r3, [r7, #4]
 c0031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0031bc:	49a4      	ldr	r1, [pc, #656]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0031be:	4313      	orrs	r3, r2
 c0031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0031c4:	687b      	ldr	r3, [r7, #4]
 c0031c6:	681b      	ldr	r3, [r3, #0]
 c0031c8:	f003 0302 	and.w	r3, r3, #2
 c0031cc:	2b00      	cmp	r3, #0
 c0031ce:	d00a      	beq.n	c0031e6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c0031d0:	4b9f      	ldr	r3, [pc, #636]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0031d6:	f023 020c 	bic.w	r2, r3, #12
 c0031da:	687b      	ldr	r3, [r7, #4]
 c0031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0031de:	499c      	ldr	r1, [pc, #624]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0031e0:	4313      	orrs	r3, r2
 c0031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0031e6:	687b      	ldr	r3, [r7, #4]
 c0031e8:	681b      	ldr	r3, [r3, #0]
 c0031ea:	f003 0304 	and.w	r3, r3, #4
 c0031ee:	2b00      	cmp	r3, #0
 c0031f0:	d00a      	beq.n	c003208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c0031f2:	4b97      	ldr	r3, [pc, #604]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0031f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0031fc:	687b      	ldr	r3, [r7, #4]
 c0031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003200:	4993      	ldr	r1, [pc, #588]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003202:	4313      	orrs	r3, r2
 c003204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c003208:	687b      	ldr	r3, [r7, #4]
 c00320a:	681b      	ldr	r3, [r3, #0]
 c00320c:	f003 0308 	and.w	r3, r3, #8
 c003210:	2b00      	cmp	r3, #0
 c003212:	d00a      	beq.n	c00322a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c003214:	4b8e      	ldr	r3, [pc, #568]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00321a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c00321e:	687b      	ldr	r3, [r7, #4]
 c003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003222:	498b      	ldr	r1, [pc, #556]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003224:	4313      	orrs	r3, r2
 c003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00322a:	687b      	ldr	r3, [r7, #4]
 c00322c:	681b      	ldr	r3, [r3, #0]
 c00322e:	f003 0310 	and.w	r3, r3, #16
 c003232:	2b00      	cmp	r3, #0
 c003234:	d00a      	beq.n	c00324c <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c003236:	4b86      	ldr	r3, [pc, #536]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00323c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c003240:	687b      	ldr	r3, [r7, #4]
 c003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003244:	4982      	ldr	r1, [pc, #520]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003246:	4313      	orrs	r3, r2
 c003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c00324c:	687b      	ldr	r3, [r7, #4]
 c00324e:	681b      	ldr	r3, [r3, #0]
 c003250:	f003 0320 	and.w	r3, r3, #32
 c003254:	2b00      	cmp	r3, #0
 c003256:	d00a      	beq.n	c00326e <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c003258:	4b7d      	ldr	r3, [pc, #500]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00325e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c003262:	687b      	ldr	r3, [r7, #4]
 c003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c003266:	497a      	ldr	r1, [pc, #488]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003268:	4313      	orrs	r3, r2
 c00326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c00326e:	687b      	ldr	r3, [r7, #4]
 c003270:	681b      	ldr	r3, [r3, #0]
 c003272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003276:	2b00      	cmp	r3, #0
 c003278:	d00a      	beq.n	c003290 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c00327a:	4b75      	ldr	r3, [pc, #468]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003280:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c003284:	687b      	ldr	r3, [r7, #4]
 c003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c003288:	4971      	ldr	r1, [pc, #452]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00328a:	4313      	orrs	r3, r2
 c00328c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c003290:	687b      	ldr	r3, [r7, #4]
 c003292:	681b      	ldr	r3, [r3, #0]
 c003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003298:	2b00      	cmp	r3, #0
 c00329a:	d00a      	beq.n	c0032b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c00329c:	4b6c      	ldr	r3, [pc, #432]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0032a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0032a6:	687b      	ldr	r3, [r7, #4]
 c0032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0032aa:	4969      	ldr	r1, [pc, #420]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0032ac:	4313      	orrs	r3, r2
 c0032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c0032b2:	687b      	ldr	r3, [r7, #4]
 c0032b4:	681b      	ldr	r3, [r3, #0]
 c0032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0032ba:	2b00      	cmp	r3, #0
 c0032bc:	d00a      	beq.n	c0032d4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c0032be:	4b64      	ldr	r3, [pc, #400]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0032c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c0032c8:	687b      	ldr	r3, [r7, #4]
 c0032ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0032cc:	4960      	ldr	r1, [pc, #384]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0032ce:	4313      	orrs	r3, r2
 c0032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c0032d4:	687b      	ldr	r3, [r7, #4]
 c0032d6:	681b      	ldr	r3, [r3, #0]
 c0032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0032dc:	2b00      	cmp	r3, #0
 c0032de:	d02f      	beq.n	c003340 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c0032e0:	687b      	ldr	r3, [r7, #4]
 c0032e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0032e8:	d005      	beq.n	c0032f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 c0032ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0032ee:	d009      	beq.n	c003304 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 c0032f0:	2b00      	cmp	r3, #0
 c0032f2:	d013      	beq.n	c00331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 c0032f4:	e00f      	b.n	c003316 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0032f6:	4b56      	ldr	r3, [pc, #344]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0032f8:	68db      	ldr	r3, [r3, #12]
 c0032fa:	4a55      	ldr	r2, [pc, #340]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0032fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003300:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c003302:	e00c      	b.n	c00331e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003304:	687b      	ldr	r3, [r7, #4]
 c003306:	3304      	adds	r3, #4
 c003308:	2100      	movs	r1, #0
 c00330a:	4618      	mov	r0, r3
 c00330c:	f000 f97c 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c003310:	4603      	mov	r3, r0
 c003312:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c003314:	e003      	b.n	c00331e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 c003316:	2301      	movs	r3, #1
 c003318:	77fb      	strb	r3, [r7, #31]
        break;
 c00331a:	e000      	b.n	c00331e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 c00331c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00331e:	7ffb      	ldrb	r3, [r7, #31]
 c003320:	2b00      	cmp	r3, #0
 c003322:	d10b      	bne.n	c00333c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c003324:	4b4a      	ldr	r3, [pc, #296]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00332a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c00332e:	687b      	ldr	r3, [r7, #4]
 c003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c003332:	4947      	ldr	r1, [pc, #284]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003334:	4313      	orrs	r3, r2
 c003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c00333a:	e001      	b.n	c003340 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00333c:	7ffb      	ldrb	r3, [r7, #31]
 c00333e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c003340:	687b      	ldr	r3, [r7, #4]
 c003342:	681b      	ldr	r3, [r3, #0]
 c003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003348:	2b00      	cmp	r3, #0
 c00334a:	d00a      	beq.n	c003362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c00334c:	4b40      	ldr	r3, [pc, #256]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003352:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c003356:	687b      	ldr	r3, [r7, #4]
 c003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00335a:	493d      	ldr	r1, [pc, #244]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00335c:	4313      	orrs	r3, r2
 c00335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c003362:	687b      	ldr	r3, [r7, #4]
 c003364:	681b      	ldr	r3, [r3, #0]
 c003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00336a:	2b00      	cmp	r3, #0
 c00336c:	d00a      	beq.n	c003384 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c00336e:	4b38      	ldr	r3, [pc, #224]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c003378:	687b      	ldr	r3, [r7, #4]
 c00337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00337c:	4934      	ldr	r1, [pc, #208]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00337e:	4313      	orrs	r3, r2
 c003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c003384:	687b      	ldr	r3, [r7, #4]
 c003386:	681b      	ldr	r3, [r3, #0]
 c003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00338c:	2b00      	cmp	r3, #0
 c00338e:	d00a      	beq.n	c0033a6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c003390:	4b2f      	ldr	r3, [pc, #188]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c00339a:	687b      	ldr	r3, [r7, #4]
 c00339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00339e:	492c      	ldr	r1, [pc, #176]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033a0:	4313      	orrs	r3, r2
 c0033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c0033a6:	687b      	ldr	r3, [r7, #4]
 c0033a8:	681b      	ldr	r3, [r3, #0]
 c0033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0033ae:	2b00      	cmp	r3, #0
 c0033b0:	d00a      	beq.n	c0033c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c0033b2:	4b27      	ldr	r3, [pc, #156]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0033b8:	f023 0203 	bic.w	r2, r3, #3
 c0033bc:	687b      	ldr	r3, [r7, #4]
 c0033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0033c0:	4923      	ldr	r1, [pc, #140]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033c2:	4313      	orrs	r3, r2
 c0033c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c0033c8:	687b      	ldr	r3, [r7, #4]
 c0033ca:	681b      	ldr	r3, [r3, #0]
 c0033cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c0033d0:	2b00      	cmp	r3, #0
 c0033d2:	d028      	beq.n	c003426 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c0033d4:	4b1e      	ldr	r3, [pc, #120]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0033da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0033de:	687b      	ldr	r3, [r7, #4]
 c0033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0033e2:	491b      	ldr	r1, [pc, #108]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033e4:	4313      	orrs	r3, r2
 c0033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c0033ea:	687b      	ldr	r3, [r7, #4]
 c0033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0033ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0033f2:	d106      	bne.n	c003402 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0033f4:	4b16      	ldr	r3, [pc, #88]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033f6:	68db      	ldr	r3, [r3, #12]
 c0033f8:	4a15      	ldr	r2, [pc, #84]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0033fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0033fe:	60d3      	str	r3, [r2, #12]
 c003400:	e011      	b.n	c003426 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c003402:	687b      	ldr	r3, [r7, #4]
 c003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00340a:	d10c      	bne.n	c003426 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00340c:	687b      	ldr	r3, [r7, #4]
 c00340e:	3304      	adds	r3, #4
 c003410:	2101      	movs	r1, #1
 c003412:	4618      	mov	r0, r3
 c003414:	f000 f8f8 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c003418:	4603      	mov	r3, r0
 c00341a:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c00341c:	7ffb      	ldrb	r3, [r7, #31]
 c00341e:	2b00      	cmp	r3, #0
 c003420:	d001      	beq.n	c003426 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 c003422:	7ffb      	ldrb	r3, [r7, #31]
 c003424:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c003426:	687b      	ldr	r3, [r7, #4]
 c003428:	681b      	ldr	r3, [r3, #0]
 c00342a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c00342e:	2b00      	cmp	r3, #0
 c003430:	d04d      	beq.n	c0034ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c003432:	687b      	ldr	r3, [r7, #4]
 c003434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00343a:	d10b      	bne.n	c003454 <HAL_RCCEx_PeriphCLKConfig+0x520>
 c00343c:	4b04      	ldr	r3, [pc, #16]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003442:	4a03      	ldr	r2, [pc, #12]	; (c003450 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c003448:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c00344c:	e015      	b.n	c00347a <HAL_RCCEx_PeriphCLKConfig+0x546>
 c00344e:	bf00      	nop
 c003450:	50021000 	.word	0x50021000
 c003454:	4b6b      	ldr	r3, [pc, #428]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00345a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00345e:	687b      	ldr	r3, [r7, #4]
 c003460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003462:	4968      	ldr	r1, [pc, #416]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c003464:	4313      	orrs	r3, r2
 c003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c00346a:	4b66      	ldr	r3, [pc, #408]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c00346c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003470:	4a64      	ldr	r2, [pc, #400]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c003472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c003476:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c00347a:	687b      	ldr	r3, [r7, #4]
 c00347c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00347e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c003482:	d10d      	bne.n	c0034a0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003484:	687b      	ldr	r3, [r7, #4]
 c003486:	3304      	adds	r3, #4
 c003488:	2101      	movs	r1, #1
 c00348a:	4618      	mov	r0, r3
 c00348c:	f000 f8bc 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c003490:	4603      	mov	r3, r0
 c003492:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c003494:	7ffb      	ldrb	r3, [r7, #31]
 c003496:	2b00      	cmp	r3, #0
 c003498:	d019      	beq.n	c0034ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 c00349a:	7ffb      	ldrb	r3, [r7, #31]
 c00349c:	77bb      	strb	r3, [r7, #30]
 c00349e:	e016      	b.n	c0034ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c0034a0:	687b      	ldr	r3, [r7, #4]
 c0034a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0034a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0034a8:	d106      	bne.n	c0034b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0034aa:	4b56      	ldr	r3, [pc, #344]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034ac:	68db      	ldr	r3, [r3, #12]
 c0034ae:	4a55      	ldr	r2, [pc, #340]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0034b4:	60d3      	str	r3, [r2, #12]
 c0034b6:	e00a      	b.n	c0034ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c0034b8:	687b      	ldr	r3, [r7, #4]
 c0034ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0034bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0034c0:	d105      	bne.n	c0034ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0034c2:	4b50      	ldr	r3, [pc, #320]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034c4:	68db      	ldr	r3, [r3, #12]
 c0034c6:	4a4f      	ldr	r2, [pc, #316]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0034cc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c0034ce:	687b      	ldr	r3, [r7, #4]
 c0034d0:	681b      	ldr	r3, [r3, #0]
 c0034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0034d6:	2b00      	cmp	r3, #0
 c0034d8:	d028      	beq.n	c00352c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c0034da:	4b4a      	ldr	r3, [pc, #296]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0034e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0034e4:	687b      	ldr	r3, [r7, #4]
 c0034e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0034e8:	4946      	ldr	r1, [pc, #280]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034ea:	4313      	orrs	r3, r2
 c0034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c0034f0:	687b      	ldr	r3, [r7, #4]
 c0034f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0034f8:	d106      	bne.n	c003508 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0034fa:	4b42      	ldr	r3, [pc, #264]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0034fc:	68db      	ldr	r3, [r3, #12]
 c0034fe:	4a41      	ldr	r2, [pc, #260]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c003500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003504:	60d3      	str	r3, [r2, #12]
 c003506:	e011      	b.n	c00352c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c003508:	687b      	ldr	r3, [r7, #4]
 c00350a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c00350c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c003510:	d10c      	bne.n	c00352c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003512:	687b      	ldr	r3, [r7, #4]
 c003514:	3304      	adds	r3, #4
 c003516:	2101      	movs	r1, #1
 c003518:	4618      	mov	r0, r3
 c00351a:	f000 f875 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c00351e:	4603      	mov	r3, r0
 c003520:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c003522:	7ffb      	ldrb	r3, [r7, #31]
 c003524:	2b00      	cmp	r3, #0
 c003526:	d001      	beq.n	c00352c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 c003528:	7ffb      	ldrb	r3, [r7, #31]
 c00352a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c00352c:	687b      	ldr	r3, [r7, #4]
 c00352e:	681b      	ldr	r3, [r3, #0]
 c003530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c003534:	2b00      	cmp	r3, #0
 c003536:	d01e      	beq.n	c003576 <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c003538:	4b32      	ldr	r3, [pc, #200]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c00353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00353e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c003542:	687b      	ldr	r3, [r7, #4]
 c003544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003548:	492e      	ldr	r1, [pc, #184]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c00354a:	4313      	orrs	r3, r2
 c00354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c003550:	687b      	ldr	r3, [r7, #4]
 c003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c00355a:	d10c      	bne.n	c003576 <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c00355c:	687b      	ldr	r3, [r7, #4]
 c00355e:	3304      	adds	r3, #4
 c003560:	2102      	movs	r1, #2
 c003562:	4618      	mov	r0, r3
 c003564:	f000 f850 	bl	c003608 <RCCEx_PLLSAI1_Config>
 c003568:	4603      	mov	r3, r0
 c00356a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00356c:	7ffb      	ldrb	r3, [r7, #31]
 c00356e:	2b00      	cmp	r3, #0
 c003570:	d001      	beq.n	c003576 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 c003572:	7ffb      	ldrb	r3, [r7, #31]
 c003574:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c003576:	687b      	ldr	r3, [r7, #4]
 c003578:	681b      	ldr	r3, [r3, #0]
 c00357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00357e:	2b00      	cmp	r3, #0
 c003580:	d00b      	beq.n	c00359a <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c003582:	4b20      	ldr	r3, [pc, #128]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c003584:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003588:	f023 0204 	bic.w	r2, r3, #4
 c00358c:	687b      	ldr	r3, [r7, #4]
 c00358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c003592:	491c      	ldr	r1, [pc, #112]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c003594:	4313      	orrs	r3, r2
 c003596:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c00359a:	687b      	ldr	r3, [r7, #4]
 c00359c:	681b      	ldr	r3, [r3, #0]
 c00359e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0035a2:	2b00      	cmp	r3, #0
 c0035a4:	d00b      	beq.n	c0035be <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c0035a6:	4b17      	ldr	r3, [pc, #92]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0035a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0035ac:	f023 0218 	bic.w	r2, r3, #24
 c0035b0:	687b      	ldr	r3, [r7, #4]
 c0035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0035b6:	4913      	ldr	r1, [pc, #76]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0035b8:	4313      	orrs	r3, r2
 c0035ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c0035be:	687b      	ldr	r3, [r7, #4]
 c0035c0:	681b      	ldr	r3, [r3, #0]
 c0035c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c0035c6:	2b00      	cmp	r3, #0
 c0035c8:	d017      	beq.n	c0035fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c0035ca:	4b0e      	ldr	r3, [pc, #56]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0035cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0035d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0035d4:	687b      	ldr	r3, [r7, #4]
 c0035d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0035da:	490a      	ldr	r1, [pc, #40]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0035dc:	4313      	orrs	r3, r2
 c0035de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c0035e2:	687b      	ldr	r3, [r7, #4]
 c0035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0035e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c0035ec:	d105      	bne.n	c0035fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0035ee:	4b05      	ldr	r3, [pc, #20]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0035f0:	68db      	ldr	r3, [r3, #12]
 c0035f2:	4a04      	ldr	r2, [pc, #16]	; (c003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 c0035f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0035f8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c0035fa:	7fbb      	ldrb	r3, [r7, #30]
}
 c0035fc:	4618      	mov	r0, r3
 c0035fe:	3720      	adds	r7, #32
 c003600:	46bd      	mov	sp, r7
 c003602:	bd80      	pop	{r7, pc}
 c003604:	50021000 	.word	0x50021000

0c003608 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c003608:	b580      	push	{r7, lr}
 c00360a:	b084      	sub	sp, #16
 c00360c:	af00      	add	r7, sp, #0
 c00360e:	6078      	str	r0, [r7, #4]
 c003610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c003612:	2300      	movs	r3, #0
 c003614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c003616:	687b      	ldr	r3, [r7, #4]
 c003618:	681b      	ldr	r3, [r3, #0]
 c00361a:	2b02      	cmp	r3, #2
 c00361c:	d00c      	beq.n	c003638 <RCCEx_PLLSAI1_Config+0x30>
 c00361e:	2b03      	cmp	r3, #3
 c003620:	d013      	beq.n	c00364a <RCCEx_PLLSAI1_Config+0x42>
 c003622:	2b01      	cmp	r3, #1
 c003624:	d11a      	bne.n	c00365c <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003626:	4b5d      	ldr	r3, [pc, #372]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003628:	681b      	ldr	r3, [r3, #0]
 c00362a:	f003 0302 	and.w	r3, r3, #2
 c00362e:	2b00      	cmp	r3, #0
 c003630:	d117      	bne.n	c003662 <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 c003632:	2301      	movs	r3, #1
 c003634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003636:	e014      	b.n	c003662 <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003638:	4b58      	ldr	r3, [pc, #352]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00363a:	681b      	ldr	r3, [r3, #0]
 c00363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003640:	2b00      	cmp	r3, #0
 c003642:	d110      	bne.n	c003666 <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 c003644:	2301      	movs	r3, #1
 c003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003648:	e00d      	b.n	c003666 <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c00364a:	4b54      	ldr	r3, [pc, #336]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00364c:	681b      	ldr	r3, [r3, #0]
 c00364e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c003652:	2b00      	cmp	r3, #0
 c003654:	d109      	bne.n	c00366a <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 c003656:	2301      	movs	r3, #1
 c003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c00365a:	e006      	b.n	c00366a <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 c00365c:	2301      	movs	r3, #1
 c00365e:	73fb      	strb	r3, [r7, #15]
      break;
 c003660:	e004      	b.n	c00366c <RCCEx_PLLSAI1_Config+0x64>
      break;
 c003662:	bf00      	nop
 c003664:	e002      	b.n	c00366c <RCCEx_PLLSAI1_Config+0x64>
      break;
 c003666:	bf00      	nop
 c003668:	e000      	b.n	c00366c <RCCEx_PLLSAI1_Config+0x64>
      break;
 c00366a:	bf00      	nop
  }

  if (status == HAL_OK)
 c00366c:	7bfb      	ldrb	r3, [r7, #15]
 c00366e:	2b00      	cmp	r3, #0
 c003670:	f040 808f 	bne.w	c003792 <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c003674:	4b49      	ldr	r3, [pc, #292]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003676:	681b      	ldr	r3, [r3, #0]
 c003678:	4a48      	ldr	r2, [pc, #288]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00367a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c00367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003680:	f7fd ff2c 	bl	c0014dc <HAL_GetTick>
 c003684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003686:	e009      	b.n	c00369c <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c003688:	f7fd ff28 	bl	c0014dc <HAL_GetTick>
 c00368c:	4602      	mov	r2, r0
 c00368e:	68bb      	ldr	r3, [r7, #8]
 c003690:	1ad3      	subs	r3, r2, r3
 c003692:	2b02      	cmp	r3, #2
 c003694:	d902      	bls.n	c00369c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 c003696:	2303      	movs	r3, #3
 c003698:	73fb      	strb	r3, [r7, #15]
        break;
 c00369a:	e005      	b.n	c0036a8 <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00369c:	4b3f      	ldr	r3, [pc, #252]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00369e:	681b      	ldr	r3, [r3, #0]
 c0036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0036a4:	2b00      	cmp	r3, #0
 c0036a6:	d1ef      	bne.n	c003688 <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 c0036a8:	7bfb      	ldrb	r3, [r7, #15]
 c0036aa:	2b00      	cmp	r3, #0
 c0036ac:	d171      	bne.n	c003792 <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c0036ae:	683b      	ldr	r3, [r7, #0]
 c0036b0:	2b00      	cmp	r3, #0
 c0036b2:	d116      	bne.n	c0036e2 <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0036b4:	4b39      	ldr	r3, [pc, #228]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c0036b6:	691a      	ldr	r2, [r3, #16]
 c0036b8:	4b39      	ldr	r3, [pc, #228]	; (c0037a0 <RCCEx_PLLSAI1_Config+0x198>)
 c0036ba:	4013      	ands	r3, r2
 c0036bc:	687a      	ldr	r2, [r7, #4]
 c0036be:	6892      	ldr	r2, [r2, #8]
 c0036c0:	0211      	lsls	r1, r2, #8
 c0036c2:	687a      	ldr	r2, [r7, #4]
 c0036c4:	68d2      	ldr	r2, [r2, #12]
 c0036c6:	06d2      	lsls	r2, r2, #27
 c0036c8:	4311      	orrs	r1, r2
 c0036ca:	687a      	ldr	r2, [r7, #4]
 c0036cc:	6852      	ldr	r2, [r2, #4]
 c0036ce:	3a01      	subs	r2, #1
 c0036d0:	0112      	lsls	r2, r2, #4
 c0036d2:	4311      	orrs	r1, r2
 c0036d4:	687a      	ldr	r2, [r7, #4]
 c0036d6:	6812      	ldr	r2, [r2, #0]
 c0036d8:	430a      	orrs	r2, r1
 c0036da:	4930      	ldr	r1, [pc, #192]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c0036dc:	4313      	orrs	r3, r2
 c0036de:	610b      	str	r3, [r1, #16]
 c0036e0:	e033      	b.n	c00374a <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c0036e2:	683b      	ldr	r3, [r7, #0]
 c0036e4:	2b01      	cmp	r3, #1
 c0036e6:	d118      	bne.n	c00371a <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0036e8:	4b2c      	ldr	r3, [pc, #176]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c0036ea:	691a      	ldr	r2, [r3, #16]
 c0036ec:	4b2d      	ldr	r3, [pc, #180]	; (c0037a4 <RCCEx_PLLSAI1_Config+0x19c>)
 c0036ee:	4013      	ands	r3, r2
 c0036f0:	687a      	ldr	r2, [r7, #4]
 c0036f2:	6892      	ldr	r2, [r2, #8]
 c0036f4:	0211      	lsls	r1, r2, #8
 c0036f6:	687a      	ldr	r2, [r7, #4]
 c0036f8:	6912      	ldr	r2, [r2, #16]
 c0036fa:	0852      	lsrs	r2, r2, #1
 c0036fc:	3a01      	subs	r2, #1
 c0036fe:	0552      	lsls	r2, r2, #21
 c003700:	4311      	orrs	r1, r2
 c003702:	687a      	ldr	r2, [r7, #4]
 c003704:	6852      	ldr	r2, [r2, #4]
 c003706:	3a01      	subs	r2, #1
 c003708:	0112      	lsls	r2, r2, #4
 c00370a:	4311      	orrs	r1, r2
 c00370c:	687a      	ldr	r2, [r7, #4]
 c00370e:	6812      	ldr	r2, [r2, #0]
 c003710:	430a      	orrs	r2, r1
 c003712:	4922      	ldr	r1, [pc, #136]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003714:	4313      	orrs	r3, r2
 c003716:	610b      	str	r3, [r1, #16]
 c003718:	e017      	b.n	c00374a <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00371a:	4b20      	ldr	r3, [pc, #128]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00371c:	691a      	ldr	r2, [r3, #16]
 c00371e:	4b22      	ldr	r3, [pc, #136]	; (c0037a8 <RCCEx_PLLSAI1_Config+0x1a0>)
 c003720:	4013      	ands	r3, r2
 c003722:	687a      	ldr	r2, [r7, #4]
 c003724:	6892      	ldr	r2, [r2, #8]
 c003726:	0211      	lsls	r1, r2, #8
 c003728:	687a      	ldr	r2, [r7, #4]
 c00372a:	6952      	ldr	r2, [r2, #20]
 c00372c:	0852      	lsrs	r2, r2, #1
 c00372e:	3a01      	subs	r2, #1
 c003730:	0652      	lsls	r2, r2, #25
 c003732:	4311      	orrs	r1, r2
 c003734:	687a      	ldr	r2, [r7, #4]
 c003736:	6852      	ldr	r2, [r2, #4]
 c003738:	3a01      	subs	r2, #1
 c00373a:	0112      	lsls	r2, r2, #4
 c00373c:	4311      	orrs	r1, r2
 c00373e:	687a      	ldr	r2, [r7, #4]
 c003740:	6812      	ldr	r2, [r2, #0]
 c003742:	430a      	orrs	r2, r1
 c003744:	4915      	ldr	r1, [pc, #84]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003746:	4313      	orrs	r3, r2
 c003748:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c00374a:	4b14      	ldr	r3, [pc, #80]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00374c:	681b      	ldr	r3, [r3, #0]
 c00374e:	4a13      	ldr	r2, [pc, #76]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c003754:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003756:	f7fd fec1 	bl	c0014dc <HAL_GetTick>
 c00375a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00375c:	e009      	b.n	c003772 <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c00375e:	f7fd febd 	bl	c0014dc <HAL_GetTick>
 c003762:	4602      	mov	r2, r0
 c003764:	68bb      	ldr	r3, [r7, #8]
 c003766:	1ad3      	subs	r3, r2, r3
 c003768:	2b02      	cmp	r3, #2
 c00376a:	d902      	bls.n	c003772 <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 c00376c:	2303      	movs	r3, #3
 c00376e:	73fb      	strb	r3, [r7, #15]
          break;
 c003770:	e005      	b.n	c00377e <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003772:	4b0a      	ldr	r3, [pc, #40]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003774:	681b      	ldr	r3, [r3, #0]
 c003776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00377a:	2b00      	cmp	r3, #0
 c00377c:	d0ef      	beq.n	c00375e <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 c00377e:	7bfb      	ldrb	r3, [r7, #15]
 c003780:	2b00      	cmp	r3, #0
 c003782:	d106      	bne.n	c003792 <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c003784:	4b05      	ldr	r3, [pc, #20]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c003786:	691a      	ldr	r2, [r3, #16]
 c003788:	687b      	ldr	r3, [r7, #4]
 c00378a:	699b      	ldr	r3, [r3, #24]
 c00378c:	4903      	ldr	r1, [pc, #12]	; (c00379c <RCCEx_PLLSAI1_Config+0x194>)
 c00378e:	4313      	orrs	r3, r2
 c003790:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c003792:	7bfb      	ldrb	r3, [r7, #15]
}
 c003794:	4618      	mov	r0, r3
 c003796:	3710      	adds	r7, #16
 c003798:	46bd      	mov	sp, r7
 c00379a:	bd80      	pop	{r7, pc}
 c00379c:	50021000 	.word	0x50021000
 c0037a0:	07ff800c 	.word	0x07ff800c
 c0037a4:	ff9f800c 	.word	0xff9f800c
 c0037a8:	f9ff800c 	.word	0xf9ff800c

0c0037ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c0037ac:	b580      	push	{r7, lr}
 c0037ae:	b084      	sub	sp, #16
 c0037b0:	af00      	add	r7, sp, #0
 c0037b2:	6078      	str	r0, [r7, #4]
 c0037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0037b6:	2300      	movs	r3, #0
 c0037b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c0037ba:	687b      	ldr	r3, [r7, #4]
 c0037bc:	681b      	ldr	r3, [r3, #0]
 c0037be:	2b02      	cmp	r3, #2
 c0037c0:	d00c      	beq.n	c0037dc <RCCEx_PLLSAI2_Config+0x30>
 c0037c2:	2b03      	cmp	r3, #3
 c0037c4:	d013      	beq.n	c0037ee <RCCEx_PLLSAI2_Config+0x42>
 c0037c6:	2b01      	cmp	r3, #1
 c0037c8:	d11a      	bne.n	c003800 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0037ca:	4b42      	ldr	r3, [pc, #264]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c0037cc:	681b      	ldr	r3, [r3, #0]
 c0037ce:	f003 0302 	and.w	r3, r3, #2
 c0037d2:	2b00      	cmp	r3, #0
 c0037d4:	d117      	bne.n	c003806 <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 c0037d6:	2301      	movs	r3, #1
 c0037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0037da:	e014      	b.n	c003806 <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0037dc:	4b3d      	ldr	r3, [pc, #244]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c0037de:	681b      	ldr	r3, [r3, #0]
 c0037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0037e4:	2b00      	cmp	r3, #0
 c0037e6:	d110      	bne.n	c00380a <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 c0037e8:	2301      	movs	r3, #1
 c0037ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0037ec:	e00d      	b.n	c00380a <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0037ee:	4b39      	ldr	r3, [pc, #228]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c0037f0:	681b      	ldr	r3, [r3, #0]
 c0037f2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0037f6:	2b00      	cmp	r3, #0
 c0037f8:	d109      	bne.n	c00380e <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 c0037fa:	2301      	movs	r3, #1
 c0037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0037fe:	e006      	b.n	c00380e <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 c003800:	2301      	movs	r3, #1
 c003802:	73fb      	strb	r3, [r7, #15]
      break;
 c003804:	e004      	b.n	c003810 <RCCEx_PLLSAI2_Config+0x64>
      break;
 c003806:	bf00      	nop
 c003808:	e002      	b.n	c003810 <RCCEx_PLLSAI2_Config+0x64>
      break;
 c00380a:	bf00      	nop
 c00380c:	e000      	b.n	c003810 <RCCEx_PLLSAI2_Config+0x64>
      break;
 c00380e:	bf00      	nop
  }

  if (status == HAL_OK)
 c003810:	7bfb      	ldrb	r3, [r7, #15]
 c003812:	2b00      	cmp	r3, #0
 c003814:	d159      	bne.n	c0038ca <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c003816:	4b2f      	ldr	r3, [pc, #188]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c003818:	681b      	ldr	r3, [r3, #0]
 c00381a:	4a2e      	ldr	r2, [pc, #184]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c00381c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003822:	f7fd fe5b 	bl	c0014dc <HAL_GetTick>
 c003826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003828:	e009      	b.n	c00383e <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c00382a:	f7fd fe57 	bl	c0014dc <HAL_GetTick>
 c00382e:	4602      	mov	r2, r0
 c003830:	68bb      	ldr	r3, [r7, #8]
 c003832:	1ad3      	subs	r3, r2, r3
 c003834:	2b02      	cmp	r3, #2
 c003836:	d902      	bls.n	c00383e <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 c003838:	2303      	movs	r3, #3
 c00383a:	73fb      	strb	r3, [r7, #15]
        break;
 c00383c:	e005      	b.n	c00384a <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c00383e:	4b25      	ldr	r3, [pc, #148]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c003840:	681b      	ldr	r3, [r3, #0]
 c003842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003846:	2b00      	cmp	r3, #0
 c003848:	d1ef      	bne.n	c00382a <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 c00384a:	7bfb      	ldrb	r3, [r7, #15]
 c00384c:	2b00      	cmp	r3, #0
 c00384e:	d13c      	bne.n	c0038ca <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c003850:	683b      	ldr	r3, [r7, #0]
 c003852:	2b00      	cmp	r3, #0
 c003854:	d115      	bne.n	c003882 <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c003856:	4b1f      	ldr	r3, [pc, #124]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c003858:	695a      	ldr	r2, [r3, #20]
 c00385a:	4b1f      	ldr	r3, [pc, #124]	; (c0038d8 <RCCEx_PLLSAI2_Config+0x12c>)
 c00385c:	4013      	ands	r3, r2
 c00385e:	687a      	ldr	r2, [r7, #4]
 c003860:	6892      	ldr	r2, [r2, #8]
 c003862:	0211      	lsls	r1, r2, #8
 c003864:	687a      	ldr	r2, [r7, #4]
 c003866:	68d2      	ldr	r2, [r2, #12]
 c003868:	06d2      	lsls	r2, r2, #27
 c00386a:	4311      	orrs	r1, r2
 c00386c:	687a      	ldr	r2, [r7, #4]
 c00386e:	6852      	ldr	r2, [r2, #4]
 c003870:	3a01      	subs	r2, #1
 c003872:	0112      	lsls	r2, r2, #4
 c003874:	4311      	orrs	r1, r2
 c003876:	687a      	ldr	r2, [r7, #4]
 c003878:	6812      	ldr	r2, [r2, #0]
 c00387a:	430a      	orrs	r2, r1
 c00387c:	4915      	ldr	r1, [pc, #84]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c00387e:	4313      	orrs	r3, r2
 c003880:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c003882:	4b14      	ldr	r3, [pc, #80]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c003884:	681b      	ldr	r3, [r3, #0]
 c003886:	4a13      	ldr	r2, [pc, #76]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00388c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00388e:	f7fd fe25 	bl	c0014dc <HAL_GetTick>
 c003892:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c003894:	e009      	b.n	c0038aa <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c003896:	f7fd fe21 	bl	c0014dc <HAL_GetTick>
 c00389a:	4602      	mov	r2, r0
 c00389c:	68bb      	ldr	r3, [r7, #8]
 c00389e:	1ad3      	subs	r3, r2, r3
 c0038a0:	2b02      	cmp	r3, #2
 c0038a2:	d902      	bls.n	c0038aa <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 c0038a4:	2303      	movs	r3, #3
 c0038a6:	73fb      	strb	r3, [r7, #15]
          break;
 c0038a8:	e005      	b.n	c0038b6 <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0038aa:	4b0a      	ldr	r3, [pc, #40]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c0038ac:	681b      	ldr	r3, [r3, #0]
 c0038ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0038b2:	2b00      	cmp	r3, #0
 c0038b4:	d0ef      	beq.n	c003896 <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 c0038b6:	7bfb      	ldrb	r3, [r7, #15]
 c0038b8:	2b00      	cmp	r3, #0
 c0038ba:	d106      	bne.n	c0038ca <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c0038bc:	4b05      	ldr	r3, [pc, #20]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c0038be:	695a      	ldr	r2, [r3, #20]
 c0038c0:	687b      	ldr	r3, [r7, #4]
 c0038c2:	691b      	ldr	r3, [r3, #16]
 c0038c4:	4903      	ldr	r1, [pc, #12]	; (c0038d4 <RCCEx_PLLSAI2_Config+0x128>)
 c0038c6:	4313      	orrs	r3, r2
 c0038c8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c0038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 c0038cc:	4618      	mov	r0, r3
 c0038ce:	3710      	adds	r7, #16
 c0038d0:	46bd      	mov	sp, r7
 c0038d2:	bd80      	pop	{r7, pc}
 c0038d4:	50021000 	.word	0x50021000
 c0038d8:	07ff800c 	.word	0x07ff800c

0c0038dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 c0038dc:	b580      	push	{r7, lr}
 c0038de:	b084      	sub	sp, #16
 c0038e0:	af00      	add	r7, sp, #0
 c0038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 c0038e4:	687b      	ldr	r3, [r7, #4]
 c0038e6:	2b00      	cmp	r3, #0
 c0038e8:	d101      	bne.n	c0038ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 c0038ea:	2301      	movs	r3, #1
 c0038ec:	e07c      	b.n	c0039e8 <HAL_RNG_Init+0x10c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 c0038ee:	687b      	ldr	r3, [r7, #4]
 c0038f0:	7a5b      	ldrb	r3, [r3, #9]
 c0038f2:	b2db      	uxtb	r3, r3
 c0038f4:	2b00      	cmp	r3, #0
 c0038f6:	d105      	bne.n	c003904 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 c0038f8:	687b      	ldr	r3, [r7, #4]
 c0038fa:	2200      	movs	r2, #0
 c0038fc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 c0038fe:	6878      	ldr	r0, [r7, #4]
 c003900:	f7fd faf8 	bl	c000ef4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 c003904:	687b      	ldr	r3, [r7, #4]
 c003906:	2202      	movs	r2, #2
 c003908:	725a      	strb	r2, [r3, #9]


  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 c00390a:	687b      	ldr	r3, [r7, #4]
 c00390c:	681b      	ldr	r3, [r3, #0]
 c00390e:	681a      	ldr	r2, [r3, #0]
 c003910:	687b      	ldr	r3, [r7, #4]
 c003912:	681b      	ldr	r3, [r3, #0]
 c003914:	f022 0204 	bic.w	r2, r2, #4
 c003918:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 c00391a:	687b      	ldr	r3, [r7, #4]
 c00391c:	681b      	ldr	r3, [r3, #0]
 c00391e:	681b      	ldr	r3, [r3, #0]
 c003920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 c003924:	f023 0320 	bic.w	r3, r3, #32
 c003928:	687a      	ldr	r2, [r7, #4]
 c00392a:	6852      	ldr	r2, [r2, #4]
 c00392c:	431a      	orrs	r2, r3
 c00392e:	687b      	ldr	r3, [r7, #4]
 c003930:	681b      	ldr	r3, [r3, #0]
 c003932:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 c003936:	601a      	str	r2, [r3, #0]

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c003938:	687b      	ldr	r3, [r7, #4]
 c00393a:	681b      	ldr	r3, [r3, #0]
 c00393c:	681a      	ldr	r2, [r3, #0]
 c00393e:	687b      	ldr	r3, [r7, #4]
 c003940:	681b      	ldr	r3, [r3, #0]
 c003942:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 c003946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 c003948:	f7fd fdc8 	bl	c0014dc <HAL_GetTick>
 c00394c:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c00394e:	e00e      	b.n	c00396e <HAL_RNG_Init+0x92>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 c003950:	f7fd fdc4 	bl	c0014dc <HAL_GetTick>
 c003954:	4602      	mov	r2, r0
 c003956:	68fb      	ldr	r3, [r7, #12]
 c003958:	1ad3      	subs	r3, r2, r3
 c00395a:	2b02      	cmp	r3, #2
 c00395c:	d907      	bls.n	c00396e <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_READY;
 c00395e:	687b      	ldr	r3, [r7, #4]
 c003960:	2201      	movs	r2, #1
 c003962:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c003964:	687b      	ldr	r3, [r7, #4]
 c003966:	2202      	movs	r2, #2
 c003968:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 c00396a:	2301      	movs	r3, #1
 c00396c:	e03c      	b.n	c0039e8 <HAL_RNG_Init+0x10c>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c00396e:	687b      	ldr	r3, [r7, #4]
 c003970:	681b      	ldr	r3, [r3, #0]
 c003972:	681b      	ldr	r3, [r3, #0]
 c003974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 c003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c00397c:	d0e8      	beq.n	c003950 <HAL_RNG_Init+0x74>
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 c00397e:	687b      	ldr	r3, [r7, #4]
 c003980:	681b      	ldr	r3, [r3, #0]
 c003982:	681a      	ldr	r2, [r3, #0]
 c003984:	687b      	ldr	r3, [r7, #4]
 c003986:	681b      	ldr	r3, [r3, #0]
 c003988:	f042 0204 	orr.w	r2, r2, #4
 c00398c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c00398e:	687b      	ldr	r3, [r7, #4]
 c003990:	681b      	ldr	r3, [r3, #0]
 c003992:	685b      	ldr	r3, [r3, #4]
 c003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003998:	2b40      	cmp	r3, #64	; 0x40
 c00399a:	d104      	bne.n	c0039a6 <HAL_RNG_Init+0xca>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 c00399c:	687b      	ldr	r3, [r7, #4]
 c00399e:	2204      	movs	r2, #4
 c0039a0:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 c0039a2:	2301      	movs	r3, #1
 c0039a4:	e020      	b.n	c0039e8 <HAL_RNG_Init+0x10c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 c0039a6:	f7fd fd99 	bl	c0014dc <HAL_GetTick>
 c0039aa:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 c0039ac:	e00e      	b.n	c0039cc <HAL_RNG_Init+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c0039ae:	f7fd fd95 	bl	c0014dc <HAL_GetTick>
 c0039b2:	4602      	mov	r2, r0
 c0039b4:	68fb      	ldr	r3, [r7, #12]
 c0039b6:	1ad3      	subs	r3, r2, r3
 c0039b8:	2b02      	cmp	r3, #2
 c0039ba:	d907      	bls.n	c0039cc <HAL_RNG_Init+0xf0>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 c0039bc:	687b      	ldr	r3, [r7, #4]
 c0039be:	2204      	movs	r2, #4
 c0039c0:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c0039c2:	687b      	ldr	r3, [r7, #4]
 c0039c4:	2202      	movs	r2, #2
 c0039c6:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 c0039c8:	2301      	movs	r3, #1
 c0039ca:	e00d      	b.n	c0039e8 <HAL_RNG_Init+0x10c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 c0039cc:	687b      	ldr	r3, [r7, #4]
 c0039ce:	681b      	ldr	r3, [r3, #0]
 c0039d0:	685b      	ldr	r3, [r3, #4]
 c0039d2:	f003 0304 	and.w	r3, r3, #4
 c0039d6:	2b04      	cmp	r3, #4
 c0039d8:	d0e9      	beq.n	c0039ae <HAL_RNG_Init+0xd2>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 c0039da:	687b      	ldr	r3, [r7, #4]
 c0039dc:	2201      	movs	r2, #1
 c0039de:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 c0039e0:	687b      	ldr	r3, [r7, #4]
 c0039e2:	2200      	movs	r2, #0
 c0039e4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 c0039e6:	2300      	movs	r3, #0
}
 c0039e8:	4618      	mov	r0, r3
 c0039ea:	3710      	adds	r7, #16
 c0039ec:	46bd      	mov	sp, r7
 c0039ee:	bd80      	pop	{r7, pc}

0c0039f0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 c0039f0:	b580      	push	{r7, lr}
 c0039f2:	b084      	sub	sp, #16
 c0039f4:	af00      	add	r7, sp, #0
 c0039f6:	6078      	str	r0, [r7, #4]
 c0039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 c0039fa:	2300      	movs	r3, #0
 c0039fc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 c0039fe:	687b      	ldr	r3, [r7, #4]
 c003a00:	7a1b      	ldrb	r3, [r3, #8]
 c003a02:	2b01      	cmp	r3, #1
 c003a04:	d101      	bne.n	c003a0a <HAL_RNG_GenerateRandomNumber+0x1a>
 c003a06:	2302      	movs	r3, #2
 c003a08:	e03d      	b.n	c003a86 <HAL_RNG_GenerateRandomNumber+0x96>
 c003a0a:	687b      	ldr	r3, [r7, #4]
 c003a0c:	2201      	movs	r2, #1
 c003a0e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 c003a10:	687b      	ldr	r3, [r7, #4]
 c003a12:	7a5b      	ldrb	r3, [r3, #9]
 c003a14:	b2db      	uxtb	r3, r3
 c003a16:	2b01      	cmp	r3, #1
 c003a18:	d12c      	bne.n	c003a74 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 c003a1a:	687b      	ldr	r3, [r7, #4]
 c003a1c:	2202      	movs	r2, #2
 c003a1e:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 c003a20:	f7fd fd5c 	bl	c0014dc <HAL_GetTick>
 c003a24:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 c003a26:	e011      	b.n	c003a4c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c003a28:	f7fd fd58 	bl	c0014dc <HAL_GetTick>
 c003a2c:	4602      	mov	r2, r0
 c003a2e:	68bb      	ldr	r3, [r7, #8]
 c003a30:	1ad3      	subs	r3, r2, r3
 c003a32:	2b02      	cmp	r3, #2
 c003a34:	d90a      	bls.n	c003a4c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 c003a36:	687b      	ldr	r3, [r7, #4]
 c003a38:	2201      	movs	r2, #1
 c003a3a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c003a3c:	687b      	ldr	r3, [r7, #4]
 c003a3e:	2202      	movs	r2, #2
 c003a40:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 c003a42:	687b      	ldr	r3, [r7, #4]
 c003a44:	2200      	movs	r2, #0
 c003a46:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 c003a48:	2301      	movs	r3, #1
 c003a4a:	e01c      	b.n	c003a86 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 c003a4c:	687b      	ldr	r3, [r7, #4]
 c003a4e:	681b      	ldr	r3, [r3, #0]
 c003a50:	685b      	ldr	r3, [r3, #4]
 c003a52:	f003 0301 	and.w	r3, r3, #1
 c003a56:	2b01      	cmp	r3, #1
 c003a58:	d1e6      	bne.n	c003a28 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 c003a5a:	687b      	ldr	r3, [r7, #4]
 c003a5c:	681b      	ldr	r3, [r3, #0]
 c003a5e:	689a      	ldr	r2, [r3, #8]
 c003a60:	687b      	ldr	r3, [r7, #4]
 c003a62:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 c003a64:	687b      	ldr	r3, [r7, #4]
 c003a66:	691a      	ldr	r2, [r3, #16]
 c003a68:	683b      	ldr	r3, [r7, #0]
 c003a6a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 c003a6c:	687b      	ldr	r3, [r7, #4]
 c003a6e:	2201      	movs	r2, #1
 c003a70:	725a      	strb	r2, [r3, #9]
 c003a72:	e004      	b.n	c003a7e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 c003a74:	687b      	ldr	r3, [r7, #4]
 c003a76:	2204      	movs	r2, #4
 c003a78:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 c003a7a:	2301      	movs	r3, #1
 c003a7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 c003a7e:	687b      	ldr	r3, [r7, #4]
 c003a80:	2200      	movs	r2, #0
 c003a82:	721a      	strb	r2, [r3, #8]

  return status;
 c003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 c003a86:	4618      	mov	r0, r3
 c003a88:	3710      	adds	r7, #16
 c003a8a:	46bd      	mov	sp, r7
 c003a8c:	bd80      	pop	{r7, pc}
	...

0c003a90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 c003a90:	b580      	push	{r7, lr}
 c003a92:	b084      	sub	sp, #16
 c003a94:	af00      	add	r7, sp, #0
 c003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 c003a98:	2301      	movs	r3, #1
 c003a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 c003a9c:	687b      	ldr	r3, [r7, #4]
 c003a9e:	2b00      	cmp	r3, #0
 c003aa0:	d05c      	beq.n	c003b5c <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 c003aa2:	687b      	ldr	r3, [r7, #4]
 c003aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c003aa8:	b2db      	uxtb	r3, r3
 c003aaa:	2b00      	cmp	r3, #0
 c003aac:	d106      	bne.n	c003abc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 c003aae:	687b      	ldr	r3, [r7, #4]
 c003ab0:	2200      	movs	r2, #0
 c003ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 c003ab6:	6878      	ldr	r0, [r7, #4]
 c003ab8:	f7fd fa58 	bl	c000f6c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 c003abc:	687b      	ldr	r3, [r7, #4]
 c003abe:	2202      	movs	r2, #2
 c003ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 c003ac4:	4b28      	ldr	r3, [pc, #160]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003ac6:	22ca      	movs	r2, #202	; 0xca
 c003ac8:	625a      	str	r2, [r3, #36]	; 0x24
 c003aca:	4b27      	ldr	r3, [pc, #156]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003acc:	2253      	movs	r2, #83	; 0x53
 c003ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 c003ad0:	6878      	ldr	r0, [r7, #4]
 c003ad2:	f000 f871 	bl	c003bb8 <RTC_EnterInitMode>
 c003ad6:	4603      	mov	r3, r0
 c003ad8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 c003ada:	7bfb      	ldrb	r3, [r7, #15]
 c003adc:	2b00      	cmp	r3, #0
 c003ade:	d133      	bne.n	c003b48 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 c003ae0:	4b21      	ldr	r3, [pc, #132]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003ae2:	699b      	ldr	r3, [r3, #24]
 c003ae4:	4a20      	ldr	r2, [pc, #128]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003ae6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 c003aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 c003aee:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 c003af0:	4b1d      	ldr	r3, [pc, #116]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003af2:	699a      	ldr	r2, [r3, #24]
 c003af4:	687b      	ldr	r3, [r7, #4]
 c003af6:	6859      	ldr	r1, [r3, #4]
 c003af8:	687b      	ldr	r3, [r7, #4]
 c003afa:	691b      	ldr	r3, [r3, #16]
 c003afc:	4319      	orrs	r1, r3
 c003afe:	687b      	ldr	r3, [r7, #4]
 c003b00:	699b      	ldr	r3, [r3, #24]
 c003b02:	430b      	orrs	r3, r1
 c003b04:	4918      	ldr	r1, [pc, #96]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003b06:	4313      	orrs	r3, r2
 c003b08:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 c003b0a:	687b      	ldr	r3, [r7, #4]
 c003b0c:	68da      	ldr	r2, [r3, #12]
 c003b0e:	687b      	ldr	r3, [r7, #4]
 c003b10:	689b      	ldr	r3, [r3, #8]
 c003b12:	041b      	lsls	r3, r3, #16
 c003b14:	4914      	ldr	r1, [pc, #80]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003b16:	4313      	orrs	r3, r2
 c003b18:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 c003b1a:	6878      	ldr	r0, [r7, #4]
 c003b1c:	f000 f880 	bl	c003c20 <RTC_ExitInitMode>
 c003b20:	4603      	mov	r3, r0
 c003b22:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 c003b24:	7bfb      	ldrb	r3, [r7, #15]
 c003b26:	2b00      	cmp	r3, #0
 c003b28:	d10e      	bne.n	c003b48 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 c003b2a:	4b0f      	ldr	r3, [pc, #60]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003b2c:	699b      	ldr	r3, [r3, #24]
 c003b2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 c003b32:	687b      	ldr	r3, [r7, #4]
 c003b34:	6a19      	ldr	r1, [r3, #32]
 c003b36:	687b      	ldr	r3, [r7, #4]
 c003b38:	69db      	ldr	r3, [r3, #28]
 c003b3a:	4319      	orrs	r1, r3
 c003b3c:	687b      	ldr	r3, [r7, #4]
 c003b3e:	695b      	ldr	r3, [r3, #20]
 c003b40:	430b      	orrs	r3, r1
 c003b42:	4909      	ldr	r1, [pc, #36]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003b44:	4313      	orrs	r3, r2
 c003b46:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 c003b48:	4b07      	ldr	r3, [pc, #28]	; (c003b68 <HAL_RTC_Init+0xd8>)
 c003b4a:	22ff      	movs	r2, #255	; 0xff
 c003b4c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 c003b4e:	7bfb      	ldrb	r3, [r7, #15]
 c003b50:	2b00      	cmp	r3, #0
 c003b52:	d103      	bne.n	c003b5c <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 c003b54:	687b      	ldr	r3, [r7, #4]
 c003b56:	2201      	movs	r2, #1
 c003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 c003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 c003b5e:	4618      	mov	r0, r3
 c003b60:	3710      	adds	r7, #16
 c003b62:	46bd      	mov	sp, r7
 c003b64:	bd80      	pop	{r7, pc}
 c003b66:	bf00      	nop
 c003b68:	50002800 	.word	0x50002800

0c003b6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 c003b6c:	b580      	push	{r7, lr}
 c003b6e:	b084      	sub	sp, #16
 c003b70:	af00      	add	r7, sp, #0
 c003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 c003b74:	4b0f      	ldr	r3, [pc, #60]	; (c003bb4 <HAL_RTC_WaitForSynchro+0x48>)
 c003b76:	68db      	ldr	r3, [r3, #12]
 c003b78:	4a0e      	ldr	r2, [pc, #56]	; (c003bb4 <HAL_RTC_WaitForSynchro+0x48>)
 c003b7a:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 c003b7e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 c003b80:	f7fd fcac 	bl	c0014dc <HAL_GetTick>
 c003b84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 c003b86:	e009      	b.n	c003b9c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 c003b88:	f7fd fca8 	bl	c0014dc <HAL_GetTick>
 c003b8c:	4602      	mov	r2, r0
 c003b8e:	68fb      	ldr	r3, [r7, #12]
 c003b90:	1ad3      	subs	r3, r2, r3
 c003b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 c003b96:	d901      	bls.n	c003b9c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 c003b98:	2303      	movs	r3, #3
 c003b9a:	e006      	b.n	c003baa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 c003b9c:	4b05      	ldr	r3, [pc, #20]	; (c003bb4 <HAL_RTC_WaitForSynchro+0x48>)
 c003b9e:	68db      	ldr	r3, [r3, #12]
 c003ba0:	f003 0320 	and.w	r3, r3, #32
 c003ba4:	2b00      	cmp	r3, #0
 c003ba6:	d0ef      	beq.n	c003b88 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 c003ba8:	2300      	movs	r3, #0
}
 c003baa:	4618      	mov	r0, r3
 c003bac:	3710      	adds	r7, #16
 c003bae:	46bd      	mov	sp, r7
 c003bb0:	bd80      	pop	{r7, pc}
 c003bb2:	bf00      	nop
 c003bb4:	50002800 	.word	0x50002800

0c003bb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 c003bb8:	b580      	push	{r7, lr}
 c003bba:	b084      	sub	sp, #16
 c003bbc:	af00      	add	r7, sp, #0
 c003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 c003bc0:	2300      	movs	r3, #0
 c003bc2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 c003bc4:	4b15      	ldr	r3, [pc, #84]	; (c003c1c <RTC_EnterInitMode+0x64>)
 c003bc6:	68db      	ldr	r3, [r3, #12]
 c003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003bcc:	2b00      	cmp	r3, #0
 c003bce:	d120      	bne.n	c003c12 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 c003bd0:	4b12      	ldr	r3, [pc, #72]	; (c003c1c <RTC_EnterInitMode+0x64>)
 c003bd2:	68db      	ldr	r3, [r3, #12]
 c003bd4:	4a11      	ldr	r2, [pc, #68]	; (c003c1c <RTC_EnterInitMode+0x64>)
 c003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003bda:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 c003bdc:	f7fd fc7e 	bl	c0014dc <HAL_GetTick>
 c003be0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 c003be2:	e00d      	b.n	c003c00 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 c003be4:	f7fd fc7a 	bl	c0014dc <HAL_GetTick>
 c003be8:	4602      	mov	r2, r0
 c003bea:	68bb      	ldr	r3, [r7, #8]
 c003bec:	1ad3      	subs	r3, r2, r3
 c003bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 c003bf2:	d905      	bls.n	c003c00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 c003bf4:	2303      	movs	r3, #3
 c003bf6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 c003bf8:	687b      	ldr	r3, [r7, #4]
 c003bfa:	2203      	movs	r2, #3
 c003bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 c003c00:	4b06      	ldr	r3, [pc, #24]	; (c003c1c <RTC_EnterInitMode+0x64>)
 c003c02:	68db      	ldr	r3, [r3, #12]
 c003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003c08:	2b00      	cmp	r3, #0
 c003c0a:	d102      	bne.n	c003c12 <RTC_EnterInitMode+0x5a>
 c003c0c:	7bfb      	ldrb	r3, [r7, #15]
 c003c0e:	2b03      	cmp	r3, #3
 c003c10:	d1e8      	bne.n	c003be4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 c003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 c003c14:	4618      	mov	r0, r3
 c003c16:	3710      	adds	r7, #16
 c003c18:	46bd      	mov	sp, r7
 c003c1a:	bd80      	pop	{r7, pc}
 c003c1c:	50002800 	.word	0x50002800

0c003c20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 c003c20:	b580      	push	{r7, lr}
 c003c22:	b084      	sub	sp, #16
 c003c24:	af00      	add	r7, sp, #0
 c003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c003c28:	2300      	movs	r3, #0
 c003c2a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 c003c2c:	4b1a      	ldr	r3, [pc, #104]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c2e:	68db      	ldr	r3, [r3, #12]
 c003c30:	4a19      	ldr	r2, [pc, #100]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c003c36:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 c003c38:	4b17      	ldr	r3, [pc, #92]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c3a:	699b      	ldr	r3, [r3, #24]
 c003c3c:	f003 0320 	and.w	r3, r3, #32
 c003c40:	2b00      	cmp	r3, #0
 c003c42:	d10c      	bne.n	c003c5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 c003c44:	6878      	ldr	r0, [r7, #4]
 c003c46:	f7ff ff91 	bl	c003b6c <HAL_RTC_WaitForSynchro>
 c003c4a:	4603      	mov	r3, r0
 c003c4c:	2b00      	cmp	r3, #0
 c003c4e:	d01e      	beq.n	c003c8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 c003c50:	687b      	ldr	r3, [r7, #4]
 c003c52:	2203      	movs	r2, #3
 c003c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 c003c58:	2303      	movs	r3, #3
 c003c5a:	73fb      	strb	r3, [r7, #15]
 c003c5c:	e017      	b.n	c003c8e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 c003c5e:	4b0e      	ldr	r3, [pc, #56]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c60:	699b      	ldr	r3, [r3, #24]
 c003c62:	4a0d      	ldr	r2, [pc, #52]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c64:	f023 0320 	bic.w	r3, r3, #32
 c003c68:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 c003c6a:	6878      	ldr	r0, [r7, #4]
 c003c6c:	f7ff ff7e 	bl	c003b6c <HAL_RTC_WaitForSynchro>
 c003c70:	4603      	mov	r3, r0
 c003c72:	2b00      	cmp	r3, #0
 c003c74:	d005      	beq.n	c003c82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 c003c76:	687b      	ldr	r3, [r7, #4]
 c003c78:	2203      	movs	r2, #3
 c003c7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 c003c7e:	2303      	movs	r3, #3
 c003c80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 c003c82:	4b05      	ldr	r3, [pc, #20]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c84:	699b      	ldr	r3, [r3, #24]
 c003c86:	4a04      	ldr	r2, [pc, #16]	; (c003c98 <RTC_ExitInitMode+0x78>)
 c003c88:	f043 0320 	orr.w	r3, r3, #32
 c003c8c:	6193      	str	r3, [r2, #24]
  }

  return status;
 c003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 c003c90:	4618      	mov	r0, r3
 c003c92:	3710      	adds	r7, #16
 c003c94:	46bd      	mov	sp, r7
 c003c96:	bd80      	pop	{r7, pc}
 c003c98:	50002800 	.word	0x50002800

0c003c9c <HAL_RTCEx_SecureModeSet>:
  * @param  hrtc RTC handle
  * @param  secureState  Secure state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_SecureModeSet(RTC_HandleTypeDef *hrtc, RTC_SecureStateTypeDef  *secureState)
{
 c003c9c:	b480      	push	{r7}
 c003c9e:	b083      	sub	sp, #12
 c003ca0:	af00      	add	r7, sp, #0
 c003ca2:	6078      	str	r0, [r7, #4]
 c003ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TAMP_SECURE_FULL(secureState->tampSecureFull));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone3));

  /* RTC, rtcNonSecureFeatures is only relevant if secureState->rtcSecureFull == RTC_SECURE_FULL_NO */
  WRITE_REG(RTC->SMCR, secureState->rtcSecureFull | secureState->rtcNonSecureFeatures);
 c003ca6:	683b      	ldr	r3, [r7, #0]
 c003ca8:	681a      	ldr	r2, [r3, #0]
 c003caa:	683b      	ldr	r3, [r7, #0]
 c003cac:	685b      	ldr	r3, [r3, #4]
 c003cae:	490c      	ldr	r1, [pc, #48]	; (c003ce0 <HAL_RTCEx_SecureModeSet+0x44>)
 c003cb0:	4313      	orrs	r3, r2
 c003cb2:	620b      	str	r3, [r1, #32]

  /* Tamper + Backup register
     Warning : Backup register start zone are Shared with privilege configuration */
  WRITE_REG(TAMP->SMCR,
 c003cb4:	683b      	ldr	r3, [r7, #0]
 c003cb6:	689a      	ldr	r2, [r3, #8]
 c003cb8:	683b      	ldr	r3, [r7, #0]
 c003cba:	68db      	ldr	r3, [r3, #12]
 c003cbc:	b2db      	uxtb	r3, r3
 c003cbe:	431a      	orrs	r2, r3
 c003cc0:	683b      	ldr	r3, [r7, #0]
 c003cc2:	691b      	ldr	r3, [r3, #16]
 c003cc4:	041b      	lsls	r3, r3, #16
 c003cc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c003cca:	4906      	ldr	r1, [pc, #24]	; (c003ce4 <HAL_RTCEx_SecureModeSet+0x48>)
 c003ccc:	4313      	orrs	r3, r2
 c003cce:	620b      	str	r3, [r1, #32]
            secureState->tampSecureFull |
            (TAMP_SMCR_BKPRWDPROT & (secureState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos)) |
            (TAMP_SMCR_BKPWDPROT & (secureState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 c003cd0:	2300      	movs	r3, #0
}
 c003cd2:	4618      	mov	r0, r3
 c003cd4:	370c      	adds	r7, #12
 c003cd6:	46bd      	mov	sp, r7
 c003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003cdc:	4770      	bx	lr
 c003cde:	bf00      	nop
 c003ce0:	50002800 	.word	0x50002800
 c003ce4:	50003400 	.word	0x50003400

0c003ce8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 c003ce8:	b480      	push	{r7}
 c003cea:	b083      	sub	sp, #12
 c003cec:	af00      	add	r7, sp, #0
 c003cee:	6078      	str	r0, [r7, #4]
 c003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 c003cf2:	683b      	ldr	r3, [r7, #0]
 c003cf4:	681a      	ldr	r2, [r3, #0]
 c003cf6:	683b      	ldr	r3, [r7, #0]
 c003cf8:	685b      	ldr	r3, [r3, #4]
 c003cfa:	490f      	ldr	r1, [pc, #60]	; (c003d38 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 c003cfc:	4313      	orrs	r3, r2
 c003cfe:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 c003d00:	683b      	ldr	r3, [r7, #0]
 c003d02:	689a      	ldr	r2, [r3, #8]
 c003d04:	683b      	ldr	r3, [r7, #0]
 c003d06:	68db      	ldr	r3, [r3, #12]
 c003d08:	490c      	ldr	r1, [pc, #48]	; (c003d3c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c003d0a:	4313      	orrs	r3, r2
 c003d0c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 c003d0e:	4b0b      	ldr	r3, [pc, #44]	; (c003d3c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c003d10:	6a1b      	ldr	r3, [r3, #32]
 c003d12:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 c003d16:	683b      	ldr	r3, [r7, #0]
 c003d18:	6919      	ldr	r1, [r3, #16]
 c003d1a:	683b      	ldr	r3, [r7, #0]
 c003d1c:	695b      	ldr	r3, [r3, #20]
 c003d1e:	041b      	lsls	r3, r3, #16
 c003d20:	430b      	orrs	r3, r1
 c003d22:	4906      	ldr	r1, [pc, #24]	; (c003d3c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c003d24:	4313      	orrs	r3, r2
 c003d26:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 c003d28:	2300      	movs	r3, #0
}
 c003d2a:	4618      	mov	r0, r3
 c003d2c:	370c      	adds	r7, #12
 c003d2e:	46bd      	mov	sp, r7
 c003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d34:	4770      	bx	lr
 c003d36:	bf00      	nop
 c003d38:	50002800 	.word	0x50002800
 c003d3c:	50003400 	.word	0x50003400

0c003d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c003d40:	b580      	push	{r7, lr}
 c003d42:	b082      	sub	sp, #8
 c003d44:	af00      	add	r7, sp, #0
 c003d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c003d48:	687b      	ldr	r3, [r7, #4]
 c003d4a:	2b00      	cmp	r3, #0
 c003d4c:	d101      	bne.n	c003d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c003d4e:	2301      	movs	r3, #1
 c003d50:	e042      	b.n	c003dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c003d52:	687b      	ldr	r3, [r7, #4]
 c003d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003d58:	2b00      	cmp	r3, #0
 c003d5a:	d106      	bne.n	c003d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c003d5c:	687b      	ldr	r3, [r7, #4]
 c003d5e:	2200      	movs	r2, #0
 c003d60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c003d64:	6878      	ldr	r0, [r7, #4]
 c003d66:	f7fd f865 	bl	c000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c003d6a:	687b      	ldr	r3, [r7, #4]
 c003d6c:	2224      	movs	r2, #36	; 0x24
 c003d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 c003d72:	687b      	ldr	r3, [r7, #4]
 c003d74:	681b      	ldr	r3, [r3, #0]
 c003d76:	681a      	ldr	r2, [r3, #0]
 c003d78:	687b      	ldr	r3, [r7, #4]
 c003d7a:	681b      	ldr	r3, [r3, #0]
 c003d7c:	f022 0201 	bic.w	r2, r2, #1
 c003d80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c003d82:	6878      	ldr	r0, [r7, #4]
 c003d84:	f000 f8c4 	bl	c003f10 <UART_SetConfig>
 c003d88:	4603      	mov	r3, r0
 c003d8a:	2b01      	cmp	r3, #1
 c003d8c:	d101      	bne.n	c003d92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c003d8e:	2301      	movs	r3, #1
 c003d90:	e022      	b.n	c003dd8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c003d92:	687b      	ldr	r3, [r7, #4]
 c003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003d96:	2b00      	cmp	r3, #0
 c003d98:	d002      	beq.n	c003da0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c003d9a:	6878      	ldr	r0, [r7, #4]
 c003d9c:	f001 fb96 	bl	c0054cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c003da0:	687b      	ldr	r3, [r7, #4]
 c003da2:	681b      	ldr	r3, [r3, #0]
 c003da4:	685a      	ldr	r2, [r3, #4]
 c003da6:	687b      	ldr	r3, [r7, #4]
 c003da8:	681b      	ldr	r3, [r3, #0]
 c003daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c003dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c003db0:	687b      	ldr	r3, [r7, #4]
 c003db2:	681b      	ldr	r3, [r3, #0]
 c003db4:	689a      	ldr	r2, [r3, #8]
 c003db6:	687b      	ldr	r3, [r7, #4]
 c003db8:	681b      	ldr	r3, [r3, #0]
 c003dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c003dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c003dc0:	687b      	ldr	r3, [r7, #4]
 c003dc2:	681b      	ldr	r3, [r3, #0]
 c003dc4:	681a      	ldr	r2, [r3, #0]
 c003dc6:	687b      	ldr	r3, [r7, #4]
 c003dc8:	681b      	ldr	r3, [r3, #0]
 c003dca:	f042 0201 	orr.w	r2, r2, #1
 c003dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c003dd0:	6878      	ldr	r0, [r7, #4]
 c003dd2:	f001 fc1d 	bl	c005610 <UART_CheckIdleState>
 c003dd6:	4603      	mov	r3, r0
}
 c003dd8:	4618      	mov	r0, r3
 c003dda:	3708      	adds	r7, #8
 c003ddc:	46bd      	mov	sp, r7
 c003dde:	bd80      	pop	{r7, pc}

0c003de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c003de0:	b580      	push	{r7, lr}
 c003de2:	b08a      	sub	sp, #40	; 0x28
 c003de4:	af02      	add	r7, sp, #8
 c003de6:	60f8      	str	r0, [r7, #12]
 c003de8:	60b9      	str	r1, [r7, #8]
 c003dea:	603b      	str	r3, [r7, #0]
 c003dec:	4613      	mov	r3, r2
 c003dee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c003df0:	68fb      	ldr	r3, [r7, #12]
 c003df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003df6:	2b20      	cmp	r3, #32
 c003df8:	f040 8083 	bne.w	c003f02 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c003dfc:	68bb      	ldr	r3, [r7, #8]
 c003dfe:	2b00      	cmp	r3, #0
 c003e00:	d002      	beq.n	c003e08 <HAL_UART_Transmit+0x28>
 c003e02:	88fb      	ldrh	r3, [r7, #6]
 c003e04:	2b00      	cmp	r3, #0
 c003e06:	d101      	bne.n	c003e0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c003e08:	2301      	movs	r3, #1
 c003e0a:	e07b      	b.n	c003f04 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c003e0c:	68fb      	ldr	r3, [r7, #12]
 c003e0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 c003e12:	2b01      	cmp	r3, #1
 c003e14:	d101      	bne.n	c003e1a <HAL_UART_Transmit+0x3a>
 c003e16:	2302      	movs	r3, #2
 c003e18:	e074      	b.n	c003f04 <HAL_UART_Transmit+0x124>
 c003e1a:	68fb      	ldr	r3, [r7, #12]
 c003e1c:	2201      	movs	r2, #1
 c003e1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c003e22:	68fb      	ldr	r3, [r7, #12]
 c003e24:	2200      	movs	r2, #0
 c003e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c003e2a:	68fb      	ldr	r3, [r7, #12]
 c003e2c:	2221      	movs	r2, #33	; 0x21
 c003e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 c003e32:	f7fd fb53 	bl	c0014dc <HAL_GetTick>
 c003e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c003e38:	68fb      	ldr	r3, [r7, #12]
 c003e3a:	88fa      	ldrh	r2, [r7, #6]
 c003e3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c003e40:	68fb      	ldr	r3, [r7, #12]
 c003e42:	88fa      	ldrh	r2, [r7, #6]
 c003e44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c003e48:	68fb      	ldr	r3, [r7, #12]
 c003e4a:	689b      	ldr	r3, [r3, #8]
 c003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c003e50:	d108      	bne.n	c003e64 <HAL_UART_Transmit+0x84>
 c003e52:	68fb      	ldr	r3, [r7, #12]
 c003e54:	691b      	ldr	r3, [r3, #16]
 c003e56:	2b00      	cmp	r3, #0
 c003e58:	d104      	bne.n	c003e64 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c003e5a:	2300      	movs	r3, #0
 c003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c003e5e:	68bb      	ldr	r3, [r7, #8]
 c003e60:	61bb      	str	r3, [r7, #24]
 c003e62:	e003      	b.n	c003e6c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c003e64:	68bb      	ldr	r3, [r7, #8]
 c003e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c003e68:	2300      	movs	r3, #0
 c003e6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c003e6c:	68fb      	ldr	r3, [r7, #12]
 c003e6e:	2200      	movs	r2, #0
 c003e70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 c003e74:	e02c      	b.n	c003ed0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c003e76:	683b      	ldr	r3, [r7, #0]
 c003e78:	9300      	str	r3, [sp, #0]
 c003e7a:	697b      	ldr	r3, [r7, #20]
 c003e7c:	2200      	movs	r2, #0
 c003e7e:	2180      	movs	r1, #128	; 0x80
 c003e80:	68f8      	ldr	r0, [r7, #12]
 c003e82:	f001 fc0d 	bl	c0056a0 <UART_WaitOnFlagUntilTimeout>
 c003e86:	4603      	mov	r3, r0
 c003e88:	2b00      	cmp	r3, #0
 c003e8a:	d001      	beq.n	c003e90 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c003e8c:	2303      	movs	r3, #3
 c003e8e:	e039      	b.n	c003f04 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c003e90:	69fb      	ldr	r3, [r7, #28]
 c003e92:	2b00      	cmp	r3, #0
 c003e94:	d10b      	bne.n	c003eae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c003e96:	69bb      	ldr	r3, [r7, #24]
 c003e98:	881b      	ldrh	r3, [r3, #0]
 c003e9a:	461a      	mov	r2, r3
 c003e9c:	68fb      	ldr	r3, [r7, #12]
 c003e9e:	681b      	ldr	r3, [r3, #0]
 c003ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c003ea4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c003ea6:	69bb      	ldr	r3, [r7, #24]
 c003ea8:	3302      	adds	r3, #2
 c003eaa:	61bb      	str	r3, [r7, #24]
 c003eac:	e007      	b.n	c003ebe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c003eae:	69fb      	ldr	r3, [r7, #28]
 c003eb0:	781a      	ldrb	r2, [r3, #0]
 c003eb2:	68fb      	ldr	r3, [r7, #12]
 c003eb4:	681b      	ldr	r3, [r3, #0]
 c003eb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c003eb8:	69fb      	ldr	r3, [r7, #28]
 c003eba:	3301      	adds	r3, #1
 c003ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c003ebe:	68fb      	ldr	r3, [r7, #12]
 c003ec0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c003ec4:	b29b      	uxth	r3, r3
 c003ec6:	3b01      	subs	r3, #1
 c003ec8:	b29a      	uxth	r2, r3
 c003eca:	68fb      	ldr	r3, [r7, #12]
 c003ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c003ed0:	68fb      	ldr	r3, [r7, #12]
 c003ed2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c003ed6:	b29b      	uxth	r3, r3
 c003ed8:	2b00      	cmp	r3, #0
 c003eda:	d1cc      	bne.n	c003e76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c003edc:	683b      	ldr	r3, [r7, #0]
 c003ede:	9300      	str	r3, [sp, #0]
 c003ee0:	697b      	ldr	r3, [r7, #20]
 c003ee2:	2200      	movs	r2, #0
 c003ee4:	2140      	movs	r1, #64	; 0x40
 c003ee6:	68f8      	ldr	r0, [r7, #12]
 c003ee8:	f001 fbda 	bl	c0056a0 <UART_WaitOnFlagUntilTimeout>
 c003eec:	4603      	mov	r3, r0
 c003eee:	2b00      	cmp	r3, #0
 c003ef0:	d001      	beq.n	c003ef6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c003ef2:	2303      	movs	r3, #3
 c003ef4:	e006      	b.n	c003f04 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c003ef6:	68fb      	ldr	r3, [r7, #12]
 c003ef8:	2220      	movs	r2, #32
 c003efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 c003efe:	2300      	movs	r3, #0
 c003f00:	e000      	b.n	c003f04 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c003f02:	2302      	movs	r3, #2
  }
}
 c003f04:	4618      	mov	r0, r3
 c003f06:	3720      	adds	r7, #32
 c003f08:	46bd      	mov	sp, r7
 c003f0a:	bd80      	pop	{r7, pc}
 c003f0c:	0000      	movs	r0, r0
	...

0c003f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c003f10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 c003f14:	b08a      	sub	sp, #40	; 0x28
 c003f16:	af00      	add	r7, sp, #0
 c003f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 c003f1a:	2300      	movs	r3, #0
 c003f1c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 c003f1e:	2300      	movs	r3, #0
 c003f20:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 c003f22:	2300      	movs	r3, #0
 c003f24:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c003f26:	687b      	ldr	r3, [r7, #4]
 c003f28:	689a      	ldr	r2, [r3, #8]
 c003f2a:	687b      	ldr	r3, [r7, #4]
 c003f2c:	691b      	ldr	r3, [r3, #16]
 c003f2e:	431a      	orrs	r2, r3
 c003f30:	687b      	ldr	r3, [r7, #4]
 c003f32:	695b      	ldr	r3, [r3, #20]
 c003f34:	431a      	orrs	r2, r3
 c003f36:	687b      	ldr	r3, [r7, #4]
 c003f38:	69db      	ldr	r3, [r3, #28]
 c003f3a:	4313      	orrs	r3, r2
 c003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 c003f3e:	687b      	ldr	r3, [r7, #4]
 c003f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c003f44:	4313      	orrs	r3, r2
 c003f46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c003f48:	687b      	ldr	r3, [r7, #4]
 c003f4a:	681b      	ldr	r3, [r3, #0]
 c003f4c:	681a      	ldr	r2, [r3, #0]
 c003f4e:	4baa      	ldr	r3, [pc, #680]	; (c0041f8 <UART_SetConfig+0x2e8>)
 c003f50:	4013      	ands	r3, r2
 c003f52:	687a      	ldr	r2, [r7, #4]
 c003f54:	6812      	ldr	r2, [r2, #0]
 c003f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c003f58:	430b      	orrs	r3, r1
 c003f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c003f5c:	687b      	ldr	r3, [r7, #4]
 c003f5e:	681b      	ldr	r3, [r3, #0]
 c003f60:	685b      	ldr	r3, [r3, #4]
 c003f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c003f66:	687b      	ldr	r3, [r7, #4]
 c003f68:	68da      	ldr	r2, [r3, #12]
 c003f6a:	687b      	ldr	r3, [r7, #4]
 c003f6c:	681b      	ldr	r3, [r3, #0]
 c003f6e:	430a      	orrs	r2, r1
 c003f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c003f72:	687b      	ldr	r3, [r7, #4]
 c003f74:	699b      	ldr	r3, [r3, #24]
 c003f76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c003f78:	687b      	ldr	r3, [r7, #4]
 c003f7a:	681b      	ldr	r3, [r3, #0]
 c003f7c:	4a9f      	ldr	r2, [pc, #636]	; (c0041fc <UART_SetConfig+0x2ec>)
 c003f7e:	4293      	cmp	r3, r2
 c003f80:	d004      	beq.n	c003f8c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c003f82:	687b      	ldr	r3, [r7, #4]
 c003f84:	6a1b      	ldr	r3, [r3, #32]
 c003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c003f88:	4313      	orrs	r3, r2
 c003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003f8c:	687b      	ldr	r3, [r7, #4]
 c003f8e:	681b      	ldr	r3, [r3, #0]
 c003f90:	689b      	ldr	r3, [r3, #8]
 c003f92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c003f96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c003f9a:	687a      	ldr	r2, [r7, #4]
 c003f9c:	6812      	ldr	r2, [r2, #0]
 c003f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 c003fa0:	430b      	orrs	r3, r1
 c003fa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c003fa4:	687b      	ldr	r3, [r7, #4]
 c003fa6:	681b      	ldr	r3, [r3, #0]
 c003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003faa:	f023 010f 	bic.w	r1, r3, #15
 c003fae:	687b      	ldr	r3, [r7, #4]
 c003fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c003fb2:	687b      	ldr	r3, [r7, #4]
 c003fb4:	681b      	ldr	r3, [r3, #0]
 c003fb6:	430a      	orrs	r2, r1
 c003fb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003fba:	687b      	ldr	r3, [r7, #4]
 c003fbc:	681b      	ldr	r3, [r3, #0]
 c003fbe:	4a90      	ldr	r2, [pc, #576]	; (c004200 <UART_SetConfig+0x2f0>)
 c003fc0:	4293      	cmp	r3, r2
 c003fc2:	d126      	bne.n	c004012 <UART_SetConfig+0x102>
 c003fc4:	4b8f      	ldr	r3, [pc, #572]	; (c004204 <UART_SetConfig+0x2f4>)
 c003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003fca:	f003 0303 	and.w	r3, r3, #3
 c003fce:	2b03      	cmp	r3, #3
 c003fd0:	d81a      	bhi.n	c004008 <UART_SetConfig+0xf8>
 c003fd2:	a201      	add	r2, pc, #4	; (adr r2, c003fd8 <UART_SetConfig+0xc8>)
 c003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003fd8:	0c003fe9 	.word	0x0c003fe9
 c003fdc:	0c003ff9 	.word	0x0c003ff9
 c003fe0:	0c003ff1 	.word	0x0c003ff1
 c003fe4:	0c004001 	.word	0x0c004001
 c003fe8:	2301      	movs	r3, #1
 c003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c003fee:	e114      	b.n	c00421a <UART_SetConfig+0x30a>
 c003ff0:	2302      	movs	r3, #2
 c003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c003ff6:	e110      	b.n	c00421a <UART_SetConfig+0x30a>
 c003ff8:	2304      	movs	r3, #4
 c003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c003ffe:	e10c      	b.n	c00421a <UART_SetConfig+0x30a>
 c004000:	2308      	movs	r3, #8
 c004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004006:	e108      	b.n	c00421a <UART_SetConfig+0x30a>
 c004008:	2310      	movs	r3, #16
 c00400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00400e:	bf00      	nop
 c004010:	e103      	b.n	c00421a <UART_SetConfig+0x30a>
 c004012:	687b      	ldr	r3, [r7, #4]
 c004014:	681b      	ldr	r3, [r3, #0]
 c004016:	4a7c      	ldr	r2, [pc, #496]	; (c004208 <UART_SetConfig+0x2f8>)
 c004018:	4293      	cmp	r3, r2
 c00401a:	d138      	bne.n	c00408e <UART_SetConfig+0x17e>
 c00401c:	4b79      	ldr	r3, [pc, #484]	; (c004204 <UART_SetConfig+0x2f4>)
 c00401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004022:	f003 030c 	and.w	r3, r3, #12
 c004026:	2b0c      	cmp	r3, #12
 c004028:	d82c      	bhi.n	c004084 <UART_SetConfig+0x174>
 c00402a:	a201      	add	r2, pc, #4	; (adr r2, c004030 <UART_SetConfig+0x120>)
 c00402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004030:	0c004065 	.word	0x0c004065
 c004034:	0c004085 	.word	0x0c004085
 c004038:	0c004085 	.word	0x0c004085
 c00403c:	0c004085 	.word	0x0c004085
 c004040:	0c004075 	.word	0x0c004075
 c004044:	0c004085 	.word	0x0c004085
 c004048:	0c004085 	.word	0x0c004085
 c00404c:	0c004085 	.word	0x0c004085
 c004050:	0c00406d 	.word	0x0c00406d
 c004054:	0c004085 	.word	0x0c004085
 c004058:	0c004085 	.word	0x0c004085
 c00405c:	0c004085 	.word	0x0c004085
 c004060:	0c00407d 	.word	0x0c00407d
 c004064:	2300      	movs	r3, #0
 c004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00406a:	e0d6      	b.n	c00421a <UART_SetConfig+0x30a>
 c00406c:	2302      	movs	r3, #2
 c00406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004072:	e0d2      	b.n	c00421a <UART_SetConfig+0x30a>
 c004074:	2304      	movs	r3, #4
 c004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00407a:	e0ce      	b.n	c00421a <UART_SetConfig+0x30a>
 c00407c:	2308      	movs	r3, #8
 c00407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004082:	e0ca      	b.n	c00421a <UART_SetConfig+0x30a>
 c004084:	2310      	movs	r3, #16
 c004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00408a:	bf00      	nop
 c00408c:	e0c5      	b.n	c00421a <UART_SetConfig+0x30a>
 c00408e:	687b      	ldr	r3, [r7, #4]
 c004090:	681b      	ldr	r3, [r3, #0]
 c004092:	4a5e      	ldr	r2, [pc, #376]	; (c00420c <UART_SetConfig+0x2fc>)
 c004094:	4293      	cmp	r3, r2
 c004096:	d125      	bne.n	c0040e4 <UART_SetConfig+0x1d4>
 c004098:	4b5a      	ldr	r3, [pc, #360]	; (c004204 <UART_SetConfig+0x2f4>)
 c00409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00409e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0040a2:	2b10      	cmp	r3, #16
 c0040a4:	d011      	beq.n	c0040ca <UART_SetConfig+0x1ba>
 c0040a6:	2b10      	cmp	r3, #16
 c0040a8:	d802      	bhi.n	c0040b0 <UART_SetConfig+0x1a0>
 c0040aa:	2b00      	cmp	r3, #0
 c0040ac:	d005      	beq.n	c0040ba <UART_SetConfig+0x1aa>
 c0040ae:	e014      	b.n	c0040da <UART_SetConfig+0x1ca>
 c0040b0:	2b20      	cmp	r3, #32
 c0040b2:	d006      	beq.n	c0040c2 <UART_SetConfig+0x1b2>
 c0040b4:	2b30      	cmp	r3, #48	; 0x30
 c0040b6:	d00c      	beq.n	c0040d2 <UART_SetConfig+0x1c2>
 c0040b8:	e00f      	b.n	c0040da <UART_SetConfig+0x1ca>
 c0040ba:	2300      	movs	r3, #0
 c0040bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0040c0:	e0ab      	b.n	c00421a <UART_SetConfig+0x30a>
 c0040c2:	2302      	movs	r3, #2
 c0040c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0040c8:	e0a7      	b.n	c00421a <UART_SetConfig+0x30a>
 c0040ca:	2304      	movs	r3, #4
 c0040cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0040d0:	e0a3      	b.n	c00421a <UART_SetConfig+0x30a>
 c0040d2:	2308      	movs	r3, #8
 c0040d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0040d8:	e09f      	b.n	c00421a <UART_SetConfig+0x30a>
 c0040da:	2310      	movs	r3, #16
 c0040dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0040e0:	bf00      	nop
 c0040e2:	e09a      	b.n	c00421a <UART_SetConfig+0x30a>
 c0040e4:	687b      	ldr	r3, [r7, #4]
 c0040e6:	681b      	ldr	r3, [r3, #0]
 c0040e8:	4a49      	ldr	r2, [pc, #292]	; (c004210 <UART_SetConfig+0x300>)
 c0040ea:	4293      	cmp	r3, r2
 c0040ec:	d125      	bne.n	c00413a <UART_SetConfig+0x22a>
 c0040ee:	4b45      	ldr	r3, [pc, #276]	; (c004204 <UART_SetConfig+0x2f4>)
 c0040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0040f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c0040f8:	2b40      	cmp	r3, #64	; 0x40
 c0040fa:	d011      	beq.n	c004120 <UART_SetConfig+0x210>
 c0040fc:	2b40      	cmp	r3, #64	; 0x40
 c0040fe:	d802      	bhi.n	c004106 <UART_SetConfig+0x1f6>
 c004100:	2b00      	cmp	r3, #0
 c004102:	d005      	beq.n	c004110 <UART_SetConfig+0x200>
 c004104:	e014      	b.n	c004130 <UART_SetConfig+0x220>
 c004106:	2b80      	cmp	r3, #128	; 0x80
 c004108:	d006      	beq.n	c004118 <UART_SetConfig+0x208>
 c00410a:	2bc0      	cmp	r3, #192	; 0xc0
 c00410c:	d00c      	beq.n	c004128 <UART_SetConfig+0x218>
 c00410e:	e00f      	b.n	c004130 <UART_SetConfig+0x220>
 c004110:	2300      	movs	r3, #0
 c004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004116:	e080      	b.n	c00421a <UART_SetConfig+0x30a>
 c004118:	2302      	movs	r3, #2
 c00411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00411e:	e07c      	b.n	c00421a <UART_SetConfig+0x30a>
 c004120:	2304      	movs	r3, #4
 c004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004126:	e078      	b.n	c00421a <UART_SetConfig+0x30a>
 c004128:	2308      	movs	r3, #8
 c00412a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00412e:	e074      	b.n	c00421a <UART_SetConfig+0x30a>
 c004130:	2310      	movs	r3, #16
 c004132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004136:	bf00      	nop
 c004138:	e06f      	b.n	c00421a <UART_SetConfig+0x30a>
 c00413a:	687b      	ldr	r3, [r7, #4]
 c00413c:	681b      	ldr	r3, [r3, #0]
 c00413e:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c004142:	d129      	bne.n	c004198 <UART_SetConfig+0x288>
 c004144:	4b2f      	ldr	r3, [pc, #188]	; (c004204 <UART_SetConfig+0x2f4>)
 c004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004152:	d014      	beq.n	c00417e <UART_SetConfig+0x26e>
 c004154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004158:	d802      	bhi.n	c004160 <UART_SetConfig+0x250>
 c00415a:	2b00      	cmp	r3, #0
 c00415c:	d007      	beq.n	c00416e <UART_SetConfig+0x25e>
 c00415e:	e016      	b.n	c00418e <UART_SetConfig+0x27e>
 c004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004164:	d007      	beq.n	c004176 <UART_SetConfig+0x266>
 c004166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00416a:	d00c      	beq.n	c004186 <UART_SetConfig+0x276>
 c00416c:	e00f      	b.n	c00418e <UART_SetConfig+0x27e>
 c00416e:	2300      	movs	r3, #0
 c004170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004174:	e051      	b.n	c00421a <UART_SetConfig+0x30a>
 c004176:	2302      	movs	r3, #2
 c004178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00417c:	e04d      	b.n	c00421a <UART_SetConfig+0x30a>
 c00417e:	2304      	movs	r3, #4
 c004180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004184:	e049      	b.n	c00421a <UART_SetConfig+0x30a>
 c004186:	2308      	movs	r3, #8
 c004188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c00418c:	e045      	b.n	c00421a <UART_SetConfig+0x30a>
 c00418e:	2310      	movs	r3, #16
 c004190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c004194:	bf00      	nop
 c004196:	e040      	b.n	c00421a <UART_SetConfig+0x30a>
 c004198:	687b      	ldr	r3, [r7, #4]
 c00419a:	681b      	ldr	r3, [r3, #0]
 c00419c:	4a17      	ldr	r2, [pc, #92]	; (c0041fc <UART_SetConfig+0x2ec>)
 c00419e:	4293      	cmp	r3, r2
 c0041a0:	d138      	bne.n	c004214 <UART_SetConfig+0x304>
 c0041a2:	4b18      	ldr	r3, [pc, #96]	; (c004204 <UART_SetConfig+0x2f4>)
 c0041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0041a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c0041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0041b0:	d014      	beq.n	c0041dc <UART_SetConfig+0x2cc>
 c0041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0041b6:	d802      	bhi.n	c0041be <UART_SetConfig+0x2ae>
 c0041b8:	2b00      	cmp	r3, #0
 c0041ba:	d007      	beq.n	c0041cc <UART_SetConfig+0x2bc>
 c0041bc:	e016      	b.n	c0041ec <UART_SetConfig+0x2dc>
 c0041be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0041c2:	d007      	beq.n	c0041d4 <UART_SetConfig+0x2c4>
 c0041c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0041c8:	d00c      	beq.n	c0041e4 <UART_SetConfig+0x2d4>
 c0041ca:	e00f      	b.n	c0041ec <UART_SetConfig+0x2dc>
 c0041cc:	2300      	movs	r3, #0
 c0041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0041d2:	e022      	b.n	c00421a <UART_SetConfig+0x30a>
 c0041d4:	2302      	movs	r3, #2
 c0041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0041da:	e01e      	b.n	c00421a <UART_SetConfig+0x30a>
 c0041dc:	2304      	movs	r3, #4
 c0041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0041e2:	e01a      	b.n	c00421a <UART_SetConfig+0x30a>
 c0041e4:	2308      	movs	r3, #8
 c0041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0041ea:	e016      	b.n	c00421a <UART_SetConfig+0x30a>
 c0041ec:	2310      	movs	r3, #16
 c0041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 c0041f2:	bf00      	nop
 c0041f4:	e011      	b.n	c00421a <UART_SetConfig+0x30a>
 c0041f6:	bf00      	nop
 c0041f8:	cfff69f3 	.word	0xcfff69f3
 c0041fc:	50008000 	.word	0x50008000
 c004200:	50013800 	.word	0x50013800
 c004204:	50021000 	.word	0x50021000
 c004208:	50004400 	.word	0x50004400
 c00420c:	50004800 	.word	0x50004800
 c004210:	50004c00 	.word	0x50004c00
 c004214:	2310      	movs	r3, #16
 c004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c00421a:	687b      	ldr	r3, [r7, #4]
 c00421c:	681b      	ldr	r3, [r3, #0]
 c00421e:	4a86      	ldr	r2, [pc, #536]	; (c004438 <UART_SetConfig+0x528>)
 c004220:	4293      	cmp	r3, r2
 c004222:	f040 8514 	bne.w	c004c4e <UART_SetConfig+0xd3e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c004226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 c00422a:	2b08      	cmp	r3, #8
 c00422c:	f200 81c4 	bhi.w	c0045b8 <UART_SetConfig+0x6a8>
 c004230:	a201      	add	r2, pc, #4	; (adr r2, c004238 <UART_SetConfig+0x328>)
 c004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004236:	bf00      	nop
 c004238:	0c00425d 	.word	0x0c00425d
 c00423c:	0c0042ff 	.word	0x0c0042ff
 c004240:	0c0043a1 	.word	0x0c0043a1
 c004244:	0c0045b9 	.word	0x0c0045b9
 c004248:	0c004469 	.word	0x0c004469
 c00424c:	0c0045b9 	.word	0x0c0045b9
 c004250:	0c0045b9 	.word	0x0c0045b9
 c004254:	0c0045b9 	.word	0x0c0045b9
 c004258:	0c00450b 	.word	0x0c00450b
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c00425c:	f7fe fd64 	bl	c002d28 <HAL_RCC_GetPCLK1Freq>
 c004260:	4602      	mov	r2, r0
 c004262:	687b      	ldr	r3, [r7, #4]
 c004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004266:	2b00      	cmp	r3, #0
 c004268:	d044      	beq.n	c0042f4 <UART_SetConfig+0x3e4>
 c00426a:	687b      	ldr	r3, [r7, #4]
 c00426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00426e:	2b01      	cmp	r3, #1
 c004270:	d03e      	beq.n	c0042f0 <UART_SetConfig+0x3e0>
 c004272:	687b      	ldr	r3, [r7, #4]
 c004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004276:	2b02      	cmp	r3, #2
 c004278:	d038      	beq.n	c0042ec <UART_SetConfig+0x3dc>
 c00427a:	687b      	ldr	r3, [r7, #4]
 c00427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00427e:	2b03      	cmp	r3, #3
 c004280:	d032      	beq.n	c0042e8 <UART_SetConfig+0x3d8>
 c004282:	687b      	ldr	r3, [r7, #4]
 c004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004286:	2b04      	cmp	r3, #4
 c004288:	d02c      	beq.n	c0042e4 <UART_SetConfig+0x3d4>
 c00428a:	687b      	ldr	r3, [r7, #4]
 c00428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00428e:	2b05      	cmp	r3, #5
 c004290:	d026      	beq.n	c0042e0 <UART_SetConfig+0x3d0>
 c004292:	687b      	ldr	r3, [r7, #4]
 c004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004296:	2b06      	cmp	r3, #6
 c004298:	d020      	beq.n	c0042dc <UART_SetConfig+0x3cc>
 c00429a:	687b      	ldr	r3, [r7, #4]
 c00429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00429e:	2b07      	cmp	r3, #7
 c0042a0:	d01a      	beq.n	c0042d8 <UART_SetConfig+0x3c8>
 c0042a2:	687b      	ldr	r3, [r7, #4]
 c0042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0042a6:	2b08      	cmp	r3, #8
 c0042a8:	d014      	beq.n	c0042d4 <UART_SetConfig+0x3c4>
 c0042aa:	687b      	ldr	r3, [r7, #4]
 c0042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0042ae:	2b09      	cmp	r3, #9
 c0042b0:	d00e      	beq.n	c0042d0 <UART_SetConfig+0x3c0>
 c0042b2:	687b      	ldr	r3, [r7, #4]
 c0042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0042b6:	2b0a      	cmp	r3, #10
 c0042b8:	d008      	beq.n	c0042cc <UART_SetConfig+0x3bc>
 c0042ba:	687b      	ldr	r3, [r7, #4]
 c0042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0042be:	2b0b      	cmp	r3, #11
 c0042c0:	d102      	bne.n	c0042c8 <UART_SetConfig+0x3b8>
 c0042c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0042c6:	e016      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042c8:	2301      	movs	r3, #1
 c0042ca:	e014      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042cc:	2380      	movs	r3, #128	; 0x80
 c0042ce:	e012      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042d0:	2340      	movs	r3, #64	; 0x40
 c0042d2:	e010      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042d4:	2320      	movs	r3, #32
 c0042d6:	e00e      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042d8:	2310      	movs	r3, #16
 c0042da:	e00c      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042dc:	230c      	movs	r3, #12
 c0042de:	e00a      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042e0:	230a      	movs	r3, #10
 c0042e2:	e008      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042e4:	2308      	movs	r3, #8
 c0042e6:	e006      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042e8:	2306      	movs	r3, #6
 c0042ea:	e004      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042ec:	2304      	movs	r3, #4
 c0042ee:	e002      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042f0:	2302      	movs	r3, #2
 c0042f2:	e000      	b.n	c0042f6 <UART_SetConfig+0x3e6>
 c0042f4:	2301      	movs	r3, #1
 c0042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0042fa:	617b      	str	r3, [r7, #20]
        break;
 c0042fc:	e15f      	b.n	c0045be <UART_SetConfig+0x6ae>
      case UART_CLOCKSOURCE_PCLK2:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK2Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c0042fe:	f7fe fd27 	bl	c002d50 <HAL_RCC_GetPCLK2Freq>
 c004302:	4602      	mov	r2, r0
 c004304:	687b      	ldr	r3, [r7, #4]
 c004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004308:	2b00      	cmp	r3, #0
 c00430a:	d044      	beq.n	c004396 <UART_SetConfig+0x486>
 c00430c:	687b      	ldr	r3, [r7, #4]
 c00430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004310:	2b01      	cmp	r3, #1
 c004312:	d03e      	beq.n	c004392 <UART_SetConfig+0x482>
 c004314:	687b      	ldr	r3, [r7, #4]
 c004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004318:	2b02      	cmp	r3, #2
 c00431a:	d038      	beq.n	c00438e <UART_SetConfig+0x47e>
 c00431c:	687b      	ldr	r3, [r7, #4]
 c00431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004320:	2b03      	cmp	r3, #3
 c004322:	d032      	beq.n	c00438a <UART_SetConfig+0x47a>
 c004324:	687b      	ldr	r3, [r7, #4]
 c004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004328:	2b04      	cmp	r3, #4
 c00432a:	d02c      	beq.n	c004386 <UART_SetConfig+0x476>
 c00432c:	687b      	ldr	r3, [r7, #4]
 c00432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004330:	2b05      	cmp	r3, #5
 c004332:	d026      	beq.n	c004382 <UART_SetConfig+0x472>
 c004334:	687b      	ldr	r3, [r7, #4]
 c004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004338:	2b06      	cmp	r3, #6
 c00433a:	d020      	beq.n	c00437e <UART_SetConfig+0x46e>
 c00433c:	687b      	ldr	r3, [r7, #4]
 c00433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004340:	2b07      	cmp	r3, #7
 c004342:	d01a      	beq.n	c00437a <UART_SetConfig+0x46a>
 c004344:	687b      	ldr	r3, [r7, #4]
 c004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004348:	2b08      	cmp	r3, #8
 c00434a:	d014      	beq.n	c004376 <UART_SetConfig+0x466>
 c00434c:	687b      	ldr	r3, [r7, #4]
 c00434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004350:	2b09      	cmp	r3, #9
 c004352:	d00e      	beq.n	c004372 <UART_SetConfig+0x462>
 c004354:	687b      	ldr	r3, [r7, #4]
 c004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004358:	2b0a      	cmp	r3, #10
 c00435a:	d008      	beq.n	c00436e <UART_SetConfig+0x45e>
 c00435c:	687b      	ldr	r3, [r7, #4]
 c00435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004360:	2b0b      	cmp	r3, #11
 c004362:	d102      	bne.n	c00436a <UART_SetConfig+0x45a>
 c004364:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004368:	e016      	b.n	c004398 <UART_SetConfig+0x488>
 c00436a:	2301      	movs	r3, #1
 c00436c:	e014      	b.n	c004398 <UART_SetConfig+0x488>
 c00436e:	2380      	movs	r3, #128	; 0x80
 c004370:	e012      	b.n	c004398 <UART_SetConfig+0x488>
 c004372:	2340      	movs	r3, #64	; 0x40
 c004374:	e010      	b.n	c004398 <UART_SetConfig+0x488>
 c004376:	2320      	movs	r3, #32
 c004378:	e00e      	b.n	c004398 <UART_SetConfig+0x488>
 c00437a:	2310      	movs	r3, #16
 c00437c:	e00c      	b.n	c004398 <UART_SetConfig+0x488>
 c00437e:	230c      	movs	r3, #12
 c004380:	e00a      	b.n	c004398 <UART_SetConfig+0x488>
 c004382:	230a      	movs	r3, #10
 c004384:	e008      	b.n	c004398 <UART_SetConfig+0x488>
 c004386:	2308      	movs	r3, #8
 c004388:	e006      	b.n	c004398 <UART_SetConfig+0x488>
 c00438a:	2306      	movs	r3, #6
 c00438c:	e004      	b.n	c004398 <UART_SetConfig+0x488>
 c00438e:	2304      	movs	r3, #4
 c004390:	e002      	b.n	c004398 <UART_SetConfig+0x488>
 c004392:	2302      	movs	r3, #2
 c004394:	e000      	b.n	c004398 <UART_SetConfig+0x488>
 c004396:	2301      	movs	r3, #1
 c004398:	fbb2 f3f3 	udiv	r3, r2, r3
 c00439c:	617b      	str	r3, [r7, #20]
        break;
 c00439e:	e10e      	b.n	c0045be <UART_SetConfig+0x6ae>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c0043a0:	687b      	ldr	r3, [r7, #4]
 c0043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043a4:	2b00      	cmp	r3, #0
 c0043a6:	d044      	beq.n	c004432 <UART_SetConfig+0x522>
 c0043a8:	687b      	ldr	r3, [r7, #4]
 c0043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043ac:	2b01      	cmp	r3, #1
 c0043ae:	d03e      	beq.n	c00442e <UART_SetConfig+0x51e>
 c0043b0:	687b      	ldr	r3, [r7, #4]
 c0043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043b4:	2b02      	cmp	r3, #2
 c0043b6:	d038      	beq.n	c00442a <UART_SetConfig+0x51a>
 c0043b8:	687b      	ldr	r3, [r7, #4]
 c0043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043bc:	2b03      	cmp	r3, #3
 c0043be:	d032      	beq.n	c004426 <UART_SetConfig+0x516>
 c0043c0:	687b      	ldr	r3, [r7, #4]
 c0043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043c4:	2b04      	cmp	r3, #4
 c0043c6:	d02c      	beq.n	c004422 <UART_SetConfig+0x512>
 c0043c8:	687b      	ldr	r3, [r7, #4]
 c0043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043cc:	2b05      	cmp	r3, #5
 c0043ce:	d026      	beq.n	c00441e <UART_SetConfig+0x50e>
 c0043d0:	687b      	ldr	r3, [r7, #4]
 c0043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043d4:	2b06      	cmp	r3, #6
 c0043d6:	d020      	beq.n	c00441a <UART_SetConfig+0x50a>
 c0043d8:	687b      	ldr	r3, [r7, #4]
 c0043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043dc:	2b07      	cmp	r3, #7
 c0043de:	d01a      	beq.n	c004416 <UART_SetConfig+0x506>
 c0043e0:	687b      	ldr	r3, [r7, #4]
 c0043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043e4:	2b08      	cmp	r3, #8
 c0043e6:	d014      	beq.n	c004412 <UART_SetConfig+0x502>
 c0043e8:	687b      	ldr	r3, [r7, #4]
 c0043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043ec:	2b09      	cmp	r3, #9
 c0043ee:	d00e      	beq.n	c00440e <UART_SetConfig+0x4fe>
 c0043f0:	687b      	ldr	r3, [r7, #4]
 c0043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043f4:	2b0a      	cmp	r3, #10
 c0043f6:	d008      	beq.n	c00440a <UART_SetConfig+0x4fa>
 c0043f8:	687b      	ldr	r3, [r7, #4]
 c0043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0043fc:	2b0b      	cmp	r3, #11
 c0043fe:	d102      	bne.n	c004406 <UART_SetConfig+0x4f6>
 c004400:	f24f 4324 	movw	r3, #62500	; 0xf424
 c004404:	e016      	b.n	c004434 <UART_SetConfig+0x524>
 c004406:	4b0d      	ldr	r3, [pc, #52]	; (c00443c <UART_SetConfig+0x52c>)
 c004408:	e014      	b.n	c004434 <UART_SetConfig+0x524>
 c00440a:	4b0d      	ldr	r3, [pc, #52]	; (c004440 <UART_SetConfig+0x530>)
 c00440c:	e012      	b.n	c004434 <UART_SetConfig+0x524>
 c00440e:	4b0d      	ldr	r3, [pc, #52]	; (c004444 <UART_SetConfig+0x534>)
 c004410:	e010      	b.n	c004434 <UART_SetConfig+0x524>
 c004412:	4b0d      	ldr	r3, [pc, #52]	; (c004448 <UART_SetConfig+0x538>)
 c004414:	e00e      	b.n	c004434 <UART_SetConfig+0x524>
 c004416:	4b0d      	ldr	r3, [pc, #52]	; (c00444c <UART_SetConfig+0x53c>)
 c004418:	e00c      	b.n	c004434 <UART_SetConfig+0x524>
 c00441a:	4b0d      	ldr	r3, [pc, #52]	; (c004450 <UART_SetConfig+0x540>)
 c00441c:	e00a      	b.n	c004434 <UART_SetConfig+0x524>
 c00441e:	4b0d      	ldr	r3, [pc, #52]	; (c004454 <UART_SetConfig+0x544>)
 c004420:	e008      	b.n	c004434 <UART_SetConfig+0x524>
 c004422:	4b0d      	ldr	r3, [pc, #52]	; (c004458 <UART_SetConfig+0x548>)
 c004424:	e006      	b.n	c004434 <UART_SetConfig+0x524>
 c004426:	4b0d      	ldr	r3, [pc, #52]	; (c00445c <UART_SetConfig+0x54c>)
 c004428:	e004      	b.n	c004434 <UART_SetConfig+0x524>
 c00442a:	4b0d      	ldr	r3, [pc, #52]	; (c004460 <UART_SetConfig+0x550>)
 c00442c:	e002      	b.n	c004434 <UART_SetConfig+0x524>
 c00442e:	4b0d      	ldr	r3, [pc, #52]	; (c004464 <UART_SetConfig+0x554>)
 c004430:	e000      	b.n	c004434 <UART_SetConfig+0x524>
 c004432:	4b02      	ldr	r3, [pc, #8]	; (c00443c <UART_SetConfig+0x52c>)
 c004434:	617b      	str	r3, [r7, #20]
        break;
 c004436:	e0c2      	b.n	c0045be <UART_SetConfig+0x6ae>
 c004438:	50008000 	.word	0x50008000
 c00443c:	00f42400 	.word	0x00f42400
 c004440:	0001e848 	.word	0x0001e848
 c004444:	0003d090 	.word	0x0003d090
 c004448:	0007a120 	.word	0x0007a120
 c00444c:	000f4240 	.word	0x000f4240
 c004450:	00145855 	.word	0x00145855
 c004454:	00186a00 	.word	0x00186a00
 c004458:	001e8480 	.word	0x001e8480
 c00445c:	0028b0aa 	.word	0x0028b0aa
 c004460:	003d0900 	.word	0x003d0900
 c004464:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c004468:	f7fe fbb8 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c00446c:	4602      	mov	r2, r0
 c00446e:	687b      	ldr	r3, [r7, #4]
 c004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004472:	2b00      	cmp	r3, #0
 c004474:	d044      	beq.n	c004500 <UART_SetConfig+0x5f0>
 c004476:	687b      	ldr	r3, [r7, #4]
 c004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00447a:	2b01      	cmp	r3, #1
 c00447c:	d03e      	beq.n	c0044fc <UART_SetConfig+0x5ec>
 c00447e:	687b      	ldr	r3, [r7, #4]
 c004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004482:	2b02      	cmp	r3, #2
 c004484:	d038      	beq.n	c0044f8 <UART_SetConfig+0x5e8>
 c004486:	687b      	ldr	r3, [r7, #4]
 c004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00448a:	2b03      	cmp	r3, #3
 c00448c:	d032      	beq.n	c0044f4 <UART_SetConfig+0x5e4>
 c00448e:	687b      	ldr	r3, [r7, #4]
 c004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004492:	2b04      	cmp	r3, #4
 c004494:	d02c      	beq.n	c0044f0 <UART_SetConfig+0x5e0>
 c004496:	687b      	ldr	r3, [r7, #4]
 c004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00449a:	2b05      	cmp	r3, #5
 c00449c:	d026      	beq.n	c0044ec <UART_SetConfig+0x5dc>
 c00449e:	687b      	ldr	r3, [r7, #4]
 c0044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0044a2:	2b06      	cmp	r3, #6
 c0044a4:	d020      	beq.n	c0044e8 <UART_SetConfig+0x5d8>
 c0044a6:	687b      	ldr	r3, [r7, #4]
 c0044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0044aa:	2b07      	cmp	r3, #7
 c0044ac:	d01a      	beq.n	c0044e4 <UART_SetConfig+0x5d4>
 c0044ae:	687b      	ldr	r3, [r7, #4]
 c0044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0044b2:	2b08      	cmp	r3, #8
 c0044b4:	d014      	beq.n	c0044e0 <UART_SetConfig+0x5d0>
 c0044b6:	687b      	ldr	r3, [r7, #4]
 c0044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0044ba:	2b09      	cmp	r3, #9
 c0044bc:	d00e      	beq.n	c0044dc <UART_SetConfig+0x5cc>
 c0044be:	687b      	ldr	r3, [r7, #4]
 c0044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0044c2:	2b0a      	cmp	r3, #10
 c0044c4:	d008      	beq.n	c0044d8 <UART_SetConfig+0x5c8>
 c0044c6:	687b      	ldr	r3, [r7, #4]
 c0044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0044ca:	2b0b      	cmp	r3, #11
 c0044cc:	d102      	bne.n	c0044d4 <UART_SetConfig+0x5c4>
 c0044ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0044d2:	e016      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044d4:	2301      	movs	r3, #1
 c0044d6:	e014      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044d8:	2380      	movs	r3, #128	; 0x80
 c0044da:	e012      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044dc:	2340      	movs	r3, #64	; 0x40
 c0044de:	e010      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044e0:	2320      	movs	r3, #32
 c0044e2:	e00e      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044e4:	2310      	movs	r3, #16
 c0044e6:	e00c      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044e8:	230c      	movs	r3, #12
 c0044ea:	e00a      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044ec:	230a      	movs	r3, #10
 c0044ee:	e008      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044f0:	2308      	movs	r3, #8
 c0044f2:	e006      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044f4:	2306      	movs	r3, #6
 c0044f6:	e004      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044f8:	2304      	movs	r3, #4
 c0044fa:	e002      	b.n	c004502 <UART_SetConfig+0x5f2>
 c0044fc:	2302      	movs	r3, #2
 c0044fe:	e000      	b.n	c004502 <UART_SetConfig+0x5f2>
 c004500:	2301      	movs	r3, #1
 c004502:	fbb2 f3f3 	udiv	r3, r2, r3
 c004506:	617b      	str	r3, [r7, #20]
        break;
 c004508:	e059      	b.n	c0045be <UART_SetConfig+0x6ae>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c00450a:	687b      	ldr	r3, [r7, #4]
 c00450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00450e:	2b00      	cmp	r3, #0
 c004510:	d04e      	beq.n	c0045b0 <UART_SetConfig+0x6a0>
 c004512:	687b      	ldr	r3, [r7, #4]
 c004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004516:	2b01      	cmp	r3, #1
 c004518:	d047      	beq.n	c0045aa <UART_SetConfig+0x69a>
 c00451a:	687b      	ldr	r3, [r7, #4]
 c00451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00451e:	2b02      	cmp	r3, #2
 c004520:	d040      	beq.n	c0045a4 <UART_SetConfig+0x694>
 c004522:	687b      	ldr	r3, [r7, #4]
 c004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004526:	2b03      	cmp	r3, #3
 c004528:	d039      	beq.n	c00459e <UART_SetConfig+0x68e>
 c00452a:	687b      	ldr	r3, [r7, #4]
 c00452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00452e:	2b04      	cmp	r3, #4
 c004530:	d032      	beq.n	c004598 <UART_SetConfig+0x688>
 c004532:	687b      	ldr	r3, [r7, #4]
 c004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004536:	2b05      	cmp	r3, #5
 c004538:	d02b      	beq.n	c004592 <UART_SetConfig+0x682>
 c00453a:	687b      	ldr	r3, [r7, #4]
 c00453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00453e:	2b06      	cmp	r3, #6
 c004540:	d024      	beq.n	c00458c <UART_SetConfig+0x67c>
 c004542:	687b      	ldr	r3, [r7, #4]
 c004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004546:	2b07      	cmp	r3, #7
 c004548:	d01d      	beq.n	c004586 <UART_SetConfig+0x676>
 c00454a:	687b      	ldr	r3, [r7, #4]
 c00454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00454e:	2b08      	cmp	r3, #8
 c004550:	d016      	beq.n	c004580 <UART_SetConfig+0x670>
 c004552:	687b      	ldr	r3, [r7, #4]
 c004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004556:	2b09      	cmp	r3, #9
 c004558:	d00f      	beq.n	c00457a <UART_SetConfig+0x66a>
 c00455a:	687b      	ldr	r3, [r7, #4]
 c00455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00455e:	2b0a      	cmp	r3, #10
 c004560:	d008      	beq.n	c004574 <UART_SetConfig+0x664>
 c004562:	687b      	ldr	r3, [r7, #4]
 c004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004566:	2b0b      	cmp	r3, #11
 c004568:	d101      	bne.n	c00456e <UART_SetConfig+0x65e>
 c00456a:	2380      	movs	r3, #128	; 0x80
 c00456c:	e022      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c00456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004572:	e01f      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c004574:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004578:	e01c      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c00457a:	f44f 7300 	mov.w	r3, #512	; 0x200
 c00457e:	e019      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c004580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c004584:	e016      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c004586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c00458a:	e013      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c00458c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 c004590:	e010      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c004592:	f640 43cc 	movw	r3, #3276	; 0xccc
 c004596:	e00d      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c004598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00459c:	e00a      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c00459e:	f241 5355 	movw	r3, #5461	; 0x1555
 c0045a2:	e007      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c0045a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c0045a8:	e004      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c0045aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c0045ae:	e001      	b.n	c0045b4 <UART_SetConfig+0x6a4>
 c0045b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0045b4:	617b      	str	r3, [r7, #20]
        break;
 c0045b6:	e002      	b.n	c0045be <UART_SetConfig+0x6ae>
      default:
        ret = HAL_ERROR;
 c0045b8:	2301      	movs	r3, #1
 c0045ba:	76fb      	strb	r3, [r7, #27]
        break;
 c0045bc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 c0045be:	697b      	ldr	r3, [r7, #20]
 c0045c0:	2b00      	cmp	r3, #0
 c0045c2:	f000 8758 	beq.w	c005476 <UART_SetConfig+0x1566>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0045c6:	687b      	ldr	r3, [r7, #4]
 c0045c8:	685a      	ldr	r2, [r3, #4]
 c0045ca:	4613      	mov	r3, r2
 c0045cc:	005b      	lsls	r3, r3, #1
 c0045ce:	4413      	add	r3, r2
 c0045d0:	697a      	ldr	r2, [r7, #20]
 c0045d2:	429a      	cmp	r2, r3
 c0045d4:	d305      	bcc.n	c0045e2 <UART_SetConfig+0x6d2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c0045d6:	687b      	ldr	r3, [r7, #4]
 c0045d8:	685b      	ldr	r3, [r3, #4]
 c0045da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0045dc:	697a      	ldr	r2, [r7, #20]
 c0045de:	429a      	cmp	r2, r3
 c0045e0:	d903      	bls.n	c0045ea <UART_SetConfig+0x6da>
      {
        ret = HAL_ERROR;
 c0045e2:	2301      	movs	r3, #1
 c0045e4:	76fb      	strb	r3, [r7, #27]
 c0045e6:	f000 bf46 	b.w	c005476 <UART_SetConfig+0x1566>
      }
      else
      {
        switch (clocksource)
 c0045ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 c0045ee:	2b08      	cmp	r3, #8
 c0045f0:	f200 8318 	bhi.w	c004c24 <UART_SetConfig+0xd14>
 c0045f4:	a201      	add	r2, pc, #4	; (adr r2, c0045fc <UART_SetConfig+0x6ec>)
 c0045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0045fa:	bf00      	nop
 c0045fc:	0c004621 	.word	0x0c004621
 c004600:	0c00475f 	.word	0x0c00475f
 c004604:	0c00489d 	.word	0x0c00489d
 c004608:	0c004c25 	.word	0x0c004c25
 c00460c:	0c004993 	.word	0x0c004993
 c004610:	0c004c25 	.word	0x0c004c25
 c004614:	0c004c25 	.word	0x0c004c25
 c004618:	0c004c25 	.word	0x0c004c25
 c00461c:	0c004ad1 	.word	0x0c004ad1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 c004620:	f7fe fb82 	bl	c002d28 <HAL_RCC_GetPCLK1Freq>
 c004624:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004626:	693b      	ldr	r3, [r7, #16]
 c004628:	4618      	mov	r0, r3
 c00462a:	f04f 0100 	mov.w	r1, #0
 c00462e:	687b      	ldr	r3, [r7, #4]
 c004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004632:	2b00      	cmp	r3, #0
 c004634:	d067      	beq.n	c004706 <UART_SetConfig+0x7f6>
 c004636:	687b      	ldr	r3, [r7, #4]
 c004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00463a:	2b01      	cmp	r3, #1
 c00463c:	d05e      	beq.n	c0046fc <UART_SetConfig+0x7ec>
 c00463e:	687b      	ldr	r3, [r7, #4]
 c004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004642:	2b02      	cmp	r3, #2
 c004644:	d055      	beq.n	c0046f2 <UART_SetConfig+0x7e2>
 c004646:	687b      	ldr	r3, [r7, #4]
 c004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00464a:	2b03      	cmp	r3, #3
 c00464c:	d04c      	beq.n	c0046e8 <UART_SetConfig+0x7d8>
 c00464e:	687b      	ldr	r3, [r7, #4]
 c004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004652:	2b04      	cmp	r3, #4
 c004654:	d043      	beq.n	c0046de <UART_SetConfig+0x7ce>
 c004656:	687b      	ldr	r3, [r7, #4]
 c004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00465a:	2b05      	cmp	r3, #5
 c00465c:	d03a      	beq.n	c0046d4 <UART_SetConfig+0x7c4>
 c00465e:	687b      	ldr	r3, [r7, #4]
 c004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004662:	2b06      	cmp	r3, #6
 c004664:	d031      	beq.n	c0046ca <UART_SetConfig+0x7ba>
 c004666:	687b      	ldr	r3, [r7, #4]
 c004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00466a:	2b07      	cmp	r3, #7
 c00466c:	d028      	beq.n	c0046c0 <UART_SetConfig+0x7b0>
 c00466e:	687b      	ldr	r3, [r7, #4]
 c004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004672:	2b08      	cmp	r3, #8
 c004674:	d01f      	beq.n	c0046b6 <UART_SetConfig+0x7a6>
 c004676:	687b      	ldr	r3, [r7, #4]
 c004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00467a:	2b09      	cmp	r3, #9
 c00467c:	d016      	beq.n	c0046ac <UART_SetConfig+0x79c>
 c00467e:	687b      	ldr	r3, [r7, #4]
 c004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004682:	2b0a      	cmp	r3, #10
 c004684:	d00d      	beq.n	c0046a2 <UART_SetConfig+0x792>
 c004686:	687b      	ldr	r3, [r7, #4]
 c004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00468a:	2b0b      	cmp	r3, #11
 c00468c:	d104      	bne.n	c004698 <UART_SetConfig+0x788>
 c00468e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004692:	f04f 0400 	mov.w	r4, #0
 c004696:	e03a      	b.n	c00470e <UART_SetConfig+0x7fe>
 c004698:	f04f 0301 	mov.w	r3, #1
 c00469c:	f04f 0400 	mov.w	r4, #0
 c0046a0:	e035      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046a2:	f04f 0380 	mov.w	r3, #128	; 0x80
 c0046a6:	f04f 0400 	mov.w	r4, #0
 c0046aa:	e030      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 c0046b0:	f04f 0400 	mov.w	r4, #0
 c0046b4:	e02b      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046b6:	f04f 0320 	mov.w	r3, #32
 c0046ba:	f04f 0400 	mov.w	r4, #0
 c0046be:	e026      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046c0:	f04f 0310 	mov.w	r3, #16
 c0046c4:	f04f 0400 	mov.w	r4, #0
 c0046c8:	e021      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046ca:	f04f 030c 	mov.w	r3, #12
 c0046ce:	f04f 0400 	mov.w	r4, #0
 c0046d2:	e01c      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046d4:	f04f 030a 	mov.w	r3, #10
 c0046d8:	f04f 0400 	mov.w	r4, #0
 c0046dc:	e017      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046de:	f04f 0308 	mov.w	r3, #8
 c0046e2:	f04f 0400 	mov.w	r4, #0
 c0046e6:	e012      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046e8:	f04f 0306 	mov.w	r3, #6
 c0046ec:	f04f 0400 	mov.w	r4, #0
 c0046f0:	e00d      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046f2:	f04f 0304 	mov.w	r3, #4
 c0046f6:	f04f 0400 	mov.w	r4, #0
 c0046fa:	e008      	b.n	c00470e <UART_SetConfig+0x7fe>
 c0046fc:	f04f 0302 	mov.w	r3, #2
 c004700:	f04f 0400 	mov.w	r4, #0
 c004704:	e003      	b.n	c00470e <UART_SetConfig+0x7fe>
 c004706:	f04f 0301 	mov.w	r3, #1
 c00470a:	f04f 0400 	mov.w	r4, #0
 c00470e:	461a      	mov	r2, r3
 c004710:	4623      	mov	r3, r4
 c004712:	f7fb fdc7 	bl	c0002a4 <__aeabi_uldivmod>
 c004716:	4603      	mov	r3, r0
 c004718:	460c      	mov	r4, r1
 c00471a:	4619      	mov	r1, r3
 c00471c:	4622      	mov	r2, r4
 c00471e:	f04f 0300 	mov.w	r3, #0
 c004722:	f04f 0400 	mov.w	r4, #0
 c004726:	0214      	lsls	r4, r2, #8
 c004728:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 c00472c:	020b      	lsls	r3, r1, #8
 c00472e:	687a      	ldr	r2, [r7, #4]
 c004730:	6852      	ldr	r2, [r2, #4]
 c004732:	0852      	lsrs	r2, r2, #1
 c004734:	4611      	mov	r1, r2
 c004736:	f04f 0200 	mov.w	r2, #0
 c00473a:	eb13 0b01 	adds.w	fp, r3, r1
 c00473e:	eb44 0c02 	adc.w	ip, r4, r2
 c004742:	4658      	mov	r0, fp
 c004744:	4661      	mov	r1, ip
 c004746:	687b      	ldr	r3, [r7, #4]
 c004748:	685b      	ldr	r3, [r3, #4]
 c00474a:	f04f 0400 	mov.w	r4, #0
 c00474e:	461a      	mov	r2, r3
 c004750:	4623      	mov	r3, r4
 c004752:	f7fb fda7 	bl	c0002a4 <__aeabi_uldivmod>
 c004756:	4603      	mov	r3, r0
 c004758:	460c      	mov	r4, r1
 c00475a:	61fb      	str	r3, [r7, #28]
            break;
 c00475c:	e265      	b.n	c004c2a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_PCLK2:
            pclk = HAL_RCC_GetPCLK2Freq();
 c00475e:	f7fe faf7 	bl	c002d50 <HAL_RCC_GetPCLK2Freq>
 c004762:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004764:	693b      	ldr	r3, [r7, #16]
 c004766:	4618      	mov	r0, r3
 c004768:	f04f 0100 	mov.w	r1, #0
 c00476c:	687b      	ldr	r3, [r7, #4]
 c00476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004770:	2b00      	cmp	r3, #0
 c004772:	d067      	beq.n	c004844 <UART_SetConfig+0x934>
 c004774:	687b      	ldr	r3, [r7, #4]
 c004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004778:	2b01      	cmp	r3, #1
 c00477a:	d05e      	beq.n	c00483a <UART_SetConfig+0x92a>
 c00477c:	687b      	ldr	r3, [r7, #4]
 c00477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004780:	2b02      	cmp	r3, #2
 c004782:	d055      	beq.n	c004830 <UART_SetConfig+0x920>
 c004784:	687b      	ldr	r3, [r7, #4]
 c004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004788:	2b03      	cmp	r3, #3
 c00478a:	d04c      	beq.n	c004826 <UART_SetConfig+0x916>
 c00478c:	687b      	ldr	r3, [r7, #4]
 c00478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004790:	2b04      	cmp	r3, #4
 c004792:	d043      	beq.n	c00481c <UART_SetConfig+0x90c>
 c004794:	687b      	ldr	r3, [r7, #4]
 c004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004798:	2b05      	cmp	r3, #5
 c00479a:	d03a      	beq.n	c004812 <UART_SetConfig+0x902>
 c00479c:	687b      	ldr	r3, [r7, #4]
 c00479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0047a0:	2b06      	cmp	r3, #6
 c0047a2:	d031      	beq.n	c004808 <UART_SetConfig+0x8f8>
 c0047a4:	687b      	ldr	r3, [r7, #4]
 c0047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0047a8:	2b07      	cmp	r3, #7
 c0047aa:	d028      	beq.n	c0047fe <UART_SetConfig+0x8ee>
 c0047ac:	687b      	ldr	r3, [r7, #4]
 c0047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0047b0:	2b08      	cmp	r3, #8
 c0047b2:	d01f      	beq.n	c0047f4 <UART_SetConfig+0x8e4>
 c0047b4:	687b      	ldr	r3, [r7, #4]
 c0047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0047b8:	2b09      	cmp	r3, #9
 c0047ba:	d016      	beq.n	c0047ea <UART_SetConfig+0x8da>
 c0047bc:	687b      	ldr	r3, [r7, #4]
 c0047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0047c0:	2b0a      	cmp	r3, #10
 c0047c2:	d00d      	beq.n	c0047e0 <UART_SetConfig+0x8d0>
 c0047c4:	687b      	ldr	r3, [r7, #4]
 c0047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0047c8:	2b0b      	cmp	r3, #11
 c0047ca:	d104      	bne.n	c0047d6 <UART_SetConfig+0x8c6>
 c0047cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0047d0:	f04f 0400 	mov.w	r4, #0
 c0047d4:	e03a      	b.n	c00484c <UART_SetConfig+0x93c>
 c0047d6:	f04f 0301 	mov.w	r3, #1
 c0047da:	f04f 0400 	mov.w	r4, #0
 c0047de:	e035      	b.n	c00484c <UART_SetConfig+0x93c>
 c0047e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 c0047e4:	f04f 0400 	mov.w	r4, #0
 c0047e8:	e030      	b.n	c00484c <UART_SetConfig+0x93c>
 c0047ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 c0047ee:	f04f 0400 	mov.w	r4, #0
 c0047f2:	e02b      	b.n	c00484c <UART_SetConfig+0x93c>
 c0047f4:	f04f 0320 	mov.w	r3, #32
 c0047f8:	f04f 0400 	mov.w	r4, #0
 c0047fc:	e026      	b.n	c00484c <UART_SetConfig+0x93c>
 c0047fe:	f04f 0310 	mov.w	r3, #16
 c004802:	f04f 0400 	mov.w	r4, #0
 c004806:	e021      	b.n	c00484c <UART_SetConfig+0x93c>
 c004808:	f04f 030c 	mov.w	r3, #12
 c00480c:	f04f 0400 	mov.w	r4, #0
 c004810:	e01c      	b.n	c00484c <UART_SetConfig+0x93c>
 c004812:	f04f 030a 	mov.w	r3, #10
 c004816:	f04f 0400 	mov.w	r4, #0
 c00481a:	e017      	b.n	c00484c <UART_SetConfig+0x93c>
 c00481c:	f04f 0308 	mov.w	r3, #8
 c004820:	f04f 0400 	mov.w	r4, #0
 c004824:	e012      	b.n	c00484c <UART_SetConfig+0x93c>
 c004826:	f04f 0306 	mov.w	r3, #6
 c00482a:	f04f 0400 	mov.w	r4, #0
 c00482e:	e00d      	b.n	c00484c <UART_SetConfig+0x93c>
 c004830:	f04f 0304 	mov.w	r3, #4
 c004834:	f04f 0400 	mov.w	r4, #0
 c004838:	e008      	b.n	c00484c <UART_SetConfig+0x93c>
 c00483a:	f04f 0302 	mov.w	r3, #2
 c00483e:	f04f 0400 	mov.w	r4, #0
 c004842:	e003      	b.n	c00484c <UART_SetConfig+0x93c>
 c004844:	f04f 0301 	mov.w	r3, #1
 c004848:	f04f 0400 	mov.w	r4, #0
 c00484c:	461a      	mov	r2, r3
 c00484e:	4623      	mov	r3, r4
 c004850:	f7fb fd28 	bl	c0002a4 <__aeabi_uldivmod>
 c004854:	4603      	mov	r3, r0
 c004856:	460c      	mov	r4, r1
 c004858:	4619      	mov	r1, r3
 c00485a:	4622      	mov	r2, r4
 c00485c:	f04f 0300 	mov.w	r3, #0
 c004860:	f04f 0400 	mov.w	r4, #0
 c004864:	0214      	lsls	r4, r2, #8
 c004866:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 c00486a:	020b      	lsls	r3, r1, #8
 c00486c:	687a      	ldr	r2, [r7, #4]
 c00486e:	6852      	ldr	r2, [r2, #4]
 c004870:	0852      	lsrs	r2, r2, #1
 c004872:	4611      	mov	r1, r2
 c004874:	f04f 0200 	mov.w	r2, #0
 c004878:	eb13 0b01 	adds.w	fp, r3, r1
 c00487c:	eb44 0c02 	adc.w	ip, r4, r2
 c004880:	4658      	mov	r0, fp
 c004882:	4661      	mov	r1, ip
 c004884:	687b      	ldr	r3, [r7, #4]
 c004886:	685b      	ldr	r3, [r3, #4]
 c004888:	f04f 0400 	mov.w	r4, #0
 c00488c:	461a      	mov	r2, r3
 c00488e:	4623      	mov	r3, r4
 c004890:	f7fb fd08 	bl	c0002a4 <__aeabi_uldivmod>
 c004894:	4603      	mov	r3, r0
 c004896:	460c      	mov	r4, r1
 c004898:	61fb      	str	r3, [r7, #28]
            break;
 c00489a:	e1c6      	b.n	c004c2a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00489c:	687b      	ldr	r3, [r7, #4]
 c00489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048a0:	2b00      	cmp	r3, #0
 c0048a2:	d05b      	beq.n	c00495c <UART_SetConfig+0xa4c>
 c0048a4:	687b      	ldr	r3, [r7, #4]
 c0048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048a8:	2b01      	cmp	r3, #1
 c0048aa:	d053      	beq.n	c004954 <UART_SetConfig+0xa44>
 c0048ac:	687b      	ldr	r3, [r7, #4]
 c0048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048b0:	2b02      	cmp	r3, #2
 c0048b2:	d04b      	beq.n	c00494c <UART_SetConfig+0xa3c>
 c0048b4:	687b      	ldr	r3, [r7, #4]
 c0048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048b8:	2b03      	cmp	r3, #3
 c0048ba:	d043      	beq.n	c004944 <UART_SetConfig+0xa34>
 c0048bc:	687b      	ldr	r3, [r7, #4]
 c0048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048c0:	2b04      	cmp	r3, #4
 c0048c2:	d03b      	beq.n	c00493c <UART_SetConfig+0xa2c>
 c0048c4:	687b      	ldr	r3, [r7, #4]
 c0048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048c8:	2b05      	cmp	r3, #5
 c0048ca:	d033      	beq.n	c004934 <UART_SetConfig+0xa24>
 c0048cc:	687b      	ldr	r3, [r7, #4]
 c0048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048d0:	2b06      	cmp	r3, #6
 c0048d2:	d02b      	beq.n	c00492c <UART_SetConfig+0xa1c>
 c0048d4:	687b      	ldr	r3, [r7, #4]
 c0048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048d8:	2b07      	cmp	r3, #7
 c0048da:	d023      	beq.n	c004924 <UART_SetConfig+0xa14>
 c0048dc:	687b      	ldr	r3, [r7, #4]
 c0048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048e0:	2b08      	cmp	r3, #8
 c0048e2:	d01b      	beq.n	c00491c <UART_SetConfig+0xa0c>
 c0048e4:	687b      	ldr	r3, [r7, #4]
 c0048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048e8:	2b09      	cmp	r3, #9
 c0048ea:	d013      	beq.n	c004914 <UART_SetConfig+0xa04>
 c0048ec:	687b      	ldr	r3, [r7, #4]
 c0048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048f0:	2b0a      	cmp	r3, #10
 c0048f2:	d00b      	beq.n	c00490c <UART_SetConfig+0x9fc>
 c0048f4:	687b      	ldr	r3, [r7, #4]
 c0048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0048f8:	2b0b      	cmp	r3, #11
 c0048fa:	d103      	bne.n	c004904 <UART_SetConfig+0x9f4>
 c0048fc:	4bae      	ldr	r3, [pc, #696]	; (c004bb8 <UART_SetConfig+0xca8>)
 c0048fe:	f04f 0400 	mov.w	r4, #0
 c004902:	e02e      	b.n	c004962 <UART_SetConfig+0xa52>
 c004904:	4bad      	ldr	r3, [pc, #692]	; (c004bbc <UART_SetConfig+0xcac>)
 c004906:	f04f 0400 	mov.w	r4, #0
 c00490a:	e02a      	b.n	c004962 <UART_SetConfig+0xa52>
 c00490c:	4bac      	ldr	r3, [pc, #688]	; (c004bc0 <UART_SetConfig+0xcb0>)
 c00490e:	f04f 0400 	mov.w	r4, #0
 c004912:	e026      	b.n	c004962 <UART_SetConfig+0xa52>
 c004914:	4bab      	ldr	r3, [pc, #684]	; (c004bc4 <UART_SetConfig+0xcb4>)
 c004916:	f04f 0400 	mov.w	r4, #0
 c00491a:	e022      	b.n	c004962 <UART_SetConfig+0xa52>
 c00491c:	4baa      	ldr	r3, [pc, #680]	; (c004bc8 <UART_SetConfig+0xcb8>)
 c00491e:	f04f 0400 	mov.w	r4, #0
 c004922:	e01e      	b.n	c004962 <UART_SetConfig+0xa52>
 c004924:	4ba9      	ldr	r3, [pc, #676]	; (c004bcc <UART_SetConfig+0xcbc>)
 c004926:	f04f 0400 	mov.w	r4, #0
 c00492a:	e01a      	b.n	c004962 <UART_SetConfig+0xa52>
 c00492c:	a49e      	add	r4, pc, #632	; (adr r4, c004ba8 <UART_SetConfig+0xc98>)
 c00492e:	e9d4 3400 	ldrd	r3, r4, [r4]
 c004932:	e016      	b.n	c004962 <UART_SetConfig+0xa52>
 c004934:	4ba6      	ldr	r3, [pc, #664]	; (c004bd0 <UART_SetConfig+0xcc0>)
 c004936:	f04f 0400 	mov.w	r4, #0
 c00493a:	e012      	b.n	c004962 <UART_SetConfig+0xa52>
 c00493c:	4ba5      	ldr	r3, [pc, #660]	; (c004bd4 <UART_SetConfig+0xcc4>)
 c00493e:	f04f 0400 	mov.w	r4, #0
 c004942:	e00e      	b.n	c004962 <UART_SetConfig+0xa52>
 c004944:	a49a      	add	r4, pc, #616	; (adr r4, c004bb0 <UART_SetConfig+0xca0>)
 c004946:	e9d4 3400 	ldrd	r3, r4, [r4]
 c00494a:	e00a      	b.n	c004962 <UART_SetConfig+0xa52>
 c00494c:	4ba2      	ldr	r3, [pc, #648]	; (c004bd8 <UART_SetConfig+0xcc8>)
 c00494e:	f04f 0400 	mov.w	r4, #0
 c004952:	e006      	b.n	c004962 <UART_SetConfig+0xa52>
 c004954:	4ba1      	ldr	r3, [pc, #644]	; (c004bdc <UART_SetConfig+0xccc>)
 c004956:	f04f 0400 	mov.w	r4, #0
 c00495a:	e002      	b.n	c004962 <UART_SetConfig+0xa52>
 c00495c:	4b97      	ldr	r3, [pc, #604]	; (c004bbc <UART_SetConfig+0xcac>)
 c00495e:	f04f 0400 	mov.w	r4, #0
 c004962:	687a      	ldr	r2, [r7, #4]
 c004964:	6852      	ldr	r2, [r2, #4]
 c004966:	0852      	lsrs	r2, r2, #1
 c004968:	4611      	mov	r1, r2
 c00496a:	f04f 0200 	mov.w	r2, #0
 c00496e:	eb13 0b01 	adds.w	fp, r3, r1
 c004972:	eb44 0c02 	adc.w	ip, r4, r2
 c004976:	4658      	mov	r0, fp
 c004978:	4661      	mov	r1, ip
 c00497a:	687b      	ldr	r3, [r7, #4]
 c00497c:	685b      	ldr	r3, [r3, #4]
 c00497e:	f04f 0400 	mov.w	r4, #0
 c004982:	461a      	mov	r2, r3
 c004984:	4623      	mov	r3, r4
 c004986:	f7fb fc8d 	bl	c0002a4 <__aeabi_uldivmod>
 c00498a:	4603      	mov	r3, r0
 c00498c:	460c      	mov	r4, r1
 c00498e:	61fb      	str	r3, [r7, #28]
            break;
 c004990:	e14b      	b.n	c004c2a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 c004992:	f7fe f923 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c004996:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004998:	693b      	ldr	r3, [r7, #16]
 c00499a:	4618      	mov	r0, r3
 c00499c:	f04f 0100 	mov.w	r1, #0
 c0049a0:	687b      	ldr	r3, [r7, #4]
 c0049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049a4:	2b00      	cmp	r3, #0
 c0049a6:	d067      	beq.n	c004a78 <UART_SetConfig+0xb68>
 c0049a8:	687b      	ldr	r3, [r7, #4]
 c0049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049ac:	2b01      	cmp	r3, #1
 c0049ae:	d05e      	beq.n	c004a6e <UART_SetConfig+0xb5e>
 c0049b0:	687b      	ldr	r3, [r7, #4]
 c0049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049b4:	2b02      	cmp	r3, #2
 c0049b6:	d055      	beq.n	c004a64 <UART_SetConfig+0xb54>
 c0049b8:	687b      	ldr	r3, [r7, #4]
 c0049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049bc:	2b03      	cmp	r3, #3
 c0049be:	d04c      	beq.n	c004a5a <UART_SetConfig+0xb4a>
 c0049c0:	687b      	ldr	r3, [r7, #4]
 c0049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049c4:	2b04      	cmp	r3, #4
 c0049c6:	d043      	beq.n	c004a50 <UART_SetConfig+0xb40>
 c0049c8:	687b      	ldr	r3, [r7, #4]
 c0049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049cc:	2b05      	cmp	r3, #5
 c0049ce:	d03a      	beq.n	c004a46 <UART_SetConfig+0xb36>
 c0049d0:	687b      	ldr	r3, [r7, #4]
 c0049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049d4:	2b06      	cmp	r3, #6
 c0049d6:	d031      	beq.n	c004a3c <UART_SetConfig+0xb2c>
 c0049d8:	687b      	ldr	r3, [r7, #4]
 c0049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049dc:	2b07      	cmp	r3, #7
 c0049de:	d028      	beq.n	c004a32 <UART_SetConfig+0xb22>
 c0049e0:	687b      	ldr	r3, [r7, #4]
 c0049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049e4:	2b08      	cmp	r3, #8
 c0049e6:	d01f      	beq.n	c004a28 <UART_SetConfig+0xb18>
 c0049e8:	687b      	ldr	r3, [r7, #4]
 c0049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049ec:	2b09      	cmp	r3, #9
 c0049ee:	d016      	beq.n	c004a1e <UART_SetConfig+0xb0e>
 c0049f0:	687b      	ldr	r3, [r7, #4]
 c0049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049f4:	2b0a      	cmp	r3, #10
 c0049f6:	d00d      	beq.n	c004a14 <UART_SetConfig+0xb04>
 c0049f8:	687b      	ldr	r3, [r7, #4]
 c0049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049fc:	2b0b      	cmp	r3, #11
 c0049fe:	d104      	bne.n	c004a0a <UART_SetConfig+0xafa>
 c004a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004a04:	f04f 0400 	mov.w	r4, #0
 c004a08:	e03a      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a0a:	f04f 0301 	mov.w	r3, #1
 c004a0e:	f04f 0400 	mov.w	r4, #0
 c004a12:	e035      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a14:	f04f 0380 	mov.w	r3, #128	; 0x80
 c004a18:	f04f 0400 	mov.w	r4, #0
 c004a1c:	e030      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 c004a22:	f04f 0400 	mov.w	r4, #0
 c004a26:	e02b      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a28:	f04f 0320 	mov.w	r3, #32
 c004a2c:	f04f 0400 	mov.w	r4, #0
 c004a30:	e026      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a32:	f04f 0310 	mov.w	r3, #16
 c004a36:	f04f 0400 	mov.w	r4, #0
 c004a3a:	e021      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a3c:	f04f 030c 	mov.w	r3, #12
 c004a40:	f04f 0400 	mov.w	r4, #0
 c004a44:	e01c      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a46:	f04f 030a 	mov.w	r3, #10
 c004a4a:	f04f 0400 	mov.w	r4, #0
 c004a4e:	e017      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a50:	f04f 0308 	mov.w	r3, #8
 c004a54:	f04f 0400 	mov.w	r4, #0
 c004a58:	e012      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a5a:	f04f 0306 	mov.w	r3, #6
 c004a5e:	f04f 0400 	mov.w	r4, #0
 c004a62:	e00d      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a64:	f04f 0304 	mov.w	r3, #4
 c004a68:	f04f 0400 	mov.w	r4, #0
 c004a6c:	e008      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a6e:	f04f 0302 	mov.w	r3, #2
 c004a72:	f04f 0400 	mov.w	r4, #0
 c004a76:	e003      	b.n	c004a80 <UART_SetConfig+0xb70>
 c004a78:	f04f 0301 	mov.w	r3, #1
 c004a7c:	f04f 0400 	mov.w	r4, #0
 c004a80:	461a      	mov	r2, r3
 c004a82:	4623      	mov	r3, r4
 c004a84:	f7fb fc0e 	bl	c0002a4 <__aeabi_uldivmod>
 c004a88:	4603      	mov	r3, r0
 c004a8a:	460c      	mov	r4, r1
 c004a8c:	4619      	mov	r1, r3
 c004a8e:	4622      	mov	r2, r4
 c004a90:	f04f 0300 	mov.w	r3, #0
 c004a94:	f04f 0400 	mov.w	r4, #0
 c004a98:	0214      	lsls	r4, r2, #8
 c004a9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 c004a9e:	020b      	lsls	r3, r1, #8
 c004aa0:	687a      	ldr	r2, [r7, #4]
 c004aa2:	6852      	ldr	r2, [r2, #4]
 c004aa4:	0852      	lsrs	r2, r2, #1
 c004aa6:	4611      	mov	r1, r2
 c004aa8:	f04f 0200 	mov.w	r2, #0
 c004aac:	eb13 0b01 	adds.w	fp, r3, r1
 c004ab0:	eb44 0c02 	adc.w	ip, r4, r2
 c004ab4:	4658      	mov	r0, fp
 c004ab6:	4661      	mov	r1, ip
 c004ab8:	687b      	ldr	r3, [r7, #4]
 c004aba:	685b      	ldr	r3, [r3, #4]
 c004abc:	f04f 0400 	mov.w	r4, #0
 c004ac0:	461a      	mov	r2, r3
 c004ac2:	4623      	mov	r3, r4
 c004ac4:	f7fb fbee 	bl	c0002a4 <__aeabi_uldivmod>
 c004ac8:	4603      	mov	r3, r0
 c004aca:	460c      	mov	r4, r1
 c004acc:	61fb      	str	r3, [r7, #28]
            break;
 c004ace:	e0ac      	b.n	c004c2a <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004ad0:	687b      	ldr	r3, [r7, #4]
 c004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ad4:	2b00      	cmp	r3, #0
 c004ad6:	f000 8089 	beq.w	c004bec <UART_SetConfig+0xcdc>
 c004ada:	687b      	ldr	r3, [r7, #4]
 c004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ade:	2b01      	cmp	r3, #1
 c004ae0:	d05b      	beq.n	c004b9a <UART_SetConfig+0xc8a>
 c004ae2:	687b      	ldr	r3, [r7, #4]
 c004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ae6:	2b02      	cmp	r3, #2
 c004ae8:	d052      	beq.n	c004b90 <UART_SetConfig+0xc80>
 c004aea:	687b      	ldr	r3, [r7, #4]
 c004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004aee:	2b03      	cmp	r3, #3
 c004af0:	d04a      	beq.n	c004b88 <UART_SetConfig+0xc78>
 c004af2:	687b      	ldr	r3, [r7, #4]
 c004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004af6:	2b04      	cmp	r3, #4
 c004af8:	d041      	beq.n	c004b7e <UART_SetConfig+0xc6e>
 c004afa:	687b      	ldr	r3, [r7, #4]
 c004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004afe:	2b05      	cmp	r3, #5
 c004b00:	d039      	beq.n	c004b76 <UART_SetConfig+0xc66>
 c004b02:	687b      	ldr	r3, [r7, #4]
 c004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b06:	2b06      	cmp	r3, #6
 c004b08:	d031      	beq.n	c004b6e <UART_SetConfig+0xc5e>
 c004b0a:	687b      	ldr	r3, [r7, #4]
 c004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b0e:	2b07      	cmp	r3, #7
 c004b10:	d028      	beq.n	c004b64 <UART_SetConfig+0xc54>
 c004b12:	687b      	ldr	r3, [r7, #4]
 c004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b16:	2b08      	cmp	r3, #8
 c004b18:	d01f      	beq.n	c004b5a <UART_SetConfig+0xc4a>
 c004b1a:	687b      	ldr	r3, [r7, #4]
 c004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b1e:	2b09      	cmp	r3, #9
 c004b20:	d016      	beq.n	c004b50 <UART_SetConfig+0xc40>
 c004b22:	687b      	ldr	r3, [r7, #4]
 c004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b26:	2b0a      	cmp	r3, #10
 c004b28:	d00d      	beq.n	c004b46 <UART_SetConfig+0xc36>
 c004b2a:	687b      	ldr	r3, [r7, #4]
 c004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b2e:	2b0b      	cmp	r3, #11
 c004b30:	d104      	bne.n	c004b3c <UART_SetConfig+0xc2c>
 c004b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004b36:	f04f 0400 	mov.w	r4, #0
 c004b3a:	e05b      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 c004b40:	f04f 0400 	mov.w	r4, #0
 c004b44:	e056      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c004b4a:	f04f 0400 	mov.w	r4, #0
 c004b4e:	e051      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c004b54:	f04f 0400 	mov.w	r4, #0
 c004b58:	e04c      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c004b5e:	f04f 0400 	mov.w	r4, #0
 c004b62:	e047      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 c004b68:	f04f 0400 	mov.w	r4, #0
 c004b6c:	e042      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b6e:	4b1c      	ldr	r3, [pc, #112]	; (c004be0 <UART_SetConfig+0xcd0>)
 c004b70:	f04f 0400 	mov.w	r4, #0
 c004b74:	e03e      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b76:	4b1b      	ldr	r3, [pc, #108]	; (c004be4 <UART_SetConfig+0xcd4>)
 c004b78:	f04f 0400 	mov.w	r4, #0
 c004b7c:	e03a      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 c004b82:	f04f 0400 	mov.w	r4, #0
 c004b86:	e035      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b88:	4b17      	ldr	r3, [pc, #92]	; (c004be8 <UART_SetConfig+0xcd8>)
 c004b8a:	f04f 0400 	mov.w	r4, #0
 c004b8e:	e031      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 c004b94:	f04f 0400 	mov.w	r4, #0
 c004b98:	e02c      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 c004b9e:	f04f 0400 	mov.w	r4, #0
 c004ba2:	e027      	b.n	c004bf4 <UART_SetConfig+0xce4>
 c004ba4:	f3af 8000 	nop.w
 c004ba8:	14585500 	.word	0x14585500
 c004bac:	00000000 	.word	0x00000000
 c004bb0:	28b0aa00 	.word	0x28b0aa00
 c004bb4:	00000000 	.word	0x00000000
 c004bb8:	00f42400 	.word	0x00f42400
 c004bbc:	f4240000 	.word	0xf4240000
 c004bc0:	01e84800 	.word	0x01e84800
 c004bc4:	03d09000 	.word	0x03d09000
 c004bc8:	07a12000 	.word	0x07a12000
 c004bcc:	0f424000 	.word	0x0f424000
 c004bd0:	186a0000 	.word	0x186a0000
 c004bd4:	1e848000 	.word	0x1e848000
 c004bd8:	3d090000 	.word	0x3d090000
 c004bdc:	7a120000 	.word	0x7a120000
 c004be0:	000aaa00 	.word	0x000aaa00
 c004be4:	000ccc00 	.word	0x000ccc00
 c004be8:	00155500 	.word	0x00155500
 c004bec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 c004bf0:	f04f 0400 	mov.w	r4, #0
 c004bf4:	687a      	ldr	r2, [r7, #4]
 c004bf6:	6852      	ldr	r2, [r2, #4]
 c004bf8:	0852      	lsrs	r2, r2, #1
 c004bfa:	4611      	mov	r1, r2
 c004bfc:	f04f 0200 	mov.w	r2, #0
 c004c00:	eb13 0b01 	adds.w	fp, r3, r1
 c004c04:	eb44 0c02 	adc.w	ip, r4, r2
 c004c08:	4658      	mov	r0, fp
 c004c0a:	4661      	mov	r1, ip
 c004c0c:	687b      	ldr	r3, [r7, #4]
 c004c0e:	685b      	ldr	r3, [r3, #4]
 c004c10:	f04f 0400 	mov.w	r4, #0
 c004c14:	461a      	mov	r2, r3
 c004c16:	4623      	mov	r3, r4
 c004c18:	f7fb fb44 	bl	c0002a4 <__aeabi_uldivmod>
 c004c1c:	4603      	mov	r3, r0
 c004c1e:	460c      	mov	r4, r1
 c004c20:	61fb      	str	r3, [r7, #28]
            break;
 c004c22:	e002      	b.n	c004c2a <UART_SetConfig+0xd1a>
          default:
            ret = HAL_ERROR;
 c004c24:	2301      	movs	r3, #1
 c004c26:	76fb      	strb	r3, [r7, #27]
            break;
 c004c28:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c004c2a:	69fb      	ldr	r3, [r7, #28]
 c004c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004c30:	d309      	bcc.n	c004c46 <UART_SetConfig+0xd36>
 c004c32:	69fb      	ldr	r3, [r7, #28]
 c004c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004c38:	d205      	bcs.n	c004c46 <UART_SetConfig+0xd36>
        {
          huart->Instance->BRR = usartdiv;
 c004c3a:	687b      	ldr	r3, [r7, #4]
 c004c3c:	681b      	ldr	r3, [r3, #0]
 c004c3e:	69fa      	ldr	r2, [r7, #28]
 c004c40:	60da      	str	r2, [r3, #12]
 c004c42:	f000 bc18 	b.w	c005476 <UART_SetConfig+0x1566>
        }
        else
        {
          ret = HAL_ERROR;
 c004c46:	2301      	movs	r3, #1
 c004c48:	76fb      	strb	r3, [r7, #27]
 c004c4a:	f000 bc14 	b.w	c005476 <UART_SetConfig+0x1566>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c004c4e:	687b      	ldr	r3, [r7, #4]
 c004c50:	69db      	ldr	r3, [r3, #28]
 c004c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004c56:	f040 8204 	bne.w	c005062 <UART_SetConfig+0x1152>
  {
    switch (clocksource)
 c004c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 c004c5e:	2b08      	cmp	r3, #8
 c004c60:	f200 81df 	bhi.w	c005022 <UART_SetConfig+0x1112>
 c004c64:	a201      	add	r2, pc, #4	; (adr r2, c004c6c <UART_SetConfig+0xd5c>)
 c004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004c6a:	bf00      	nop
 c004c6c:	0c004c91 	.word	0x0c004c91
 c004c70:	0c004d49 	.word	0x0c004d49
 c004c74:	0c004e01 	.word	0x0c004e01
 c004c78:	0c005023 	.word	0x0c005023
 c004c7c:	0c004ea9 	.word	0x0c004ea9
 c004c80:	0c005023 	.word	0x0c005023
 c004c84:	0c005023 	.word	0x0c005023
 c004c88:	0c005023 	.word	0x0c005023
 c004c8c:	0c004f61 	.word	0x0c004f61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c004c90:	f7fe f84a 	bl	c002d28 <HAL_RCC_GetPCLK1Freq>
 c004c94:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004c96:	687b      	ldr	r3, [r7, #4]
 c004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004c9a:	2b00      	cmp	r3, #0
 c004c9c:	d044      	beq.n	c004d28 <UART_SetConfig+0xe18>
 c004c9e:	687b      	ldr	r3, [r7, #4]
 c004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ca2:	2b01      	cmp	r3, #1
 c004ca4:	d03e      	beq.n	c004d24 <UART_SetConfig+0xe14>
 c004ca6:	687b      	ldr	r3, [r7, #4]
 c004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004caa:	2b02      	cmp	r3, #2
 c004cac:	d038      	beq.n	c004d20 <UART_SetConfig+0xe10>
 c004cae:	687b      	ldr	r3, [r7, #4]
 c004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cb2:	2b03      	cmp	r3, #3
 c004cb4:	d032      	beq.n	c004d1c <UART_SetConfig+0xe0c>
 c004cb6:	687b      	ldr	r3, [r7, #4]
 c004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cba:	2b04      	cmp	r3, #4
 c004cbc:	d02c      	beq.n	c004d18 <UART_SetConfig+0xe08>
 c004cbe:	687b      	ldr	r3, [r7, #4]
 c004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cc2:	2b05      	cmp	r3, #5
 c004cc4:	d026      	beq.n	c004d14 <UART_SetConfig+0xe04>
 c004cc6:	687b      	ldr	r3, [r7, #4]
 c004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cca:	2b06      	cmp	r3, #6
 c004ccc:	d020      	beq.n	c004d10 <UART_SetConfig+0xe00>
 c004cce:	687b      	ldr	r3, [r7, #4]
 c004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cd2:	2b07      	cmp	r3, #7
 c004cd4:	d01a      	beq.n	c004d0c <UART_SetConfig+0xdfc>
 c004cd6:	687b      	ldr	r3, [r7, #4]
 c004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cda:	2b08      	cmp	r3, #8
 c004cdc:	d014      	beq.n	c004d08 <UART_SetConfig+0xdf8>
 c004cde:	687b      	ldr	r3, [r7, #4]
 c004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ce2:	2b09      	cmp	r3, #9
 c004ce4:	d00e      	beq.n	c004d04 <UART_SetConfig+0xdf4>
 c004ce6:	687b      	ldr	r3, [r7, #4]
 c004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cea:	2b0a      	cmp	r3, #10
 c004cec:	d008      	beq.n	c004d00 <UART_SetConfig+0xdf0>
 c004cee:	687b      	ldr	r3, [r7, #4]
 c004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cf2:	2b0b      	cmp	r3, #11
 c004cf4:	d102      	bne.n	c004cfc <UART_SetConfig+0xdec>
 c004cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004cfa:	e016      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004cfc:	2301      	movs	r3, #1
 c004cfe:	e014      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d00:	2380      	movs	r3, #128	; 0x80
 c004d02:	e012      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d04:	2340      	movs	r3, #64	; 0x40
 c004d06:	e010      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d08:	2320      	movs	r3, #32
 c004d0a:	e00e      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d0c:	2310      	movs	r3, #16
 c004d0e:	e00c      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d10:	230c      	movs	r3, #12
 c004d12:	e00a      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d14:	230a      	movs	r3, #10
 c004d16:	e008      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d18:	2308      	movs	r3, #8
 c004d1a:	e006      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d1c:	2306      	movs	r3, #6
 c004d1e:	e004      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d20:	2304      	movs	r3, #4
 c004d22:	e002      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d24:	2302      	movs	r3, #2
 c004d26:	e000      	b.n	c004d2a <UART_SetConfig+0xe1a>
 c004d28:	2301      	movs	r3, #1
 c004d2a:	693a      	ldr	r2, [r7, #16]
 c004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 c004d30:	005a      	lsls	r2, r3, #1
 c004d32:	687b      	ldr	r3, [r7, #4]
 c004d34:	685b      	ldr	r3, [r3, #4]
 c004d36:	085b      	lsrs	r3, r3, #1
 c004d38:	441a      	add	r2, r3
 c004d3a:	687b      	ldr	r3, [r7, #4]
 c004d3c:	685b      	ldr	r3, [r3, #4]
 c004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 c004d42:	b29b      	uxth	r3, r3
 c004d44:	61fb      	str	r3, [r7, #28]
        break;
 c004d46:	e16f      	b.n	c005028 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c004d48:	f7fe f802 	bl	c002d50 <HAL_RCC_GetPCLK2Freq>
 c004d4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004d4e:	687b      	ldr	r3, [r7, #4]
 c004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d52:	2b00      	cmp	r3, #0
 c004d54:	d044      	beq.n	c004de0 <UART_SetConfig+0xed0>
 c004d56:	687b      	ldr	r3, [r7, #4]
 c004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d5a:	2b01      	cmp	r3, #1
 c004d5c:	d03e      	beq.n	c004ddc <UART_SetConfig+0xecc>
 c004d5e:	687b      	ldr	r3, [r7, #4]
 c004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d62:	2b02      	cmp	r3, #2
 c004d64:	d038      	beq.n	c004dd8 <UART_SetConfig+0xec8>
 c004d66:	687b      	ldr	r3, [r7, #4]
 c004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d6a:	2b03      	cmp	r3, #3
 c004d6c:	d032      	beq.n	c004dd4 <UART_SetConfig+0xec4>
 c004d6e:	687b      	ldr	r3, [r7, #4]
 c004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d72:	2b04      	cmp	r3, #4
 c004d74:	d02c      	beq.n	c004dd0 <UART_SetConfig+0xec0>
 c004d76:	687b      	ldr	r3, [r7, #4]
 c004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d7a:	2b05      	cmp	r3, #5
 c004d7c:	d026      	beq.n	c004dcc <UART_SetConfig+0xebc>
 c004d7e:	687b      	ldr	r3, [r7, #4]
 c004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d82:	2b06      	cmp	r3, #6
 c004d84:	d020      	beq.n	c004dc8 <UART_SetConfig+0xeb8>
 c004d86:	687b      	ldr	r3, [r7, #4]
 c004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d8a:	2b07      	cmp	r3, #7
 c004d8c:	d01a      	beq.n	c004dc4 <UART_SetConfig+0xeb4>
 c004d8e:	687b      	ldr	r3, [r7, #4]
 c004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d92:	2b08      	cmp	r3, #8
 c004d94:	d014      	beq.n	c004dc0 <UART_SetConfig+0xeb0>
 c004d96:	687b      	ldr	r3, [r7, #4]
 c004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d9a:	2b09      	cmp	r3, #9
 c004d9c:	d00e      	beq.n	c004dbc <UART_SetConfig+0xeac>
 c004d9e:	687b      	ldr	r3, [r7, #4]
 c004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004da2:	2b0a      	cmp	r3, #10
 c004da4:	d008      	beq.n	c004db8 <UART_SetConfig+0xea8>
 c004da6:	687b      	ldr	r3, [r7, #4]
 c004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004daa:	2b0b      	cmp	r3, #11
 c004dac:	d102      	bne.n	c004db4 <UART_SetConfig+0xea4>
 c004dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004db2:	e016      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004db4:	2301      	movs	r3, #1
 c004db6:	e014      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004db8:	2380      	movs	r3, #128	; 0x80
 c004dba:	e012      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dbc:	2340      	movs	r3, #64	; 0x40
 c004dbe:	e010      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dc0:	2320      	movs	r3, #32
 c004dc2:	e00e      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dc4:	2310      	movs	r3, #16
 c004dc6:	e00c      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dc8:	230c      	movs	r3, #12
 c004dca:	e00a      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dcc:	230a      	movs	r3, #10
 c004dce:	e008      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dd0:	2308      	movs	r3, #8
 c004dd2:	e006      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dd4:	2306      	movs	r3, #6
 c004dd6:	e004      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004dd8:	2304      	movs	r3, #4
 c004dda:	e002      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004ddc:	2302      	movs	r3, #2
 c004dde:	e000      	b.n	c004de2 <UART_SetConfig+0xed2>
 c004de0:	2301      	movs	r3, #1
 c004de2:	693a      	ldr	r2, [r7, #16]
 c004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 c004de8:	005a      	lsls	r2, r3, #1
 c004dea:	687b      	ldr	r3, [r7, #4]
 c004dec:	685b      	ldr	r3, [r3, #4]
 c004dee:	085b      	lsrs	r3, r3, #1
 c004df0:	441a      	add	r2, r3
 c004df2:	687b      	ldr	r3, [r7, #4]
 c004df4:	685b      	ldr	r3, [r3, #4]
 c004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 c004dfa:	b29b      	uxth	r3, r3
 c004dfc:	61fb      	str	r3, [r7, #28]
        break;
 c004dfe:	e113      	b.n	c005028 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004e00:	687b      	ldr	r3, [r7, #4]
 c004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e04:	2b00      	cmp	r3, #0
 c004e06:	d043      	beq.n	c004e90 <UART_SetConfig+0xf80>
 c004e08:	687b      	ldr	r3, [r7, #4]
 c004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e0c:	2b01      	cmp	r3, #1
 c004e0e:	d03d      	beq.n	c004e8c <UART_SetConfig+0xf7c>
 c004e10:	687b      	ldr	r3, [r7, #4]
 c004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e14:	2b02      	cmp	r3, #2
 c004e16:	d037      	beq.n	c004e88 <UART_SetConfig+0xf78>
 c004e18:	687b      	ldr	r3, [r7, #4]
 c004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e1c:	2b03      	cmp	r3, #3
 c004e1e:	d031      	beq.n	c004e84 <UART_SetConfig+0xf74>
 c004e20:	687b      	ldr	r3, [r7, #4]
 c004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e24:	2b04      	cmp	r3, #4
 c004e26:	d02b      	beq.n	c004e80 <UART_SetConfig+0xf70>
 c004e28:	687b      	ldr	r3, [r7, #4]
 c004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e2c:	2b05      	cmp	r3, #5
 c004e2e:	d025      	beq.n	c004e7c <UART_SetConfig+0xf6c>
 c004e30:	687b      	ldr	r3, [r7, #4]
 c004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e34:	2b06      	cmp	r3, #6
 c004e36:	d01f      	beq.n	c004e78 <UART_SetConfig+0xf68>
 c004e38:	687b      	ldr	r3, [r7, #4]
 c004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e3c:	2b07      	cmp	r3, #7
 c004e3e:	d019      	beq.n	c004e74 <UART_SetConfig+0xf64>
 c004e40:	687b      	ldr	r3, [r7, #4]
 c004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e44:	2b08      	cmp	r3, #8
 c004e46:	d013      	beq.n	c004e70 <UART_SetConfig+0xf60>
 c004e48:	687b      	ldr	r3, [r7, #4]
 c004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e4c:	2b09      	cmp	r3, #9
 c004e4e:	d00d      	beq.n	c004e6c <UART_SetConfig+0xf5c>
 c004e50:	687b      	ldr	r3, [r7, #4]
 c004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e54:	2b0a      	cmp	r3, #10
 c004e56:	d007      	beq.n	c004e68 <UART_SetConfig+0xf58>
 c004e58:	687b      	ldr	r3, [r7, #4]
 c004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e5c:	2b0b      	cmp	r3, #11
 c004e5e:	d101      	bne.n	c004e64 <UART_SetConfig+0xf54>
 c004e60:	4b8d      	ldr	r3, [pc, #564]	; (c005098 <UART_SetConfig+0x1188>)
 c004e62:	e016      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e64:	4b8d      	ldr	r3, [pc, #564]	; (c00509c <UART_SetConfig+0x118c>)
 c004e66:	e014      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e68:	4b8d      	ldr	r3, [pc, #564]	; (c0050a0 <UART_SetConfig+0x1190>)
 c004e6a:	e012      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e6c:	4b8d      	ldr	r3, [pc, #564]	; (c0050a4 <UART_SetConfig+0x1194>)
 c004e6e:	e010      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e70:	4b8d      	ldr	r3, [pc, #564]	; (c0050a8 <UART_SetConfig+0x1198>)
 c004e72:	e00e      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e74:	4b8d      	ldr	r3, [pc, #564]	; (c0050ac <UART_SetConfig+0x119c>)
 c004e76:	e00c      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e78:	4b8d      	ldr	r3, [pc, #564]	; (c0050b0 <UART_SetConfig+0x11a0>)
 c004e7a:	e00a      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e7c:	4b8d      	ldr	r3, [pc, #564]	; (c0050b4 <UART_SetConfig+0x11a4>)
 c004e7e:	e008      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e80:	4b8d      	ldr	r3, [pc, #564]	; (c0050b8 <UART_SetConfig+0x11a8>)
 c004e82:	e006      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e84:	4b8d      	ldr	r3, [pc, #564]	; (c0050bc <UART_SetConfig+0x11ac>)
 c004e86:	e004      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e88:	4b8d      	ldr	r3, [pc, #564]	; (c0050c0 <UART_SetConfig+0x11b0>)
 c004e8a:	e002      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e8c:	4b8d      	ldr	r3, [pc, #564]	; (c0050c4 <UART_SetConfig+0x11b4>)
 c004e8e:	e000      	b.n	c004e92 <UART_SetConfig+0xf82>
 c004e90:	4b82      	ldr	r3, [pc, #520]	; (c00509c <UART_SetConfig+0x118c>)
 c004e92:	687a      	ldr	r2, [r7, #4]
 c004e94:	6852      	ldr	r2, [r2, #4]
 c004e96:	0852      	lsrs	r2, r2, #1
 c004e98:	441a      	add	r2, r3
 c004e9a:	687b      	ldr	r3, [r7, #4]
 c004e9c:	685b      	ldr	r3, [r3, #4]
 c004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 c004ea2:	b29b      	uxth	r3, r3
 c004ea4:	61fb      	str	r3, [r7, #28]
        break;
 c004ea6:	e0bf      	b.n	c005028 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c004ea8:	f7fd fe98 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c004eac:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004eae:	687b      	ldr	r3, [r7, #4]
 c004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004eb2:	2b00      	cmp	r3, #0
 c004eb4:	d044      	beq.n	c004f40 <UART_SetConfig+0x1030>
 c004eb6:	687b      	ldr	r3, [r7, #4]
 c004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004eba:	2b01      	cmp	r3, #1
 c004ebc:	d03e      	beq.n	c004f3c <UART_SetConfig+0x102c>
 c004ebe:	687b      	ldr	r3, [r7, #4]
 c004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ec2:	2b02      	cmp	r3, #2
 c004ec4:	d038      	beq.n	c004f38 <UART_SetConfig+0x1028>
 c004ec6:	687b      	ldr	r3, [r7, #4]
 c004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004eca:	2b03      	cmp	r3, #3
 c004ecc:	d032      	beq.n	c004f34 <UART_SetConfig+0x1024>
 c004ece:	687b      	ldr	r3, [r7, #4]
 c004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ed2:	2b04      	cmp	r3, #4
 c004ed4:	d02c      	beq.n	c004f30 <UART_SetConfig+0x1020>
 c004ed6:	687b      	ldr	r3, [r7, #4]
 c004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004eda:	2b05      	cmp	r3, #5
 c004edc:	d026      	beq.n	c004f2c <UART_SetConfig+0x101c>
 c004ede:	687b      	ldr	r3, [r7, #4]
 c004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ee2:	2b06      	cmp	r3, #6
 c004ee4:	d020      	beq.n	c004f28 <UART_SetConfig+0x1018>
 c004ee6:	687b      	ldr	r3, [r7, #4]
 c004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004eea:	2b07      	cmp	r3, #7
 c004eec:	d01a      	beq.n	c004f24 <UART_SetConfig+0x1014>
 c004eee:	687b      	ldr	r3, [r7, #4]
 c004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ef2:	2b08      	cmp	r3, #8
 c004ef4:	d014      	beq.n	c004f20 <UART_SetConfig+0x1010>
 c004ef6:	687b      	ldr	r3, [r7, #4]
 c004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004efa:	2b09      	cmp	r3, #9
 c004efc:	d00e      	beq.n	c004f1c <UART_SetConfig+0x100c>
 c004efe:	687b      	ldr	r3, [r7, #4]
 c004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f02:	2b0a      	cmp	r3, #10
 c004f04:	d008      	beq.n	c004f18 <UART_SetConfig+0x1008>
 c004f06:	687b      	ldr	r3, [r7, #4]
 c004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f0a:	2b0b      	cmp	r3, #11
 c004f0c:	d102      	bne.n	c004f14 <UART_SetConfig+0x1004>
 c004f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004f12:	e016      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f14:	2301      	movs	r3, #1
 c004f16:	e014      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f18:	2380      	movs	r3, #128	; 0x80
 c004f1a:	e012      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f1c:	2340      	movs	r3, #64	; 0x40
 c004f1e:	e010      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f20:	2320      	movs	r3, #32
 c004f22:	e00e      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f24:	2310      	movs	r3, #16
 c004f26:	e00c      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f28:	230c      	movs	r3, #12
 c004f2a:	e00a      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f2c:	230a      	movs	r3, #10
 c004f2e:	e008      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f30:	2308      	movs	r3, #8
 c004f32:	e006      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f34:	2306      	movs	r3, #6
 c004f36:	e004      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f38:	2304      	movs	r3, #4
 c004f3a:	e002      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f3c:	2302      	movs	r3, #2
 c004f3e:	e000      	b.n	c004f42 <UART_SetConfig+0x1032>
 c004f40:	2301      	movs	r3, #1
 c004f42:	693a      	ldr	r2, [r7, #16]
 c004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 c004f48:	005a      	lsls	r2, r3, #1
 c004f4a:	687b      	ldr	r3, [r7, #4]
 c004f4c:	685b      	ldr	r3, [r3, #4]
 c004f4e:	085b      	lsrs	r3, r3, #1
 c004f50:	441a      	add	r2, r3
 c004f52:	687b      	ldr	r3, [r7, #4]
 c004f54:	685b      	ldr	r3, [r3, #4]
 c004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 c004f5a:	b29b      	uxth	r3, r3
 c004f5c:	61fb      	str	r3, [r7, #28]
        break;
 c004f5e:	e063      	b.n	c005028 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004f60:	687b      	ldr	r3, [r7, #4]
 c004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f64:	2b00      	cmp	r3, #0
 c004f66:	d04f      	beq.n	c005008 <UART_SetConfig+0x10f8>
 c004f68:	687b      	ldr	r3, [r7, #4]
 c004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f6c:	2b01      	cmp	r3, #1
 c004f6e:	d048      	beq.n	c005002 <UART_SetConfig+0x10f2>
 c004f70:	687b      	ldr	r3, [r7, #4]
 c004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f74:	2b02      	cmp	r3, #2
 c004f76:	d041      	beq.n	c004ffc <UART_SetConfig+0x10ec>
 c004f78:	687b      	ldr	r3, [r7, #4]
 c004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f7c:	2b03      	cmp	r3, #3
 c004f7e:	d03a      	beq.n	c004ff6 <UART_SetConfig+0x10e6>
 c004f80:	687b      	ldr	r3, [r7, #4]
 c004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f84:	2b04      	cmp	r3, #4
 c004f86:	d033      	beq.n	c004ff0 <UART_SetConfig+0x10e0>
 c004f88:	687b      	ldr	r3, [r7, #4]
 c004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f8c:	2b05      	cmp	r3, #5
 c004f8e:	d02c      	beq.n	c004fea <UART_SetConfig+0x10da>
 c004f90:	687b      	ldr	r3, [r7, #4]
 c004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f94:	2b06      	cmp	r3, #6
 c004f96:	d025      	beq.n	c004fe4 <UART_SetConfig+0x10d4>
 c004f98:	687b      	ldr	r3, [r7, #4]
 c004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f9c:	2b07      	cmp	r3, #7
 c004f9e:	d01e      	beq.n	c004fde <UART_SetConfig+0x10ce>
 c004fa0:	687b      	ldr	r3, [r7, #4]
 c004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004fa4:	2b08      	cmp	r3, #8
 c004fa6:	d017      	beq.n	c004fd8 <UART_SetConfig+0x10c8>
 c004fa8:	687b      	ldr	r3, [r7, #4]
 c004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004fac:	2b09      	cmp	r3, #9
 c004fae:	d010      	beq.n	c004fd2 <UART_SetConfig+0x10c2>
 c004fb0:	687b      	ldr	r3, [r7, #4]
 c004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004fb4:	2b0a      	cmp	r3, #10
 c004fb6:	d009      	beq.n	c004fcc <UART_SetConfig+0x10bc>
 c004fb8:	687b      	ldr	r3, [r7, #4]
 c004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004fbc:	2b0b      	cmp	r3, #11
 c004fbe:	d102      	bne.n	c004fc6 <UART_SetConfig+0x10b6>
 c004fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 c004fc4:	e022      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c004fca:	e01f      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 c004fd0:	e01c      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c004fd6:	e019      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c004fdc:	e016      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c004fe2:	e013      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fe4:	f241 5354 	movw	r3, #5460	; 0x1554
 c004fe8:	e010      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004fea:	f641 1398 	movw	r3, #6552	; 0x1998
 c004fee:	e00d      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c004ff4:	e00a      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004ff6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 c004ffa:	e007      	b.n	c00500c <UART_SetConfig+0x10fc>
 c004ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c005000:	e004      	b.n	c00500c <UART_SetConfig+0x10fc>
 c005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005006:	e001      	b.n	c00500c <UART_SetConfig+0x10fc>
 c005008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00500c:	687a      	ldr	r2, [r7, #4]
 c00500e:	6852      	ldr	r2, [r2, #4]
 c005010:	0852      	lsrs	r2, r2, #1
 c005012:	441a      	add	r2, r3
 c005014:	687b      	ldr	r3, [r7, #4]
 c005016:	685b      	ldr	r3, [r3, #4]
 c005018:	fbb2 f3f3 	udiv	r3, r2, r3
 c00501c:	b29b      	uxth	r3, r3
 c00501e:	61fb      	str	r3, [r7, #28]
        break;
 c005020:	e002      	b.n	c005028 <UART_SetConfig+0x1118>
      default:
        ret = HAL_ERROR;
 c005022:	2301      	movs	r3, #1
 c005024:	76fb      	strb	r3, [r7, #27]
        break;
 c005026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c005028:	69fb      	ldr	r3, [r7, #28]
 c00502a:	2b0f      	cmp	r3, #15
 c00502c:	d916      	bls.n	c00505c <UART_SetConfig+0x114c>
 c00502e:	69fb      	ldr	r3, [r7, #28]
 c005030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005034:	d212      	bcs.n	c00505c <UART_SetConfig+0x114c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c005036:	69fb      	ldr	r3, [r7, #28]
 c005038:	b29b      	uxth	r3, r3
 c00503a:	f023 030f 	bic.w	r3, r3, #15
 c00503e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c005040:	69fb      	ldr	r3, [r7, #28]
 c005042:	085b      	lsrs	r3, r3, #1
 c005044:	b29b      	uxth	r3, r3
 c005046:	f003 0307 	and.w	r3, r3, #7
 c00504a:	b29a      	uxth	r2, r3
 c00504c:	89fb      	ldrh	r3, [r7, #14]
 c00504e:	4313      	orrs	r3, r2
 c005050:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 c005052:	687b      	ldr	r3, [r7, #4]
 c005054:	681b      	ldr	r3, [r3, #0]
 c005056:	89fa      	ldrh	r2, [r7, #14]
 c005058:	60da      	str	r2, [r3, #12]
 c00505a:	e20c      	b.n	c005476 <UART_SetConfig+0x1566>
    }
    else
    {
      ret = HAL_ERROR;
 c00505c:	2301      	movs	r3, #1
 c00505e:	76fb      	strb	r3, [r7, #27]
 c005060:	e209      	b.n	c005476 <UART_SetConfig+0x1566>
    }
  }
  else
  {
    switch (clocksource)
 c005062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 c005066:	2b08      	cmp	r3, #8
 c005068:	f200 81f4 	bhi.w	c005454 <UART_SetConfig+0x1544>
 c00506c:	a201      	add	r2, pc, #4	; (adr r2, c005074 <UART_SetConfig+0x1164>)
 c00506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005072:	bf00      	nop
 c005074:	0c0050c9 	.word	0x0c0050c9
 c005078:	0c00517f 	.word	0x0c00517f
 c00507c:	0c005235 	.word	0x0c005235
 c005080:	0c005455 	.word	0x0c005455
 c005084:	0c0052df 	.word	0x0c0052df
 c005088:	0c005455 	.word	0x0c005455
 c00508c:	0c005455 	.word	0x0c005455
 c005090:	0c005455 	.word	0x0c005455
 c005094:	0c005395 	.word	0x0c005395
 c005098:	0001e848 	.word	0x0001e848
 c00509c:	01e84800 	.word	0x01e84800
 c0050a0:	0003d090 	.word	0x0003d090
 c0050a4:	0007a120 	.word	0x0007a120
 c0050a8:	000f4240 	.word	0x000f4240
 c0050ac:	001e8480 	.word	0x001e8480
 c0050b0:	0028b0aa 	.word	0x0028b0aa
 c0050b4:	0030d400 	.word	0x0030d400
 c0050b8:	003d0900 	.word	0x003d0900
 c0050bc:	00516154 	.word	0x00516154
 c0050c0:	007a1200 	.word	0x007a1200
 c0050c4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0050c8:	f7fd fe2e 	bl	c002d28 <HAL_RCC_GetPCLK1Freq>
 c0050cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0050ce:	687b      	ldr	r3, [r7, #4]
 c0050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050d2:	2b00      	cmp	r3, #0
 c0050d4:	d044      	beq.n	c005160 <UART_SetConfig+0x1250>
 c0050d6:	687b      	ldr	r3, [r7, #4]
 c0050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050da:	2b01      	cmp	r3, #1
 c0050dc:	d03e      	beq.n	c00515c <UART_SetConfig+0x124c>
 c0050de:	687b      	ldr	r3, [r7, #4]
 c0050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050e2:	2b02      	cmp	r3, #2
 c0050e4:	d038      	beq.n	c005158 <UART_SetConfig+0x1248>
 c0050e6:	687b      	ldr	r3, [r7, #4]
 c0050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050ea:	2b03      	cmp	r3, #3
 c0050ec:	d032      	beq.n	c005154 <UART_SetConfig+0x1244>
 c0050ee:	687b      	ldr	r3, [r7, #4]
 c0050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050f2:	2b04      	cmp	r3, #4
 c0050f4:	d02c      	beq.n	c005150 <UART_SetConfig+0x1240>
 c0050f6:	687b      	ldr	r3, [r7, #4]
 c0050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050fa:	2b05      	cmp	r3, #5
 c0050fc:	d026      	beq.n	c00514c <UART_SetConfig+0x123c>
 c0050fe:	687b      	ldr	r3, [r7, #4]
 c005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005102:	2b06      	cmp	r3, #6
 c005104:	d020      	beq.n	c005148 <UART_SetConfig+0x1238>
 c005106:	687b      	ldr	r3, [r7, #4]
 c005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00510a:	2b07      	cmp	r3, #7
 c00510c:	d01a      	beq.n	c005144 <UART_SetConfig+0x1234>
 c00510e:	687b      	ldr	r3, [r7, #4]
 c005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005112:	2b08      	cmp	r3, #8
 c005114:	d014      	beq.n	c005140 <UART_SetConfig+0x1230>
 c005116:	687b      	ldr	r3, [r7, #4]
 c005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00511a:	2b09      	cmp	r3, #9
 c00511c:	d00e      	beq.n	c00513c <UART_SetConfig+0x122c>
 c00511e:	687b      	ldr	r3, [r7, #4]
 c005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005122:	2b0a      	cmp	r3, #10
 c005124:	d008      	beq.n	c005138 <UART_SetConfig+0x1228>
 c005126:	687b      	ldr	r3, [r7, #4]
 c005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00512a:	2b0b      	cmp	r3, #11
 c00512c:	d102      	bne.n	c005134 <UART_SetConfig+0x1224>
 c00512e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c005132:	e016      	b.n	c005162 <UART_SetConfig+0x1252>
 c005134:	2301      	movs	r3, #1
 c005136:	e014      	b.n	c005162 <UART_SetConfig+0x1252>
 c005138:	2380      	movs	r3, #128	; 0x80
 c00513a:	e012      	b.n	c005162 <UART_SetConfig+0x1252>
 c00513c:	2340      	movs	r3, #64	; 0x40
 c00513e:	e010      	b.n	c005162 <UART_SetConfig+0x1252>
 c005140:	2320      	movs	r3, #32
 c005142:	e00e      	b.n	c005162 <UART_SetConfig+0x1252>
 c005144:	2310      	movs	r3, #16
 c005146:	e00c      	b.n	c005162 <UART_SetConfig+0x1252>
 c005148:	230c      	movs	r3, #12
 c00514a:	e00a      	b.n	c005162 <UART_SetConfig+0x1252>
 c00514c:	230a      	movs	r3, #10
 c00514e:	e008      	b.n	c005162 <UART_SetConfig+0x1252>
 c005150:	2308      	movs	r3, #8
 c005152:	e006      	b.n	c005162 <UART_SetConfig+0x1252>
 c005154:	2306      	movs	r3, #6
 c005156:	e004      	b.n	c005162 <UART_SetConfig+0x1252>
 c005158:	2304      	movs	r3, #4
 c00515a:	e002      	b.n	c005162 <UART_SetConfig+0x1252>
 c00515c:	2302      	movs	r3, #2
 c00515e:	e000      	b.n	c005162 <UART_SetConfig+0x1252>
 c005160:	2301      	movs	r3, #1
 c005162:	693a      	ldr	r2, [r7, #16]
 c005164:	fbb2 f2f3 	udiv	r2, r2, r3
 c005168:	687b      	ldr	r3, [r7, #4]
 c00516a:	685b      	ldr	r3, [r3, #4]
 c00516c:	085b      	lsrs	r3, r3, #1
 c00516e:	441a      	add	r2, r3
 c005170:	687b      	ldr	r3, [r7, #4]
 c005172:	685b      	ldr	r3, [r3, #4]
 c005174:	fbb2 f3f3 	udiv	r3, r2, r3
 c005178:	b29b      	uxth	r3, r3
 c00517a:	61fb      	str	r3, [r7, #28]
        break;
 c00517c:	e16d      	b.n	c00545a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c00517e:	f7fd fde7 	bl	c002d50 <HAL_RCC_GetPCLK2Freq>
 c005182:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005184:	687b      	ldr	r3, [r7, #4]
 c005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005188:	2b00      	cmp	r3, #0
 c00518a:	d044      	beq.n	c005216 <UART_SetConfig+0x1306>
 c00518c:	687b      	ldr	r3, [r7, #4]
 c00518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005190:	2b01      	cmp	r3, #1
 c005192:	d03e      	beq.n	c005212 <UART_SetConfig+0x1302>
 c005194:	687b      	ldr	r3, [r7, #4]
 c005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005198:	2b02      	cmp	r3, #2
 c00519a:	d038      	beq.n	c00520e <UART_SetConfig+0x12fe>
 c00519c:	687b      	ldr	r3, [r7, #4]
 c00519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051a0:	2b03      	cmp	r3, #3
 c0051a2:	d032      	beq.n	c00520a <UART_SetConfig+0x12fa>
 c0051a4:	687b      	ldr	r3, [r7, #4]
 c0051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051a8:	2b04      	cmp	r3, #4
 c0051aa:	d02c      	beq.n	c005206 <UART_SetConfig+0x12f6>
 c0051ac:	687b      	ldr	r3, [r7, #4]
 c0051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051b0:	2b05      	cmp	r3, #5
 c0051b2:	d026      	beq.n	c005202 <UART_SetConfig+0x12f2>
 c0051b4:	687b      	ldr	r3, [r7, #4]
 c0051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051b8:	2b06      	cmp	r3, #6
 c0051ba:	d020      	beq.n	c0051fe <UART_SetConfig+0x12ee>
 c0051bc:	687b      	ldr	r3, [r7, #4]
 c0051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051c0:	2b07      	cmp	r3, #7
 c0051c2:	d01a      	beq.n	c0051fa <UART_SetConfig+0x12ea>
 c0051c4:	687b      	ldr	r3, [r7, #4]
 c0051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051c8:	2b08      	cmp	r3, #8
 c0051ca:	d014      	beq.n	c0051f6 <UART_SetConfig+0x12e6>
 c0051cc:	687b      	ldr	r3, [r7, #4]
 c0051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051d0:	2b09      	cmp	r3, #9
 c0051d2:	d00e      	beq.n	c0051f2 <UART_SetConfig+0x12e2>
 c0051d4:	687b      	ldr	r3, [r7, #4]
 c0051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051d8:	2b0a      	cmp	r3, #10
 c0051da:	d008      	beq.n	c0051ee <UART_SetConfig+0x12de>
 c0051dc:	687b      	ldr	r3, [r7, #4]
 c0051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051e0:	2b0b      	cmp	r3, #11
 c0051e2:	d102      	bne.n	c0051ea <UART_SetConfig+0x12da>
 c0051e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0051e8:	e016      	b.n	c005218 <UART_SetConfig+0x1308>
 c0051ea:	2301      	movs	r3, #1
 c0051ec:	e014      	b.n	c005218 <UART_SetConfig+0x1308>
 c0051ee:	2380      	movs	r3, #128	; 0x80
 c0051f0:	e012      	b.n	c005218 <UART_SetConfig+0x1308>
 c0051f2:	2340      	movs	r3, #64	; 0x40
 c0051f4:	e010      	b.n	c005218 <UART_SetConfig+0x1308>
 c0051f6:	2320      	movs	r3, #32
 c0051f8:	e00e      	b.n	c005218 <UART_SetConfig+0x1308>
 c0051fa:	2310      	movs	r3, #16
 c0051fc:	e00c      	b.n	c005218 <UART_SetConfig+0x1308>
 c0051fe:	230c      	movs	r3, #12
 c005200:	e00a      	b.n	c005218 <UART_SetConfig+0x1308>
 c005202:	230a      	movs	r3, #10
 c005204:	e008      	b.n	c005218 <UART_SetConfig+0x1308>
 c005206:	2308      	movs	r3, #8
 c005208:	e006      	b.n	c005218 <UART_SetConfig+0x1308>
 c00520a:	2306      	movs	r3, #6
 c00520c:	e004      	b.n	c005218 <UART_SetConfig+0x1308>
 c00520e:	2304      	movs	r3, #4
 c005210:	e002      	b.n	c005218 <UART_SetConfig+0x1308>
 c005212:	2302      	movs	r3, #2
 c005214:	e000      	b.n	c005218 <UART_SetConfig+0x1308>
 c005216:	2301      	movs	r3, #1
 c005218:	693a      	ldr	r2, [r7, #16]
 c00521a:	fbb2 f2f3 	udiv	r2, r2, r3
 c00521e:	687b      	ldr	r3, [r7, #4]
 c005220:	685b      	ldr	r3, [r3, #4]
 c005222:	085b      	lsrs	r3, r3, #1
 c005224:	441a      	add	r2, r3
 c005226:	687b      	ldr	r3, [r7, #4]
 c005228:	685b      	ldr	r3, [r3, #4]
 c00522a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00522e:	b29b      	uxth	r3, r3
 c005230:	61fb      	str	r3, [r7, #28]
        break;
 c005232:	e112      	b.n	c00545a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005234:	687b      	ldr	r3, [r7, #4]
 c005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005238:	2b00      	cmp	r3, #0
 c00523a:	d044      	beq.n	c0052c6 <UART_SetConfig+0x13b6>
 c00523c:	687b      	ldr	r3, [r7, #4]
 c00523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005240:	2b01      	cmp	r3, #1
 c005242:	d03e      	beq.n	c0052c2 <UART_SetConfig+0x13b2>
 c005244:	687b      	ldr	r3, [r7, #4]
 c005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005248:	2b02      	cmp	r3, #2
 c00524a:	d038      	beq.n	c0052be <UART_SetConfig+0x13ae>
 c00524c:	687b      	ldr	r3, [r7, #4]
 c00524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005250:	2b03      	cmp	r3, #3
 c005252:	d032      	beq.n	c0052ba <UART_SetConfig+0x13aa>
 c005254:	687b      	ldr	r3, [r7, #4]
 c005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005258:	2b04      	cmp	r3, #4
 c00525a:	d02c      	beq.n	c0052b6 <UART_SetConfig+0x13a6>
 c00525c:	687b      	ldr	r3, [r7, #4]
 c00525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005260:	2b05      	cmp	r3, #5
 c005262:	d026      	beq.n	c0052b2 <UART_SetConfig+0x13a2>
 c005264:	687b      	ldr	r3, [r7, #4]
 c005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005268:	2b06      	cmp	r3, #6
 c00526a:	d020      	beq.n	c0052ae <UART_SetConfig+0x139e>
 c00526c:	687b      	ldr	r3, [r7, #4]
 c00526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005270:	2b07      	cmp	r3, #7
 c005272:	d01a      	beq.n	c0052aa <UART_SetConfig+0x139a>
 c005274:	687b      	ldr	r3, [r7, #4]
 c005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005278:	2b08      	cmp	r3, #8
 c00527a:	d014      	beq.n	c0052a6 <UART_SetConfig+0x1396>
 c00527c:	687b      	ldr	r3, [r7, #4]
 c00527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005280:	2b09      	cmp	r3, #9
 c005282:	d00e      	beq.n	c0052a2 <UART_SetConfig+0x1392>
 c005284:	687b      	ldr	r3, [r7, #4]
 c005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005288:	2b0a      	cmp	r3, #10
 c00528a:	d008      	beq.n	c00529e <UART_SetConfig+0x138e>
 c00528c:	687b      	ldr	r3, [r7, #4]
 c00528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005290:	2b0b      	cmp	r3, #11
 c005292:	d102      	bne.n	c00529a <UART_SetConfig+0x138a>
 c005294:	f24f 4324 	movw	r3, #62500	; 0xf424
 c005298:	e016      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c00529a:	4b81      	ldr	r3, [pc, #516]	; (c0054a0 <UART_SetConfig+0x1590>)
 c00529c:	e014      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c00529e:	4b81      	ldr	r3, [pc, #516]	; (c0054a4 <UART_SetConfig+0x1594>)
 c0052a0:	e012      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052a2:	4b81      	ldr	r3, [pc, #516]	; (c0054a8 <UART_SetConfig+0x1598>)
 c0052a4:	e010      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052a6:	4b81      	ldr	r3, [pc, #516]	; (c0054ac <UART_SetConfig+0x159c>)
 c0052a8:	e00e      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052aa:	4b81      	ldr	r3, [pc, #516]	; (c0054b0 <UART_SetConfig+0x15a0>)
 c0052ac:	e00c      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052ae:	4b81      	ldr	r3, [pc, #516]	; (c0054b4 <UART_SetConfig+0x15a4>)
 c0052b0:	e00a      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052b2:	4b81      	ldr	r3, [pc, #516]	; (c0054b8 <UART_SetConfig+0x15a8>)
 c0052b4:	e008      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052b6:	4b81      	ldr	r3, [pc, #516]	; (c0054bc <UART_SetConfig+0x15ac>)
 c0052b8:	e006      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052ba:	4b81      	ldr	r3, [pc, #516]	; (c0054c0 <UART_SetConfig+0x15b0>)
 c0052bc:	e004      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052be:	4b81      	ldr	r3, [pc, #516]	; (c0054c4 <UART_SetConfig+0x15b4>)
 c0052c0:	e002      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052c2:	4b81      	ldr	r3, [pc, #516]	; (c0054c8 <UART_SetConfig+0x15b8>)
 c0052c4:	e000      	b.n	c0052c8 <UART_SetConfig+0x13b8>
 c0052c6:	4b76      	ldr	r3, [pc, #472]	; (c0054a0 <UART_SetConfig+0x1590>)
 c0052c8:	687a      	ldr	r2, [r7, #4]
 c0052ca:	6852      	ldr	r2, [r2, #4]
 c0052cc:	0852      	lsrs	r2, r2, #1
 c0052ce:	441a      	add	r2, r3
 c0052d0:	687b      	ldr	r3, [r7, #4]
 c0052d2:	685b      	ldr	r3, [r3, #4]
 c0052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0052d8:	b29b      	uxth	r3, r3
 c0052da:	61fb      	str	r3, [r7, #28]
        break;
 c0052dc:	e0bd      	b.n	c00545a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0052de:	f7fd fc7d 	bl	c002bdc <HAL_RCC_GetSysClockFreq>
 c0052e2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0052e4:	687b      	ldr	r3, [r7, #4]
 c0052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0052e8:	2b00      	cmp	r3, #0
 c0052ea:	d044      	beq.n	c005376 <UART_SetConfig+0x1466>
 c0052ec:	687b      	ldr	r3, [r7, #4]
 c0052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0052f0:	2b01      	cmp	r3, #1
 c0052f2:	d03e      	beq.n	c005372 <UART_SetConfig+0x1462>
 c0052f4:	687b      	ldr	r3, [r7, #4]
 c0052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0052f8:	2b02      	cmp	r3, #2
 c0052fa:	d038      	beq.n	c00536e <UART_SetConfig+0x145e>
 c0052fc:	687b      	ldr	r3, [r7, #4]
 c0052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005300:	2b03      	cmp	r3, #3
 c005302:	d032      	beq.n	c00536a <UART_SetConfig+0x145a>
 c005304:	687b      	ldr	r3, [r7, #4]
 c005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005308:	2b04      	cmp	r3, #4
 c00530a:	d02c      	beq.n	c005366 <UART_SetConfig+0x1456>
 c00530c:	687b      	ldr	r3, [r7, #4]
 c00530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005310:	2b05      	cmp	r3, #5
 c005312:	d026      	beq.n	c005362 <UART_SetConfig+0x1452>
 c005314:	687b      	ldr	r3, [r7, #4]
 c005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005318:	2b06      	cmp	r3, #6
 c00531a:	d020      	beq.n	c00535e <UART_SetConfig+0x144e>
 c00531c:	687b      	ldr	r3, [r7, #4]
 c00531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005320:	2b07      	cmp	r3, #7
 c005322:	d01a      	beq.n	c00535a <UART_SetConfig+0x144a>
 c005324:	687b      	ldr	r3, [r7, #4]
 c005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005328:	2b08      	cmp	r3, #8
 c00532a:	d014      	beq.n	c005356 <UART_SetConfig+0x1446>
 c00532c:	687b      	ldr	r3, [r7, #4]
 c00532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005330:	2b09      	cmp	r3, #9
 c005332:	d00e      	beq.n	c005352 <UART_SetConfig+0x1442>
 c005334:	687b      	ldr	r3, [r7, #4]
 c005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005338:	2b0a      	cmp	r3, #10
 c00533a:	d008      	beq.n	c00534e <UART_SetConfig+0x143e>
 c00533c:	687b      	ldr	r3, [r7, #4]
 c00533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005340:	2b0b      	cmp	r3, #11
 c005342:	d102      	bne.n	c00534a <UART_SetConfig+0x143a>
 c005344:	f44f 7380 	mov.w	r3, #256	; 0x100
 c005348:	e016      	b.n	c005378 <UART_SetConfig+0x1468>
 c00534a:	2301      	movs	r3, #1
 c00534c:	e014      	b.n	c005378 <UART_SetConfig+0x1468>
 c00534e:	2380      	movs	r3, #128	; 0x80
 c005350:	e012      	b.n	c005378 <UART_SetConfig+0x1468>
 c005352:	2340      	movs	r3, #64	; 0x40
 c005354:	e010      	b.n	c005378 <UART_SetConfig+0x1468>
 c005356:	2320      	movs	r3, #32
 c005358:	e00e      	b.n	c005378 <UART_SetConfig+0x1468>
 c00535a:	2310      	movs	r3, #16
 c00535c:	e00c      	b.n	c005378 <UART_SetConfig+0x1468>
 c00535e:	230c      	movs	r3, #12
 c005360:	e00a      	b.n	c005378 <UART_SetConfig+0x1468>
 c005362:	230a      	movs	r3, #10
 c005364:	e008      	b.n	c005378 <UART_SetConfig+0x1468>
 c005366:	2308      	movs	r3, #8
 c005368:	e006      	b.n	c005378 <UART_SetConfig+0x1468>
 c00536a:	2306      	movs	r3, #6
 c00536c:	e004      	b.n	c005378 <UART_SetConfig+0x1468>
 c00536e:	2304      	movs	r3, #4
 c005370:	e002      	b.n	c005378 <UART_SetConfig+0x1468>
 c005372:	2302      	movs	r3, #2
 c005374:	e000      	b.n	c005378 <UART_SetConfig+0x1468>
 c005376:	2301      	movs	r3, #1
 c005378:	693a      	ldr	r2, [r7, #16]
 c00537a:	fbb2 f2f3 	udiv	r2, r2, r3
 c00537e:	687b      	ldr	r3, [r7, #4]
 c005380:	685b      	ldr	r3, [r3, #4]
 c005382:	085b      	lsrs	r3, r3, #1
 c005384:	441a      	add	r2, r3
 c005386:	687b      	ldr	r3, [r7, #4]
 c005388:	685b      	ldr	r3, [r3, #4]
 c00538a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00538e:	b29b      	uxth	r3, r3
 c005390:	61fb      	str	r3, [r7, #28]
        break;
 c005392:	e062      	b.n	c00545a <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005394:	687b      	ldr	r3, [r7, #4]
 c005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005398:	2b00      	cmp	r3, #0
 c00539a:	d04e      	beq.n	c00543a <UART_SetConfig+0x152a>
 c00539c:	687b      	ldr	r3, [r7, #4]
 c00539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053a0:	2b01      	cmp	r3, #1
 c0053a2:	d047      	beq.n	c005434 <UART_SetConfig+0x1524>
 c0053a4:	687b      	ldr	r3, [r7, #4]
 c0053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053a8:	2b02      	cmp	r3, #2
 c0053aa:	d040      	beq.n	c00542e <UART_SetConfig+0x151e>
 c0053ac:	687b      	ldr	r3, [r7, #4]
 c0053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053b0:	2b03      	cmp	r3, #3
 c0053b2:	d039      	beq.n	c005428 <UART_SetConfig+0x1518>
 c0053b4:	687b      	ldr	r3, [r7, #4]
 c0053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053b8:	2b04      	cmp	r3, #4
 c0053ba:	d032      	beq.n	c005422 <UART_SetConfig+0x1512>
 c0053bc:	687b      	ldr	r3, [r7, #4]
 c0053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053c0:	2b05      	cmp	r3, #5
 c0053c2:	d02b      	beq.n	c00541c <UART_SetConfig+0x150c>
 c0053c4:	687b      	ldr	r3, [r7, #4]
 c0053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053c8:	2b06      	cmp	r3, #6
 c0053ca:	d024      	beq.n	c005416 <UART_SetConfig+0x1506>
 c0053cc:	687b      	ldr	r3, [r7, #4]
 c0053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053d0:	2b07      	cmp	r3, #7
 c0053d2:	d01d      	beq.n	c005410 <UART_SetConfig+0x1500>
 c0053d4:	687b      	ldr	r3, [r7, #4]
 c0053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053d8:	2b08      	cmp	r3, #8
 c0053da:	d016      	beq.n	c00540a <UART_SetConfig+0x14fa>
 c0053dc:	687b      	ldr	r3, [r7, #4]
 c0053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053e0:	2b09      	cmp	r3, #9
 c0053e2:	d00f      	beq.n	c005404 <UART_SetConfig+0x14f4>
 c0053e4:	687b      	ldr	r3, [r7, #4]
 c0053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053e8:	2b0a      	cmp	r3, #10
 c0053ea:	d008      	beq.n	c0053fe <UART_SetConfig+0x14ee>
 c0053ec:	687b      	ldr	r3, [r7, #4]
 c0053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0053f0:	2b0b      	cmp	r3, #11
 c0053f2:	d101      	bne.n	c0053f8 <UART_SetConfig+0x14e8>
 c0053f4:	2380      	movs	r3, #128	; 0x80
 c0053f6:	e022      	b.n	c00543e <UART_SetConfig+0x152e>
 c0053f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0053fc:	e01f      	b.n	c00543e <UART_SetConfig+0x152e>
 c0053fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 c005402:	e01c      	b.n	c00543e <UART_SetConfig+0x152e>
 c005404:	f44f 7300 	mov.w	r3, #512	; 0x200
 c005408:	e019      	b.n	c00543e <UART_SetConfig+0x152e>
 c00540a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c00540e:	e016      	b.n	c00543e <UART_SetConfig+0x152e>
 c005410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c005414:	e013      	b.n	c00543e <UART_SetConfig+0x152e>
 c005416:	f640 23aa 	movw	r3, #2730	; 0xaaa
 c00541a:	e010      	b.n	c00543e <UART_SetConfig+0x152e>
 c00541c:	f640 43cc 	movw	r3, #3276	; 0xccc
 c005420:	e00d      	b.n	c00543e <UART_SetConfig+0x152e>
 c005422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c005426:	e00a      	b.n	c00543e <UART_SetConfig+0x152e>
 c005428:	f241 5355 	movw	r3, #5461	; 0x1555
 c00542c:	e007      	b.n	c00543e <UART_SetConfig+0x152e>
 c00542e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c005432:	e004      	b.n	c00543e <UART_SetConfig+0x152e>
 c005434:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c005438:	e001      	b.n	c00543e <UART_SetConfig+0x152e>
 c00543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00543e:	687a      	ldr	r2, [r7, #4]
 c005440:	6852      	ldr	r2, [r2, #4]
 c005442:	0852      	lsrs	r2, r2, #1
 c005444:	441a      	add	r2, r3
 c005446:	687b      	ldr	r3, [r7, #4]
 c005448:	685b      	ldr	r3, [r3, #4]
 c00544a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00544e:	b29b      	uxth	r3, r3
 c005450:	61fb      	str	r3, [r7, #28]
        break;
 c005452:	e002      	b.n	c00545a <UART_SetConfig+0x154a>
      default:
        ret = HAL_ERROR;
 c005454:	2301      	movs	r3, #1
 c005456:	76fb      	strb	r3, [r7, #27]
        break;
 c005458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00545a:	69fb      	ldr	r3, [r7, #28]
 c00545c:	2b0f      	cmp	r3, #15
 c00545e:	d908      	bls.n	c005472 <UART_SetConfig+0x1562>
 c005460:	69fb      	ldr	r3, [r7, #28]
 c005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005466:	d204      	bcs.n	c005472 <UART_SetConfig+0x1562>
    {
      huart->Instance->BRR = usartdiv;
 c005468:	687b      	ldr	r3, [r7, #4]
 c00546a:	681b      	ldr	r3, [r3, #0]
 c00546c:	69fa      	ldr	r2, [r7, #28]
 c00546e:	60da      	str	r2, [r3, #12]
 c005470:	e001      	b.n	c005476 <UART_SetConfig+0x1566>
    }
    else
    {
      ret = HAL_ERROR;
 c005472:	2301      	movs	r3, #1
 c005474:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c005476:	687b      	ldr	r3, [r7, #4]
 c005478:	2201      	movs	r2, #1
 c00547a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c00547e:	687b      	ldr	r3, [r7, #4]
 c005480:	2201      	movs	r2, #1
 c005482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c005486:	687b      	ldr	r3, [r7, #4]
 c005488:	2200      	movs	r2, #0
 c00548a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 c00548c:	687b      	ldr	r3, [r7, #4]
 c00548e:	2200      	movs	r2, #0
 c005490:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 c005492:	7efb      	ldrb	r3, [r7, #27]
}
 c005494:	4618      	mov	r0, r3
 c005496:	3728      	adds	r7, #40	; 0x28
 c005498:	46bd      	mov	sp, r7
 c00549a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 c00549e:	bf00      	nop
 c0054a0:	00f42400 	.word	0x00f42400
 c0054a4:	0001e848 	.word	0x0001e848
 c0054a8:	0003d090 	.word	0x0003d090
 c0054ac:	0007a120 	.word	0x0007a120
 c0054b0:	000f4240 	.word	0x000f4240
 c0054b4:	00145855 	.word	0x00145855
 c0054b8:	00186a00 	.word	0x00186a00
 c0054bc:	001e8480 	.word	0x001e8480
 c0054c0:	0028b0aa 	.word	0x0028b0aa
 c0054c4:	003d0900 	.word	0x003d0900
 c0054c8:	007a1200 	.word	0x007a1200

0c0054cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c0054cc:	b480      	push	{r7}
 c0054ce:	b083      	sub	sp, #12
 c0054d0:	af00      	add	r7, sp, #0
 c0054d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c0054d4:	687b      	ldr	r3, [r7, #4]
 c0054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0054d8:	f003 0301 	and.w	r3, r3, #1
 c0054dc:	2b00      	cmp	r3, #0
 c0054de:	d00a      	beq.n	c0054f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c0054e0:	687b      	ldr	r3, [r7, #4]
 c0054e2:	681b      	ldr	r3, [r3, #0]
 c0054e4:	685b      	ldr	r3, [r3, #4]
 c0054e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c0054ea:	687b      	ldr	r3, [r7, #4]
 c0054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c0054ee:	687b      	ldr	r3, [r7, #4]
 c0054f0:	681b      	ldr	r3, [r3, #0]
 c0054f2:	430a      	orrs	r2, r1
 c0054f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c0054f6:	687b      	ldr	r3, [r7, #4]
 c0054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0054fa:	f003 0302 	and.w	r3, r3, #2
 c0054fe:	2b00      	cmp	r3, #0
 c005500:	d00a      	beq.n	c005518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c005502:	687b      	ldr	r3, [r7, #4]
 c005504:	681b      	ldr	r3, [r3, #0]
 c005506:	685b      	ldr	r3, [r3, #4]
 c005508:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c00550c:	687b      	ldr	r3, [r7, #4]
 c00550e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c005510:	687b      	ldr	r3, [r7, #4]
 c005512:	681b      	ldr	r3, [r3, #0]
 c005514:	430a      	orrs	r2, r1
 c005516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c005518:	687b      	ldr	r3, [r7, #4]
 c00551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00551c:	f003 0304 	and.w	r3, r3, #4
 c005520:	2b00      	cmp	r3, #0
 c005522:	d00a      	beq.n	c00553a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c005524:	687b      	ldr	r3, [r7, #4]
 c005526:	681b      	ldr	r3, [r3, #0]
 c005528:	685b      	ldr	r3, [r3, #4]
 c00552a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c00552e:	687b      	ldr	r3, [r7, #4]
 c005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c005532:	687b      	ldr	r3, [r7, #4]
 c005534:	681b      	ldr	r3, [r3, #0]
 c005536:	430a      	orrs	r2, r1
 c005538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c00553a:	687b      	ldr	r3, [r7, #4]
 c00553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00553e:	f003 0308 	and.w	r3, r3, #8
 c005542:	2b00      	cmp	r3, #0
 c005544:	d00a      	beq.n	c00555c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c005546:	687b      	ldr	r3, [r7, #4]
 c005548:	681b      	ldr	r3, [r3, #0]
 c00554a:	685b      	ldr	r3, [r3, #4]
 c00554c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c005550:	687b      	ldr	r3, [r7, #4]
 c005552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c005554:	687b      	ldr	r3, [r7, #4]
 c005556:	681b      	ldr	r3, [r3, #0]
 c005558:	430a      	orrs	r2, r1
 c00555a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c00555c:	687b      	ldr	r3, [r7, #4]
 c00555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005560:	f003 0310 	and.w	r3, r3, #16
 c005564:	2b00      	cmp	r3, #0
 c005566:	d00a      	beq.n	c00557e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c005568:	687b      	ldr	r3, [r7, #4]
 c00556a:	681b      	ldr	r3, [r3, #0]
 c00556c:	689b      	ldr	r3, [r3, #8]
 c00556e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c005572:	687b      	ldr	r3, [r7, #4]
 c005574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c005576:	687b      	ldr	r3, [r7, #4]
 c005578:	681b      	ldr	r3, [r3, #0]
 c00557a:	430a      	orrs	r2, r1
 c00557c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c00557e:	687b      	ldr	r3, [r7, #4]
 c005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005582:	f003 0320 	and.w	r3, r3, #32
 c005586:	2b00      	cmp	r3, #0
 c005588:	d00a      	beq.n	c0055a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c00558a:	687b      	ldr	r3, [r7, #4]
 c00558c:	681b      	ldr	r3, [r3, #0]
 c00558e:	689b      	ldr	r3, [r3, #8]
 c005590:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c005594:	687b      	ldr	r3, [r7, #4]
 c005596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c005598:	687b      	ldr	r3, [r7, #4]
 c00559a:	681b      	ldr	r3, [r3, #0]
 c00559c:	430a      	orrs	r2, r1
 c00559e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c0055a0:	687b      	ldr	r3, [r7, #4]
 c0055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0055a8:	2b00      	cmp	r3, #0
 c0055aa:	d01a      	beq.n	c0055e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0055ac:	687b      	ldr	r3, [r7, #4]
 c0055ae:	681b      	ldr	r3, [r3, #0]
 c0055b0:	685b      	ldr	r3, [r3, #4]
 c0055b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c0055b6:	687b      	ldr	r3, [r7, #4]
 c0055b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c0055ba:	687b      	ldr	r3, [r7, #4]
 c0055bc:	681b      	ldr	r3, [r3, #0]
 c0055be:	430a      	orrs	r2, r1
 c0055c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0055c2:	687b      	ldr	r3, [r7, #4]
 c0055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0055c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0055ca:	d10a      	bne.n	c0055e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0055cc:	687b      	ldr	r3, [r7, #4]
 c0055ce:	681b      	ldr	r3, [r3, #0]
 c0055d0:	685b      	ldr	r3, [r3, #4]
 c0055d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c0055d6:	687b      	ldr	r3, [r7, #4]
 c0055d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0055da:	687b      	ldr	r3, [r7, #4]
 c0055dc:	681b      	ldr	r3, [r3, #0]
 c0055de:	430a      	orrs	r2, r1
 c0055e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c0055e2:	687b      	ldr	r3, [r7, #4]
 c0055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0055ea:	2b00      	cmp	r3, #0
 c0055ec:	d00a      	beq.n	c005604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c0055ee:	687b      	ldr	r3, [r7, #4]
 c0055f0:	681b      	ldr	r3, [r3, #0]
 c0055f2:	685b      	ldr	r3, [r3, #4]
 c0055f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c0055f8:	687b      	ldr	r3, [r7, #4]
 c0055fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c0055fc:	687b      	ldr	r3, [r7, #4]
 c0055fe:	681b      	ldr	r3, [r3, #0]
 c005600:	430a      	orrs	r2, r1
 c005602:	605a      	str	r2, [r3, #4]
  }
}
 c005604:	bf00      	nop
 c005606:	370c      	adds	r7, #12
 c005608:	46bd      	mov	sp, r7
 c00560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00560e:	4770      	bx	lr

0c005610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c005610:	b580      	push	{r7, lr}
 c005612:	b086      	sub	sp, #24
 c005614:	af02      	add	r7, sp, #8
 c005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c005618:	687b      	ldr	r3, [r7, #4]
 c00561a:	2200      	movs	r2, #0
 c00561c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 c005620:	f7fb ff5c 	bl	c0014dc <HAL_GetTick>
 c005624:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c005626:	687b      	ldr	r3, [r7, #4]
 c005628:	681b      	ldr	r3, [r3, #0]
 c00562a:	681b      	ldr	r3, [r3, #0]
 c00562c:	f003 0308 	and.w	r3, r3, #8
 c005630:	2b08      	cmp	r3, #8
 c005632:	d10e      	bne.n	c005652 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c005638:	9300      	str	r3, [sp, #0]
 c00563a:	68fb      	ldr	r3, [r7, #12]
 c00563c:	2200      	movs	r2, #0
 c00563e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c005642:	6878      	ldr	r0, [r7, #4]
 c005644:	f000 f82c 	bl	c0056a0 <UART_WaitOnFlagUntilTimeout>
 c005648:	4603      	mov	r3, r0
 c00564a:	2b00      	cmp	r3, #0
 c00564c:	d001      	beq.n	c005652 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00564e:	2303      	movs	r3, #3
 c005650:	e022      	b.n	c005698 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c005652:	687b      	ldr	r3, [r7, #4]
 c005654:	681b      	ldr	r3, [r3, #0]
 c005656:	681b      	ldr	r3, [r3, #0]
 c005658:	f003 0304 	and.w	r3, r3, #4
 c00565c:	2b04      	cmp	r3, #4
 c00565e:	d10e      	bne.n	c00567e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c005664:	9300      	str	r3, [sp, #0]
 c005666:	68fb      	ldr	r3, [r7, #12]
 c005668:	2200      	movs	r2, #0
 c00566a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c00566e:	6878      	ldr	r0, [r7, #4]
 c005670:	f000 f816 	bl	c0056a0 <UART_WaitOnFlagUntilTimeout>
 c005674:	4603      	mov	r3, r0
 c005676:	2b00      	cmp	r3, #0
 c005678:	d001      	beq.n	c00567e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00567a:	2303      	movs	r3, #3
 c00567c:	e00c      	b.n	c005698 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c00567e:	687b      	ldr	r3, [r7, #4]
 c005680:	2220      	movs	r2, #32
 c005682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 c005686:	687b      	ldr	r3, [r7, #4]
 c005688:	2220      	movs	r2, #32
 c00568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 c00568e:	687b      	ldr	r3, [r7, #4]
 c005690:	2200      	movs	r2, #0
 c005692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 c005696:	2300      	movs	r3, #0
}
 c005698:	4618      	mov	r0, r3
 c00569a:	3710      	adds	r7, #16
 c00569c:	46bd      	mov	sp, r7
 c00569e:	bd80      	pop	{r7, pc}

0c0056a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c0056a0:	b580      	push	{r7, lr}
 c0056a2:	b084      	sub	sp, #16
 c0056a4:	af00      	add	r7, sp, #0
 c0056a6:	60f8      	str	r0, [r7, #12]
 c0056a8:	60b9      	str	r1, [r7, #8]
 c0056aa:	603b      	str	r3, [r7, #0]
 c0056ac:	4613      	mov	r3, r2
 c0056ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0056b0:	e062      	b.n	c005778 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c0056b2:	69bb      	ldr	r3, [r7, #24]
 c0056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0056b8:	d05e      	beq.n	c005778 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c0056ba:	f7fb ff0f 	bl	c0014dc <HAL_GetTick>
 c0056be:	4602      	mov	r2, r0
 c0056c0:	683b      	ldr	r3, [r7, #0]
 c0056c2:	1ad3      	subs	r3, r2, r3
 c0056c4:	69ba      	ldr	r2, [r7, #24]
 c0056c6:	429a      	cmp	r2, r3
 c0056c8:	d302      	bcc.n	c0056d0 <UART_WaitOnFlagUntilTimeout+0x30>
 c0056ca:	69bb      	ldr	r3, [r7, #24]
 c0056cc:	2b00      	cmp	r3, #0
 c0056ce:	d11d      	bne.n	c00570c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0056d0:	68fb      	ldr	r3, [r7, #12]
 c0056d2:	681b      	ldr	r3, [r3, #0]
 c0056d4:	681a      	ldr	r2, [r3, #0]
 c0056d6:	68fb      	ldr	r3, [r7, #12]
 c0056d8:	681b      	ldr	r3, [r3, #0]
 c0056da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0056de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0056e0:	68fb      	ldr	r3, [r7, #12]
 c0056e2:	681b      	ldr	r3, [r3, #0]
 c0056e4:	689a      	ldr	r2, [r3, #8]
 c0056e6:	68fb      	ldr	r3, [r7, #12]
 c0056e8:	681b      	ldr	r3, [r3, #0]
 c0056ea:	f022 0201 	bic.w	r2, r2, #1
 c0056ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c0056f0:	68fb      	ldr	r3, [r7, #12]
 c0056f2:	2220      	movs	r2, #32
 c0056f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 c0056f8:	68fb      	ldr	r3, [r7, #12]
 c0056fa:	2220      	movs	r2, #32
 c0056fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 c005700:	68fb      	ldr	r3, [r7, #12]
 c005702:	2200      	movs	r2, #0
 c005704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 c005708:	2303      	movs	r3, #3
 c00570a:	e045      	b.n	c005798 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00570c:	68fb      	ldr	r3, [r7, #12]
 c00570e:	681b      	ldr	r3, [r3, #0]
 c005710:	681b      	ldr	r3, [r3, #0]
 c005712:	f003 0304 	and.w	r3, r3, #4
 c005716:	2b00      	cmp	r3, #0
 c005718:	d02e      	beq.n	c005778 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00571a:	68fb      	ldr	r3, [r7, #12]
 c00571c:	681b      	ldr	r3, [r3, #0]
 c00571e:	69db      	ldr	r3, [r3, #28]
 c005720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005728:	d126      	bne.n	c005778 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00572a:	68fb      	ldr	r3, [r7, #12]
 c00572c:	681b      	ldr	r3, [r3, #0]
 c00572e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c005732:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c005734:	68fb      	ldr	r3, [r7, #12]
 c005736:	681b      	ldr	r3, [r3, #0]
 c005738:	681a      	ldr	r2, [r3, #0]
 c00573a:	68fb      	ldr	r3, [r7, #12]
 c00573c:	681b      	ldr	r3, [r3, #0]
 c00573e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c005742:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c005744:	68fb      	ldr	r3, [r7, #12]
 c005746:	681b      	ldr	r3, [r3, #0]
 c005748:	689a      	ldr	r2, [r3, #8]
 c00574a:	68fb      	ldr	r3, [r7, #12]
 c00574c:	681b      	ldr	r3, [r3, #0]
 c00574e:	f022 0201 	bic.w	r2, r2, #1
 c005752:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c005754:	68fb      	ldr	r3, [r7, #12]
 c005756:	2220      	movs	r2, #32
 c005758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 c00575c:	68fb      	ldr	r3, [r7, #12]
 c00575e:	2220      	movs	r2, #32
 c005760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c005764:	68fb      	ldr	r3, [r7, #12]
 c005766:	2220      	movs	r2, #32
 c005768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00576c:	68fb      	ldr	r3, [r7, #12]
 c00576e:	2200      	movs	r2, #0
 c005770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 c005774:	2303      	movs	r3, #3
 c005776:	e00f      	b.n	c005798 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c005778:	68fb      	ldr	r3, [r7, #12]
 c00577a:	681b      	ldr	r3, [r3, #0]
 c00577c:	69da      	ldr	r2, [r3, #28]
 c00577e:	68bb      	ldr	r3, [r7, #8]
 c005780:	4013      	ands	r3, r2
 c005782:	68ba      	ldr	r2, [r7, #8]
 c005784:	429a      	cmp	r2, r3
 c005786:	bf0c      	ite	eq
 c005788:	2301      	moveq	r3, #1
 c00578a:	2300      	movne	r3, #0
 c00578c:	b2db      	uxtb	r3, r3
 c00578e:	461a      	mov	r2, r3
 c005790:	79fb      	ldrb	r3, [r7, #7]
 c005792:	429a      	cmp	r2, r3
 c005794:	d08d      	beq.n	c0056b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c005796:	2300      	movs	r3, #0
}
 c005798:	4618      	mov	r0, r3
 c00579a:	3710      	adds	r7, #16
 c00579c:	46bd      	mov	sp, r7
 c00579e:	bd80      	pop	{r7, pc}

0c0057a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c0057a0:	b480      	push	{r7}
 c0057a2:	b085      	sub	sp, #20
 c0057a4:	af00      	add	r7, sp, #0
 c0057a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0057a8:	687b      	ldr	r3, [r7, #4]
 c0057aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 c0057ae:	2b01      	cmp	r3, #1
 c0057b0:	d101      	bne.n	c0057b6 <HAL_UARTEx_DisableFifoMode+0x16>
 c0057b2:	2302      	movs	r3, #2
 c0057b4:	e027      	b.n	c005806 <HAL_UARTEx_DisableFifoMode+0x66>
 c0057b6:	687b      	ldr	r3, [r7, #4]
 c0057b8:	2201      	movs	r2, #1
 c0057ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 c0057be:	687b      	ldr	r3, [r7, #4]
 c0057c0:	2224      	movs	r2, #36	; 0x24
 c0057c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0057c6:	687b      	ldr	r3, [r7, #4]
 c0057c8:	681b      	ldr	r3, [r3, #0]
 c0057ca:	681b      	ldr	r3, [r3, #0]
 c0057cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0057ce:	687b      	ldr	r3, [r7, #4]
 c0057d0:	681b      	ldr	r3, [r3, #0]
 c0057d2:	681a      	ldr	r2, [r3, #0]
 c0057d4:	687b      	ldr	r3, [r7, #4]
 c0057d6:	681b      	ldr	r3, [r3, #0]
 c0057d8:	f022 0201 	bic.w	r2, r2, #1
 c0057dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c0057de:	68fb      	ldr	r3, [r7, #12]
 c0057e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c0057e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c0057e6:	687b      	ldr	r3, [r7, #4]
 c0057e8:	2200      	movs	r2, #0
 c0057ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0057ec:	687b      	ldr	r3, [r7, #4]
 c0057ee:	681b      	ldr	r3, [r3, #0]
 c0057f0:	68fa      	ldr	r2, [r7, #12]
 c0057f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0057f4:	687b      	ldr	r3, [r7, #4]
 c0057f6:	2220      	movs	r2, #32
 c0057f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0057fc:	687b      	ldr	r3, [r7, #4]
 c0057fe:	2200      	movs	r2, #0
 c005800:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 c005804:	2300      	movs	r3, #0
}
 c005806:	4618      	mov	r0, r3
 c005808:	3714      	adds	r7, #20
 c00580a:	46bd      	mov	sp, r7
 c00580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005810:	4770      	bx	lr

0c005812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c005812:	b580      	push	{r7, lr}
 c005814:	b084      	sub	sp, #16
 c005816:	af00      	add	r7, sp, #0
 c005818:	6078      	str	r0, [r7, #4]
 c00581a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00581c:	687b      	ldr	r3, [r7, #4]
 c00581e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 c005822:	2b01      	cmp	r3, #1
 c005824:	d101      	bne.n	c00582a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c005826:	2302      	movs	r3, #2
 c005828:	e02d      	b.n	c005886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c00582a:	687b      	ldr	r3, [r7, #4]
 c00582c:	2201      	movs	r2, #1
 c00582e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 c005832:	687b      	ldr	r3, [r7, #4]
 c005834:	2224      	movs	r2, #36	; 0x24
 c005836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00583a:	687b      	ldr	r3, [r7, #4]
 c00583c:	681b      	ldr	r3, [r3, #0]
 c00583e:	681b      	ldr	r3, [r3, #0]
 c005840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005842:	687b      	ldr	r3, [r7, #4]
 c005844:	681b      	ldr	r3, [r3, #0]
 c005846:	681a      	ldr	r2, [r3, #0]
 c005848:	687b      	ldr	r3, [r7, #4]
 c00584a:	681b      	ldr	r3, [r3, #0]
 c00584c:	f022 0201 	bic.w	r2, r2, #1
 c005850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c005852:	687b      	ldr	r3, [r7, #4]
 c005854:	681b      	ldr	r3, [r3, #0]
 c005856:	689b      	ldr	r3, [r3, #8]
 c005858:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c00585c:	687b      	ldr	r3, [r7, #4]
 c00585e:	681b      	ldr	r3, [r3, #0]
 c005860:	683a      	ldr	r2, [r7, #0]
 c005862:	430a      	orrs	r2, r1
 c005864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c005866:	6878      	ldr	r0, [r7, #4]
 c005868:	f000 f850 	bl	c00590c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00586c:	687b      	ldr	r3, [r7, #4]
 c00586e:	681b      	ldr	r3, [r3, #0]
 c005870:	68fa      	ldr	r2, [r7, #12]
 c005872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005874:	687b      	ldr	r3, [r7, #4]
 c005876:	2220      	movs	r2, #32
 c005878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00587c:	687b      	ldr	r3, [r7, #4]
 c00587e:	2200      	movs	r2, #0
 c005880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 c005884:	2300      	movs	r3, #0
}
 c005886:	4618      	mov	r0, r3
 c005888:	3710      	adds	r7, #16
 c00588a:	46bd      	mov	sp, r7
 c00588c:	bd80      	pop	{r7, pc}

0c00588e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00588e:	b580      	push	{r7, lr}
 c005890:	b084      	sub	sp, #16
 c005892:	af00      	add	r7, sp, #0
 c005894:	6078      	str	r0, [r7, #4]
 c005896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c005898:	687b      	ldr	r3, [r7, #4]
 c00589a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 c00589e:	2b01      	cmp	r3, #1
 c0058a0:	d101      	bne.n	c0058a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c0058a2:	2302      	movs	r3, #2
 c0058a4:	e02d      	b.n	c005902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c0058a6:	687b      	ldr	r3, [r7, #4]
 c0058a8:	2201      	movs	r2, #1
 c0058aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 c0058ae:	687b      	ldr	r3, [r7, #4]
 c0058b0:	2224      	movs	r2, #36	; 0x24
 c0058b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0058b6:	687b      	ldr	r3, [r7, #4]
 c0058b8:	681b      	ldr	r3, [r3, #0]
 c0058ba:	681b      	ldr	r3, [r3, #0]
 c0058bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0058be:	687b      	ldr	r3, [r7, #4]
 c0058c0:	681b      	ldr	r3, [r3, #0]
 c0058c2:	681a      	ldr	r2, [r3, #0]
 c0058c4:	687b      	ldr	r3, [r7, #4]
 c0058c6:	681b      	ldr	r3, [r3, #0]
 c0058c8:	f022 0201 	bic.w	r2, r2, #1
 c0058cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c0058ce:	687b      	ldr	r3, [r7, #4]
 c0058d0:	681b      	ldr	r3, [r3, #0]
 c0058d2:	689b      	ldr	r3, [r3, #8]
 c0058d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c0058d8:	687b      	ldr	r3, [r7, #4]
 c0058da:	681b      	ldr	r3, [r3, #0]
 c0058dc:	683a      	ldr	r2, [r7, #0]
 c0058de:	430a      	orrs	r2, r1
 c0058e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0058e2:	6878      	ldr	r0, [r7, #4]
 c0058e4:	f000 f812 	bl	c00590c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0058e8:	687b      	ldr	r3, [r7, #4]
 c0058ea:	681b      	ldr	r3, [r3, #0]
 c0058ec:	68fa      	ldr	r2, [r7, #12]
 c0058ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0058f0:	687b      	ldr	r3, [r7, #4]
 c0058f2:	2220      	movs	r2, #32
 c0058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0058f8:	687b      	ldr	r3, [r7, #4]
 c0058fa:	2200      	movs	r2, #0
 c0058fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 c005900:	2300      	movs	r3, #0
}
 c005902:	4618      	mov	r0, r3
 c005904:	3710      	adds	r7, #16
 c005906:	46bd      	mov	sp, r7
 c005908:	bd80      	pop	{r7, pc}
	...

0c00590c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c00590c:	b480      	push	{r7}
 c00590e:	b089      	sub	sp, #36	; 0x24
 c005910:	af00      	add	r7, sp, #0
 c005912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 c005914:	4a2f      	ldr	r2, [pc, #188]	; (c0059d4 <UARTEx_SetNbDataToProcess+0xc8>)
 c005916:	f107 0314 	add.w	r3, r7, #20
 c00591a:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00591e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 c005922:	4a2d      	ldr	r2, [pc, #180]	; (c0059d8 <UARTEx_SetNbDataToProcess+0xcc>)
 c005924:	f107 030c 	add.w	r3, r7, #12
 c005928:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00592c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c005930:	687b      	ldr	r3, [r7, #4]
 c005932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c005934:	2b00      	cmp	r3, #0
 c005936:	d108      	bne.n	c00594a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 c005938:	687b      	ldr	r3, [r7, #4]
 c00593a:	2201      	movs	r2, #1
 c00593c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c005940:	687b      	ldr	r3, [r7, #4]
 c005942:	2201      	movs	r2, #1
 c005944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c005948:	e03d      	b.n	c0059c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00594a:	2308      	movs	r3, #8
 c00594c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c00594e:	2308      	movs	r3, #8
 c005950:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c005952:	687b      	ldr	r3, [r7, #4]
 c005954:	681b      	ldr	r3, [r3, #0]
 c005956:	689b      	ldr	r3, [r3, #8]
 c005958:	0e5b      	lsrs	r3, r3, #25
 c00595a:	b2db      	uxtb	r3, r3
 c00595c:	f003 0307 	and.w	r3, r3, #7
 c005960:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c005962:	687b      	ldr	r3, [r7, #4]
 c005964:	681b      	ldr	r3, [r3, #0]
 c005966:	689b      	ldr	r3, [r3, #8]
 c005968:	0f5b      	lsrs	r3, r3, #29
 c00596a:	b2db      	uxtb	r3, r3
 c00596c:	f003 0307 	and.w	r3, r3, #7
 c005970:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c005972:	7fbb      	ldrb	r3, [r7, #30]
 c005974:	7f3a      	ldrb	r2, [r7, #28]
 c005976:	f107 0120 	add.w	r1, r7, #32
 c00597a:	440a      	add	r2, r1
 c00597c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 c005980:	fb02 f303 	mul.w	r3, r2, r3
 c005984:	7f3a      	ldrb	r2, [r7, #28]
 c005986:	f107 0120 	add.w	r1, r7, #32
 c00598a:	440a      	add	r2, r1
 c00598c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 c005990:	fb93 f3f2 	sdiv	r3, r3, r2
 c005994:	b29a      	uxth	r2, r3
 c005996:	687b      	ldr	r3, [r7, #4]
 c005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c00599c:	7ffb      	ldrb	r3, [r7, #31]
 c00599e:	7f7a      	ldrb	r2, [r7, #29]
 c0059a0:	f107 0120 	add.w	r1, r7, #32
 c0059a4:	440a      	add	r2, r1
 c0059a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 c0059aa:	fb02 f303 	mul.w	r3, r2, r3
 c0059ae:	7f7a      	ldrb	r2, [r7, #29]
 c0059b0:	f107 0120 	add.w	r1, r7, #32
 c0059b4:	440a      	add	r2, r1
 c0059b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 c0059ba:	fb93 f3f2 	sdiv	r3, r3, r2
 c0059be:	b29a      	uxth	r2, r3
 c0059c0:	687b      	ldr	r3, [r7, #4]
 c0059c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c0059c6:	bf00      	nop
 c0059c8:	3724      	adds	r7, #36	; 0x24
 c0059ca:	46bd      	mov	sp, r7
 c0059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0059d0:	4770      	bx	lr
 c0059d2:	bf00      	nop
 c0059d4:	0c0062cc 	.word	0x0c0062cc
 c0059d8:	0c0062d4 	.word	0x0c0062d4

0c0059dc <__errno>:
 c0059dc:	4b01      	ldr	r3, [pc, #4]	; (c0059e4 <__errno+0x8>)
 c0059de:	6818      	ldr	r0, [r3, #0]
 c0059e0:	4770      	bx	lr
 c0059e2:	bf00      	nop
 c0059e4:	3000000c 	.word	0x3000000c

0c0059e8 <__libc_init_array>:
 c0059e8:	b570      	push	{r4, r5, r6, lr}
 c0059ea:	4e0d      	ldr	r6, [pc, #52]	; (c005a20 <__libc_init_array+0x38>)
 c0059ec:	2500      	movs	r5, #0
 c0059ee:	4c0d      	ldr	r4, [pc, #52]	; (c005a24 <__libc_init_array+0x3c>)
 c0059f0:	1ba4      	subs	r4, r4, r6
 c0059f2:	10a4      	asrs	r4, r4, #2
 c0059f4:	42a5      	cmp	r5, r4
 c0059f6:	d109      	bne.n	c005a0c <__libc_init_array+0x24>
 c0059f8:	4e0b      	ldr	r6, [pc, #44]	; (c005a28 <__libc_init_array+0x40>)
 c0059fa:	2500      	movs	r5, #0
 c0059fc:	4c0b      	ldr	r4, [pc, #44]	; (c005a2c <__libc_init_array+0x44>)
 c0059fe:	f000 fc35 	bl	c00626c <_init>
 c005a02:	1ba4      	subs	r4, r4, r6
 c005a04:	10a4      	asrs	r4, r4, #2
 c005a06:	42a5      	cmp	r5, r4
 c005a08:	d105      	bne.n	c005a16 <__libc_init_array+0x2e>
 c005a0a:	bd70      	pop	{r4, r5, r6, pc}
 c005a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 c005a10:	3501      	adds	r5, #1
 c005a12:	4798      	blx	r3
 c005a14:	e7ee      	b.n	c0059f4 <__libc_init_array+0xc>
 c005a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 c005a1a:	3501      	adds	r5, #1
 c005a1c:	4798      	blx	r3
 c005a1e:	e7f2      	b.n	c005a06 <__libc_init_array+0x1e>
 c005a20:	0c006370 	.word	0x0c006370
 c005a24:	0c006370 	.word	0x0c006370
 c005a28:	0c006370 	.word	0x0c006370
 c005a2c:	0c006374 	.word	0x0c006374

0c005a30 <memset>:
 c005a30:	4402      	add	r2, r0
 c005a32:	4603      	mov	r3, r0
 c005a34:	4293      	cmp	r3, r2
 c005a36:	d100      	bne.n	c005a3a <memset+0xa>
 c005a38:	4770      	bx	lr
 c005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 c005a3e:	e7f9      	b.n	c005a34 <memset+0x4>

0c005a40 <siprintf>:
 c005a40:	b40e      	push	{r1, r2, r3}
 c005a42:	b500      	push	{lr}
 c005a44:	b09c      	sub	sp, #112	; 0x70
 c005a46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 c005a4a:	ab1d      	add	r3, sp, #116	; 0x74
 c005a4c:	9002      	str	r0, [sp, #8]
 c005a4e:	9006      	str	r0, [sp, #24]
 c005a50:	9107      	str	r1, [sp, #28]
 c005a52:	9104      	str	r1, [sp, #16]
 c005a54:	4808      	ldr	r0, [pc, #32]	; (c005a78 <siprintf+0x38>)
 c005a56:	4909      	ldr	r1, [pc, #36]	; (c005a7c <siprintf+0x3c>)
 c005a58:	f853 2b04 	ldr.w	r2, [r3], #4
 c005a5c:	9105      	str	r1, [sp, #20]
 c005a5e:	a902      	add	r1, sp, #8
 c005a60:	6800      	ldr	r0, [r0, #0]
 c005a62:	9301      	str	r3, [sp, #4]
 c005a64:	f000 f866 	bl	c005b34 <_svfiprintf_r>
 c005a68:	9b02      	ldr	r3, [sp, #8]
 c005a6a:	2200      	movs	r2, #0
 c005a6c:	701a      	strb	r2, [r3, #0]
 c005a6e:	b01c      	add	sp, #112	; 0x70
 c005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 c005a74:	b003      	add	sp, #12
 c005a76:	4770      	bx	lr
 c005a78:	3000000c 	.word	0x3000000c
 c005a7c:	ffff0208 	.word	0xffff0208

0c005a80 <__ssputs_r>:
 c005a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c005a84:	688e      	ldr	r6, [r1, #8]
 c005a86:	4682      	mov	sl, r0
 c005a88:	460c      	mov	r4, r1
 c005a8a:	4690      	mov	r8, r2
 c005a8c:	429e      	cmp	r6, r3
 c005a8e:	4699      	mov	r9, r3
 c005a90:	d837      	bhi.n	c005b02 <__ssputs_r+0x82>
 c005a92:	898a      	ldrh	r2, [r1, #12]
 c005a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 c005a98:	d031      	beq.n	c005afe <__ssputs_r+0x7e>
 c005a9a:	6825      	ldr	r5, [r4, #0]
 c005a9c:	2302      	movs	r3, #2
 c005a9e:	6909      	ldr	r1, [r1, #16]
 c005aa0:	1a6f      	subs	r7, r5, r1
 c005aa2:	6965      	ldr	r5, [r4, #20]
 c005aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 c005aa8:	fb95 f5f3 	sdiv	r5, r5, r3
 c005aac:	f109 0301 	add.w	r3, r9, #1
 c005ab0:	443b      	add	r3, r7
 c005ab2:	429d      	cmp	r5, r3
 c005ab4:	bf38      	it	cc
 c005ab6:	461d      	movcc	r5, r3
 c005ab8:	0553      	lsls	r3, r2, #21
 c005aba:	d530      	bpl.n	c005b1e <__ssputs_r+0x9e>
 c005abc:	4629      	mov	r1, r5
 c005abe:	f000 fb3b 	bl	c006138 <_malloc_r>
 c005ac2:	4606      	mov	r6, r0
 c005ac4:	b950      	cbnz	r0, c005adc <__ssputs_r+0x5c>
 c005ac6:	230c      	movs	r3, #12
 c005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 c005acc:	f8ca 3000 	str.w	r3, [sl]
 c005ad0:	89a3      	ldrh	r3, [r4, #12]
 c005ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c005ad6:	81a3      	strh	r3, [r4, #12]
 c005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005adc:	463a      	mov	r2, r7
 c005ade:	6921      	ldr	r1, [r4, #16]
 c005ae0:	f000 fab8 	bl	c006054 <memcpy>
 c005ae4:	89a3      	ldrh	r3, [r4, #12]
 c005ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 c005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c005aee:	81a3      	strh	r3, [r4, #12]
 c005af0:	6126      	str	r6, [r4, #16]
 c005af2:	443e      	add	r6, r7
 c005af4:	6165      	str	r5, [r4, #20]
 c005af6:	1bed      	subs	r5, r5, r7
 c005af8:	6026      	str	r6, [r4, #0]
 c005afa:	464e      	mov	r6, r9
 c005afc:	60a5      	str	r5, [r4, #8]
 c005afe:	454e      	cmp	r6, r9
 c005b00:	d900      	bls.n	c005b04 <__ssputs_r+0x84>
 c005b02:	464e      	mov	r6, r9
 c005b04:	4632      	mov	r2, r6
 c005b06:	4641      	mov	r1, r8
 c005b08:	6820      	ldr	r0, [r4, #0]
 c005b0a:	f000 faae 	bl	c00606a <memmove>
 c005b0e:	68a3      	ldr	r3, [r4, #8]
 c005b10:	2000      	movs	r0, #0
 c005b12:	1b9b      	subs	r3, r3, r6
 c005b14:	60a3      	str	r3, [r4, #8]
 c005b16:	6823      	ldr	r3, [r4, #0]
 c005b18:	441e      	add	r6, r3
 c005b1a:	6026      	str	r6, [r4, #0]
 c005b1c:	e7dc      	b.n	c005ad8 <__ssputs_r+0x58>
 c005b1e:	462a      	mov	r2, r5
 c005b20:	f000 fb64 	bl	c0061ec <_realloc_r>
 c005b24:	4606      	mov	r6, r0
 c005b26:	2800      	cmp	r0, #0
 c005b28:	d1e2      	bne.n	c005af0 <__ssputs_r+0x70>
 c005b2a:	6921      	ldr	r1, [r4, #16]
 c005b2c:	4650      	mov	r0, sl
 c005b2e:	f000 fab5 	bl	c00609c <_free_r>
 c005b32:	e7c8      	b.n	c005ac6 <__ssputs_r+0x46>

0c005b34 <_svfiprintf_r>:
 c005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c005b38:	461d      	mov	r5, r3
 c005b3a:	898b      	ldrh	r3, [r1, #12]
 c005b3c:	b09d      	sub	sp, #116	; 0x74
 c005b3e:	4680      	mov	r8, r0
 c005b40:	061f      	lsls	r7, r3, #24
 c005b42:	460c      	mov	r4, r1
 c005b44:	4616      	mov	r6, r2
 c005b46:	d50f      	bpl.n	c005b68 <_svfiprintf_r+0x34>
 c005b48:	690b      	ldr	r3, [r1, #16]
 c005b4a:	b96b      	cbnz	r3, c005b68 <_svfiprintf_r+0x34>
 c005b4c:	2140      	movs	r1, #64	; 0x40
 c005b4e:	f000 faf3 	bl	c006138 <_malloc_r>
 c005b52:	6020      	str	r0, [r4, #0]
 c005b54:	6120      	str	r0, [r4, #16]
 c005b56:	b928      	cbnz	r0, c005b64 <_svfiprintf_r+0x30>
 c005b58:	230c      	movs	r3, #12
 c005b5a:	f8c8 3000 	str.w	r3, [r8]
 c005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 c005b62:	e0c8      	b.n	c005cf6 <_svfiprintf_r+0x1c2>
 c005b64:	2340      	movs	r3, #64	; 0x40
 c005b66:	6163      	str	r3, [r4, #20]
 c005b68:	2300      	movs	r3, #0
 c005b6a:	f04f 0b01 	mov.w	fp, #1
 c005b6e:	9503      	str	r5, [sp, #12]
 c005b70:	9309      	str	r3, [sp, #36]	; 0x24
 c005b72:	2320      	movs	r3, #32
 c005b74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c005b78:	2330      	movs	r3, #48	; 0x30
 c005b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c005b7e:	4637      	mov	r7, r6
 c005b80:	463d      	mov	r5, r7
 c005b82:	f815 3b01 	ldrb.w	r3, [r5], #1
 c005b86:	b10b      	cbz	r3, c005b8c <_svfiprintf_r+0x58>
 c005b88:	2b25      	cmp	r3, #37	; 0x25
 c005b8a:	d13e      	bne.n	c005c0a <_svfiprintf_r+0xd6>
 c005b8c:	ebb7 0a06 	subs.w	sl, r7, r6
 c005b90:	d00b      	beq.n	c005baa <_svfiprintf_r+0x76>
 c005b92:	4653      	mov	r3, sl
 c005b94:	4632      	mov	r2, r6
 c005b96:	4621      	mov	r1, r4
 c005b98:	4640      	mov	r0, r8
 c005b9a:	f7ff ff71 	bl	c005a80 <__ssputs_r>
 c005b9e:	3001      	adds	r0, #1
 c005ba0:	f000 80a4 	beq.w	c005cec <_svfiprintf_r+0x1b8>
 c005ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c005ba6:	4453      	add	r3, sl
 c005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 c005baa:	783b      	ldrb	r3, [r7, #0]
 c005bac:	2b00      	cmp	r3, #0
 c005bae:	f000 809d 	beq.w	c005cec <_svfiprintf_r+0x1b8>
 c005bb2:	2300      	movs	r3, #0
 c005bb4:	f04f 32ff 	mov.w	r2, #4294967295
 c005bb8:	9304      	str	r3, [sp, #16]
 c005bba:	9307      	str	r3, [sp, #28]
 c005bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c005bc0:	931a      	str	r3, [sp, #104]	; 0x68
 c005bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c005bc6:	462f      	mov	r7, r5
 c005bc8:	2205      	movs	r2, #5
 c005bca:	4851      	ldr	r0, [pc, #324]	; (c005d10 <_svfiprintf_r+0x1dc>)
 c005bcc:	f817 1b01 	ldrb.w	r1, [r7], #1
 c005bd0:	f000 fa32 	bl	c006038 <memchr>
 c005bd4:	9b04      	ldr	r3, [sp, #16]
 c005bd6:	b9d0      	cbnz	r0, c005c0e <_svfiprintf_r+0xda>
 c005bd8:	06d9      	lsls	r1, r3, #27
 c005bda:	bf44      	itt	mi
 c005bdc:	2220      	movmi	r2, #32
 c005bde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 c005be2:	071a      	lsls	r2, r3, #28
 c005be4:	bf44      	itt	mi
 c005be6:	222b      	movmi	r2, #43	; 0x2b
 c005be8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 c005bec:	782a      	ldrb	r2, [r5, #0]
 c005bee:	2a2a      	cmp	r2, #42	; 0x2a
 c005bf0:	d015      	beq.n	c005c1e <_svfiprintf_r+0xea>
 c005bf2:	462f      	mov	r7, r5
 c005bf4:	9a07      	ldr	r2, [sp, #28]
 c005bf6:	2000      	movs	r0, #0
 c005bf8:	250a      	movs	r5, #10
 c005bfa:	4639      	mov	r1, r7
 c005bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 c005c00:	3b30      	subs	r3, #48	; 0x30
 c005c02:	2b09      	cmp	r3, #9
 c005c04:	d94d      	bls.n	c005ca2 <_svfiprintf_r+0x16e>
 c005c06:	b1b8      	cbz	r0, c005c38 <_svfiprintf_r+0x104>
 c005c08:	e00f      	b.n	c005c2a <_svfiprintf_r+0xf6>
 c005c0a:	462f      	mov	r7, r5
 c005c0c:	e7b8      	b.n	c005b80 <_svfiprintf_r+0x4c>
 c005c0e:	4a40      	ldr	r2, [pc, #256]	; (c005d10 <_svfiprintf_r+0x1dc>)
 c005c10:	463d      	mov	r5, r7
 c005c12:	1a80      	subs	r0, r0, r2
 c005c14:	fa0b f000 	lsl.w	r0, fp, r0
 c005c18:	4318      	orrs	r0, r3
 c005c1a:	9004      	str	r0, [sp, #16]
 c005c1c:	e7d3      	b.n	c005bc6 <_svfiprintf_r+0x92>
 c005c1e:	9a03      	ldr	r2, [sp, #12]
 c005c20:	1d11      	adds	r1, r2, #4
 c005c22:	6812      	ldr	r2, [r2, #0]
 c005c24:	2a00      	cmp	r2, #0
 c005c26:	9103      	str	r1, [sp, #12]
 c005c28:	db01      	blt.n	c005c2e <_svfiprintf_r+0xfa>
 c005c2a:	9207      	str	r2, [sp, #28]
 c005c2c:	e004      	b.n	c005c38 <_svfiprintf_r+0x104>
 c005c2e:	4252      	negs	r2, r2
 c005c30:	f043 0302 	orr.w	r3, r3, #2
 c005c34:	9207      	str	r2, [sp, #28]
 c005c36:	9304      	str	r3, [sp, #16]
 c005c38:	783b      	ldrb	r3, [r7, #0]
 c005c3a:	2b2e      	cmp	r3, #46	; 0x2e
 c005c3c:	d10c      	bne.n	c005c58 <_svfiprintf_r+0x124>
 c005c3e:	787b      	ldrb	r3, [r7, #1]
 c005c40:	2b2a      	cmp	r3, #42	; 0x2a
 c005c42:	d133      	bne.n	c005cac <_svfiprintf_r+0x178>
 c005c44:	9b03      	ldr	r3, [sp, #12]
 c005c46:	3702      	adds	r7, #2
 c005c48:	1d1a      	adds	r2, r3, #4
 c005c4a:	681b      	ldr	r3, [r3, #0]
 c005c4c:	2b00      	cmp	r3, #0
 c005c4e:	9203      	str	r2, [sp, #12]
 c005c50:	bfb8      	it	lt
 c005c52:	f04f 33ff 	movlt.w	r3, #4294967295
 c005c56:	9305      	str	r3, [sp, #20]
 c005c58:	4d2e      	ldr	r5, [pc, #184]	; (c005d14 <_svfiprintf_r+0x1e0>)
 c005c5a:	2203      	movs	r2, #3
 c005c5c:	7839      	ldrb	r1, [r7, #0]
 c005c5e:	4628      	mov	r0, r5
 c005c60:	f000 f9ea 	bl	c006038 <memchr>
 c005c64:	b138      	cbz	r0, c005c76 <_svfiprintf_r+0x142>
 c005c66:	2340      	movs	r3, #64	; 0x40
 c005c68:	1b40      	subs	r0, r0, r5
 c005c6a:	3701      	adds	r7, #1
 c005c6c:	fa03 f000 	lsl.w	r0, r3, r0
 c005c70:	9b04      	ldr	r3, [sp, #16]
 c005c72:	4303      	orrs	r3, r0
 c005c74:	9304      	str	r3, [sp, #16]
 c005c76:	7839      	ldrb	r1, [r7, #0]
 c005c78:	2206      	movs	r2, #6
 c005c7a:	4827      	ldr	r0, [pc, #156]	; (c005d18 <_svfiprintf_r+0x1e4>)
 c005c7c:	1c7e      	adds	r6, r7, #1
 c005c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c005c82:	f000 f9d9 	bl	c006038 <memchr>
 c005c86:	2800      	cmp	r0, #0
 c005c88:	d038      	beq.n	c005cfc <_svfiprintf_r+0x1c8>
 c005c8a:	4b24      	ldr	r3, [pc, #144]	; (c005d1c <_svfiprintf_r+0x1e8>)
 c005c8c:	bb13      	cbnz	r3, c005cd4 <_svfiprintf_r+0x1a0>
 c005c8e:	9b03      	ldr	r3, [sp, #12]
 c005c90:	3307      	adds	r3, #7
 c005c92:	f023 0307 	bic.w	r3, r3, #7
 c005c96:	3308      	adds	r3, #8
 c005c98:	9303      	str	r3, [sp, #12]
 c005c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c005c9c:	444b      	add	r3, r9
 c005c9e:	9309      	str	r3, [sp, #36]	; 0x24
 c005ca0:	e76d      	b.n	c005b7e <_svfiprintf_r+0x4a>
 c005ca2:	fb05 3202 	mla	r2, r5, r2, r3
 c005ca6:	2001      	movs	r0, #1
 c005ca8:	460f      	mov	r7, r1
 c005caa:	e7a6      	b.n	c005bfa <_svfiprintf_r+0xc6>
 c005cac:	2300      	movs	r3, #0
 c005cae:	3701      	adds	r7, #1
 c005cb0:	250a      	movs	r5, #10
 c005cb2:	4619      	mov	r1, r3
 c005cb4:	9305      	str	r3, [sp, #20]
 c005cb6:	4638      	mov	r0, r7
 c005cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 c005cbc:	3a30      	subs	r2, #48	; 0x30
 c005cbe:	2a09      	cmp	r2, #9
 c005cc0:	d903      	bls.n	c005cca <_svfiprintf_r+0x196>
 c005cc2:	2b00      	cmp	r3, #0
 c005cc4:	d0c8      	beq.n	c005c58 <_svfiprintf_r+0x124>
 c005cc6:	9105      	str	r1, [sp, #20]
 c005cc8:	e7c6      	b.n	c005c58 <_svfiprintf_r+0x124>
 c005cca:	fb05 2101 	mla	r1, r5, r1, r2
 c005cce:	2301      	movs	r3, #1
 c005cd0:	4607      	mov	r7, r0
 c005cd2:	e7f0      	b.n	c005cb6 <_svfiprintf_r+0x182>
 c005cd4:	ab03      	add	r3, sp, #12
 c005cd6:	4622      	mov	r2, r4
 c005cd8:	a904      	add	r1, sp, #16
 c005cda:	4640      	mov	r0, r8
 c005cdc:	9300      	str	r3, [sp, #0]
 c005cde:	4b10      	ldr	r3, [pc, #64]	; (c005d20 <_svfiprintf_r+0x1ec>)
 c005ce0:	e000      	b.n	c005ce4 <_svfiprintf_r+0x1b0>
 c005ce2:	bf00      	nop
 c005ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 c005ce8:	4681      	mov	r9, r0
 c005cea:	d1d6      	bne.n	c005c9a <_svfiprintf_r+0x166>
 c005cec:	89a3      	ldrh	r3, [r4, #12]
 c005cee:	065b      	lsls	r3, r3, #25
 c005cf0:	f53f af35 	bmi.w	c005b5e <_svfiprintf_r+0x2a>
 c005cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 c005cf6:	b01d      	add	sp, #116	; 0x74
 c005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c005cfc:	ab03      	add	r3, sp, #12
 c005cfe:	4622      	mov	r2, r4
 c005d00:	a904      	add	r1, sp, #16
 c005d02:	4640      	mov	r0, r8
 c005d04:	9300      	str	r3, [sp, #0]
 c005d06:	4b06      	ldr	r3, [pc, #24]	; (c005d20 <_svfiprintf_r+0x1ec>)
 c005d08:	f000 f884 	bl	c005e14 <_printf_i>
 c005d0c:	e7ea      	b.n	c005ce4 <_svfiprintf_r+0x1b0>
 c005d0e:	bf00      	nop
 c005d10:	0c006334 	.word	0x0c006334
 c005d14:	0c00633a 	.word	0x0c00633a
 c005d18:	0c00633e 	.word	0x0c00633e
 c005d1c:	00000000 	.word	0x00000000
 c005d20:	0c005a81 	.word	0x0c005a81

0c005d24 <_printf_common>:
 c005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c005d28:	4691      	mov	r9, r2
 c005d2a:	461f      	mov	r7, r3
 c005d2c:	688a      	ldr	r2, [r1, #8]
 c005d2e:	4606      	mov	r6, r0
 c005d30:	690b      	ldr	r3, [r1, #16]
 c005d32:	460c      	mov	r4, r1
 c005d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c005d38:	4293      	cmp	r3, r2
 c005d3a:	bfb8      	it	lt
 c005d3c:	4613      	movlt	r3, r2
 c005d3e:	f8c9 3000 	str.w	r3, [r9]
 c005d42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c005d46:	b112      	cbz	r2, c005d4e <_printf_common+0x2a>
 c005d48:	3301      	adds	r3, #1
 c005d4a:	f8c9 3000 	str.w	r3, [r9]
 c005d4e:	6823      	ldr	r3, [r4, #0]
 c005d50:	0699      	lsls	r1, r3, #26
 c005d52:	bf42      	ittt	mi
 c005d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 c005d58:	3302      	addmi	r3, #2
 c005d5a:	f8c9 3000 	strmi.w	r3, [r9]
 c005d5e:	6825      	ldr	r5, [r4, #0]
 c005d60:	f015 0506 	ands.w	r5, r5, #6
 c005d64:	d107      	bne.n	c005d76 <_printf_common+0x52>
 c005d66:	f104 0a19 	add.w	sl, r4, #25
 c005d6a:	68e3      	ldr	r3, [r4, #12]
 c005d6c:	f8d9 2000 	ldr.w	r2, [r9]
 c005d70:	1a9b      	subs	r3, r3, r2
 c005d72:	42ab      	cmp	r3, r5
 c005d74:	dc2b      	bgt.n	c005dce <_printf_common+0xaa>
 c005d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 c005d7a:	6822      	ldr	r2, [r4, #0]
 c005d7c:	3300      	adds	r3, #0
 c005d7e:	bf18      	it	ne
 c005d80:	2301      	movne	r3, #1
 c005d82:	0692      	lsls	r2, r2, #26
 c005d84:	d430      	bmi.n	c005de8 <_printf_common+0xc4>
 c005d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c005d8a:	4639      	mov	r1, r7
 c005d8c:	4630      	mov	r0, r6
 c005d8e:	47c0      	blx	r8
 c005d90:	3001      	adds	r0, #1
 c005d92:	d023      	beq.n	c005ddc <_printf_common+0xb8>
 c005d94:	6823      	ldr	r3, [r4, #0]
 c005d96:	341a      	adds	r4, #26
 c005d98:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c005d9c:	f003 0306 	and.w	r3, r3, #6
 c005da0:	f8d9 2000 	ldr.w	r2, [r9]
 c005da4:	f04f 0900 	mov.w	r9, #0
 c005da8:	2b04      	cmp	r3, #4
 c005daa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c005dae:	bf08      	it	eq
 c005db0:	1aad      	subeq	r5, r5, r2
 c005db2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c005db6:	bf14      	ite	ne
 c005db8:	2500      	movne	r5, #0
 c005dba:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c005dbe:	4293      	cmp	r3, r2
 c005dc0:	bfc4      	itt	gt
 c005dc2:	1a9b      	subgt	r3, r3, r2
 c005dc4:	18ed      	addgt	r5, r5, r3
 c005dc6:	454d      	cmp	r5, r9
 c005dc8:	d11a      	bne.n	c005e00 <_printf_common+0xdc>
 c005dca:	2000      	movs	r0, #0
 c005dcc:	e008      	b.n	c005de0 <_printf_common+0xbc>
 c005dce:	2301      	movs	r3, #1
 c005dd0:	4652      	mov	r2, sl
 c005dd2:	4639      	mov	r1, r7
 c005dd4:	4630      	mov	r0, r6
 c005dd6:	47c0      	blx	r8
 c005dd8:	3001      	adds	r0, #1
 c005dda:	d103      	bne.n	c005de4 <_printf_common+0xc0>
 c005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 c005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005de4:	3501      	adds	r5, #1
 c005de6:	e7c0      	b.n	c005d6a <_printf_common+0x46>
 c005de8:	18e1      	adds	r1, r4, r3
 c005dea:	1c5a      	adds	r2, r3, #1
 c005dec:	2030      	movs	r0, #48	; 0x30
 c005dee:	3302      	adds	r3, #2
 c005df0:	4422      	add	r2, r4
 c005df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c005df6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c005dfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c005dfe:	e7c2      	b.n	c005d86 <_printf_common+0x62>
 c005e00:	2301      	movs	r3, #1
 c005e02:	4622      	mov	r2, r4
 c005e04:	4639      	mov	r1, r7
 c005e06:	4630      	mov	r0, r6
 c005e08:	47c0      	blx	r8
 c005e0a:	3001      	adds	r0, #1
 c005e0c:	d0e6      	beq.n	c005ddc <_printf_common+0xb8>
 c005e0e:	f109 0901 	add.w	r9, r9, #1
 c005e12:	e7d8      	b.n	c005dc6 <_printf_common+0xa2>

0c005e14 <_printf_i>:
 c005e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c005e18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 c005e1c:	460c      	mov	r4, r1
 c005e1e:	7e09      	ldrb	r1, [r1, #24]
 c005e20:	b085      	sub	sp, #20
 c005e22:	4617      	mov	r7, r2
 c005e24:	4606      	mov	r6, r0
 c005e26:	296e      	cmp	r1, #110	; 0x6e
 c005e28:	4698      	mov	r8, r3
 c005e2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c005e2c:	f000 80b3 	beq.w	c005f96 <_printf_i+0x182>
 c005e30:	d822      	bhi.n	c005e78 <_printf_i+0x64>
 c005e32:	2963      	cmp	r1, #99	; 0x63
 c005e34:	d036      	beq.n	c005ea4 <_printf_i+0x90>
 c005e36:	d80a      	bhi.n	c005e4e <_printf_i+0x3a>
 c005e38:	2900      	cmp	r1, #0
 c005e3a:	f000 80b9 	beq.w	c005fb0 <_printf_i+0x19c>
 c005e3e:	2958      	cmp	r1, #88	; 0x58
 c005e40:	f000 8083 	beq.w	c005f4a <_printf_i+0x136>
 c005e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005e48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 c005e4c:	e032      	b.n	c005eb4 <_printf_i+0xa0>
 c005e4e:	2964      	cmp	r1, #100	; 0x64
 c005e50:	d001      	beq.n	c005e56 <_printf_i+0x42>
 c005e52:	2969      	cmp	r1, #105	; 0x69
 c005e54:	d1f6      	bne.n	c005e44 <_printf_i+0x30>
 c005e56:	6820      	ldr	r0, [r4, #0]
 c005e58:	6813      	ldr	r3, [r2, #0]
 c005e5a:	0605      	lsls	r5, r0, #24
 c005e5c:	f103 0104 	add.w	r1, r3, #4
 c005e60:	d52a      	bpl.n	c005eb8 <_printf_i+0xa4>
 c005e62:	681b      	ldr	r3, [r3, #0]
 c005e64:	6011      	str	r1, [r2, #0]
 c005e66:	2b00      	cmp	r3, #0
 c005e68:	da03      	bge.n	c005e72 <_printf_i+0x5e>
 c005e6a:	222d      	movs	r2, #45	; 0x2d
 c005e6c:	425b      	negs	r3, r3
 c005e6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 c005e72:	486f      	ldr	r0, [pc, #444]	; (c006030 <_printf_i+0x21c>)
 c005e74:	220a      	movs	r2, #10
 c005e76:	e039      	b.n	c005eec <_printf_i+0xd8>
 c005e78:	2973      	cmp	r1, #115	; 0x73
 c005e7a:	f000 809d 	beq.w	c005fb8 <_printf_i+0x1a4>
 c005e7e:	d808      	bhi.n	c005e92 <_printf_i+0x7e>
 c005e80:	296f      	cmp	r1, #111	; 0x6f
 c005e82:	d020      	beq.n	c005ec6 <_printf_i+0xb2>
 c005e84:	2970      	cmp	r1, #112	; 0x70
 c005e86:	d1dd      	bne.n	c005e44 <_printf_i+0x30>
 c005e88:	6823      	ldr	r3, [r4, #0]
 c005e8a:	f043 0320 	orr.w	r3, r3, #32
 c005e8e:	6023      	str	r3, [r4, #0]
 c005e90:	e003      	b.n	c005e9a <_printf_i+0x86>
 c005e92:	2975      	cmp	r1, #117	; 0x75
 c005e94:	d017      	beq.n	c005ec6 <_printf_i+0xb2>
 c005e96:	2978      	cmp	r1, #120	; 0x78
 c005e98:	d1d4      	bne.n	c005e44 <_printf_i+0x30>
 c005e9a:	2378      	movs	r3, #120	; 0x78
 c005e9c:	4865      	ldr	r0, [pc, #404]	; (c006034 <_printf_i+0x220>)
 c005e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c005ea2:	e055      	b.n	c005f50 <_printf_i+0x13c>
 c005ea4:	6813      	ldr	r3, [r2, #0]
 c005ea6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005eaa:	1d19      	adds	r1, r3, #4
 c005eac:	681b      	ldr	r3, [r3, #0]
 c005eae:	6011      	str	r1, [r2, #0]
 c005eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c005eb4:	2301      	movs	r3, #1
 c005eb6:	e08c      	b.n	c005fd2 <_printf_i+0x1be>
 c005eb8:	681b      	ldr	r3, [r3, #0]
 c005eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 c005ebe:	6011      	str	r1, [r2, #0]
 c005ec0:	bf18      	it	ne
 c005ec2:	b21b      	sxthne	r3, r3
 c005ec4:	e7cf      	b.n	c005e66 <_printf_i+0x52>
 c005ec6:	6813      	ldr	r3, [r2, #0]
 c005ec8:	6825      	ldr	r5, [r4, #0]
 c005eca:	1d18      	adds	r0, r3, #4
 c005ecc:	6010      	str	r0, [r2, #0]
 c005ece:	0628      	lsls	r0, r5, #24
 c005ed0:	d501      	bpl.n	c005ed6 <_printf_i+0xc2>
 c005ed2:	681b      	ldr	r3, [r3, #0]
 c005ed4:	e002      	b.n	c005edc <_printf_i+0xc8>
 c005ed6:	0668      	lsls	r0, r5, #25
 c005ed8:	d5fb      	bpl.n	c005ed2 <_printf_i+0xbe>
 c005eda:	881b      	ldrh	r3, [r3, #0]
 c005edc:	296f      	cmp	r1, #111	; 0x6f
 c005ede:	4854      	ldr	r0, [pc, #336]	; (c006030 <_printf_i+0x21c>)
 c005ee0:	bf14      	ite	ne
 c005ee2:	220a      	movne	r2, #10
 c005ee4:	2208      	moveq	r2, #8
 c005ee6:	2100      	movs	r1, #0
 c005ee8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c005eec:	6865      	ldr	r5, [r4, #4]
 c005eee:	2d00      	cmp	r5, #0
 c005ef0:	60a5      	str	r5, [r4, #8]
 c005ef2:	f2c0 8095 	blt.w	c006020 <_printf_i+0x20c>
 c005ef6:	6821      	ldr	r1, [r4, #0]
 c005ef8:	f021 0104 	bic.w	r1, r1, #4
 c005efc:	6021      	str	r1, [r4, #0]
 c005efe:	2b00      	cmp	r3, #0
 c005f00:	d13d      	bne.n	c005f7e <_printf_i+0x16a>
 c005f02:	2d00      	cmp	r5, #0
 c005f04:	f040 808e 	bne.w	c006024 <_printf_i+0x210>
 c005f08:	4665      	mov	r5, ip
 c005f0a:	2a08      	cmp	r2, #8
 c005f0c:	d10b      	bne.n	c005f26 <_printf_i+0x112>
 c005f0e:	6823      	ldr	r3, [r4, #0]
 c005f10:	07db      	lsls	r3, r3, #31
 c005f12:	d508      	bpl.n	c005f26 <_printf_i+0x112>
 c005f14:	6923      	ldr	r3, [r4, #16]
 c005f16:	6862      	ldr	r2, [r4, #4]
 c005f18:	429a      	cmp	r2, r3
 c005f1a:	bfde      	ittt	le
 c005f1c:	2330      	movle	r3, #48	; 0x30
 c005f1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 c005f22:	f105 35ff 	addle.w	r5, r5, #4294967295
 c005f26:	ebac 0305 	sub.w	r3, ip, r5
 c005f2a:	6123      	str	r3, [r4, #16]
 c005f2c:	f8cd 8000 	str.w	r8, [sp]
 c005f30:	463b      	mov	r3, r7
 c005f32:	aa03      	add	r2, sp, #12
 c005f34:	4621      	mov	r1, r4
 c005f36:	4630      	mov	r0, r6
 c005f38:	f7ff fef4 	bl	c005d24 <_printf_common>
 c005f3c:	3001      	adds	r0, #1
 c005f3e:	d14d      	bne.n	c005fdc <_printf_i+0x1c8>
 c005f40:	f04f 30ff 	mov.w	r0, #4294967295
 c005f44:	b005      	add	sp, #20
 c005f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c005f4a:	4839      	ldr	r0, [pc, #228]	; (c006030 <_printf_i+0x21c>)
 c005f4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 c005f50:	6813      	ldr	r3, [r2, #0]
 c005f52:	6821      	ldr	r1, [r4, #0]
 c005f54:	1d1d      	adds	r5, r3, #4
 c005f56:	681b      	ldr	r3, [r3, #0]
 c005f58:	6015      	str	r5, [r2, #0]
 c005f5a:	060a      	lsls	r2, r1, #24
 c005f5c:	d50b      	bpl.n	c005f76 <_printf_i+0x162>
 c005f5e:	07ca      	lsls	r2, r1, #31
 c005f60:	bf44      	itt	mi
 c005f62:	f041 0120 	orrmi.w	r1, r1, #32
 c005f66:	6021      	strmi	r1, [r4, #0]
 c005f68:	b91b      	cbnz	r3, c005f72 <_printf_i+0x15e>
 c005f6a:	6822      	ldr	r2, [r4, #0]
 c005f6c:	f022 0220 	bic.w	r2, r2, #32
 c005f70:	6022      	str	r2, [r4, #0]
 c005f72:	2210      	movs	r2, #16
 c005f74:	e7b7      	b.n	c005ee6 <_printf_i+0xd2>
 c005f76:	064d      	lsls	r5, r1, #25
 c005f78:	bf48      	it	mi
 c005f7a:	b29b      	uxthmi	r3, r3
 c005f7c:	e7ef      	b.n	c005f5e <_printf_i+0x14a>
 c005f7e:	4665      	mov	r5, ip
 c005f80:	fbb3 f1f2 	udiv	r1, r3, r2
 c005f84:	fb02 3311 	mls	r3, r2, r1, r3
 c005f88:	5cc3      	ldrb	r3, [r0, r3]
 c005f8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 c005f8e:	460b      	mov	r3, r1
 c005f90:	2900      	cmp	r1, #0
 c005f92:	d1f5      	bne.n	c005f80 <_printf_i+0x16c>
 c005f94:	e7b9      	b.n	c005f0a <_printf_i+0xf6>
 c005f96:	6813      	ldr	r3, [r2, #0]
 c005f98:	6825      	ldr	r5, [r4, #0]
 c005f9a:	1d18      	adds	r0, r3, #4
 c005f9c:	6961      	ldr	r1, [r4, #20]
 c005f9e:	6010      	str	r0, [r2, #0]
 c005fa0:	0628      	lsls	r0, r5, #24
 c005fa2:	681b      	ldr	r3, [r3, #0]
 c005fa4:	d501      	bpl.n	c005faa <_printf_i+0x196>
 c005fa6:	6019      	str	r1, [r3, #0]
 c005fa8:	e002      	b.n	c005fb0 <_printf_i+0x19c>
 c005faa:	066a      	lsls	r2, r5, #25
 c005fac:	d5fb      	bpl.n	c005fa6 <_printf_i+0x192>
 c005fae:	8019      	strh	r1, [r3, #0]
 c005fb0:	2300      	movs	r3, #0
 c005fb2:	4665      	mov	r5, ip
 c005fb4:	6123      	str	r3, [r4, #16]
 c005fb6:	e7b9      	b.n	c005f2c <_printf_i+0x118>
 c005fb8:	6813      	ldr	r3, [r2, #0]
 c005fba:	1d19      	adds	r1, r3, #4
 c005fbc:	6011      	str	r1, [r2, #0]
 c005fbe:	2100      	movs	r1, #0
 c005fc0:	681d      	ldr	r5, [r3, #0]
 c005fc2:	6862      	ldr	r2, [r4, #4]
 c005fc4:	4628      	mov	r0, r5
 c005fc6:	f000 f837 	bl	c006038 <memchr>
 c005fca:	b108      	cbz	r0, c005fd0 <_printf_i+0x1bc>
 c005fcc:	1b40      	subs	r0, r0, r5
 c005fce:	6060      	str	r0, [r4, #4]
 c005fd0:	6863      	ldr	r3, [r4, #4]
 c005fd2:	6123      	str	r3, [r4, #16]
 c005fd4:	2300      	movs	r3, #0
 c005fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c005fda:	e7a7      	b.n	c005f2c <_printf_i+0x118>
 c005fdc:	6923      	ldr	r3, [r4, #16]
 c005fde:	462a      	mov	r2, r5
 c005fe0:	4639      	mov	r1, r7
 c005fe2:	4630      	mov	r0, r6
 c005fe4:	47c0      	blx	r8
 c005fe6:	3001      	adds	r0, #1
 c005fe8:	d0aa      	beq.n	c005f40 <_printf_i+0x12c>
 c005fea:	6823      	ldr	r3, [r4, #0]
 c005fec:	079b      	lsls	r3, r3, #30
 c005fee:	d413      	bmi.n	c006018 <_printf_i+0x204>
 c005ff0:	68e0      	ldr	r0, [r4, #12]
 c005ff2:	9b03      	ldr	r3, [sp, #12]
 c005ff4:	4298      	cmp	r0, r3
 c005ff6:	bfb8      	it	lt
 c005ff8:	4618      	movlt	r0, r3
 c005ffa:	e7a3      	b.n	c005f44 <_printf_i+0x130>
 c005ffc:	2301      	movs	r3, #1
 c005ffe:	464a      	mov	r2, r9
 c006000:	4639      	mov	r1, r7
 c006002:	4630      	mov	r0, r6
 c006004:	47c0      	blx	r8
 c006006:	3001      	adds	r0, #1
 c006008:	d09a      	beq.n	c005f40 <_printf_i+0x12c>
 c00600a:	3501      	adds	r5, #1
 c00600c:	68e3      	ldr	r3, [r4, #12]
 c00600e:	9a03      	ldr	r2, [sp, #12]
 c006010:	1a9b      	subs	r3, r3, r2
 c006012:	42ab      	cmp	r3, r5
 c006014:	dcf2      	bgt.n	c005ffc <_printf_i+0x1e8>
 c006016:	e7eb      	b.n	c005ff0 <_printf_i+0x1dc>
 c006018:	2500      	movs	r5, #0
 c00601a:	f104 0919 	add.w	r9, r4, #25
 c00601e:	e7f5      	b.n	c00600c <_printf_i+0x1f8>
 c006020:	2b00      	cmp	r3, #0
 c006022:	d1ac      	bne.n	c005f7e <_printf_i+0x16a>
 c006024:	7803      	ldrb	r3, [r0, #0]
 c006026:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c00602a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c00602e:	e76c      	b.n	c005f0a <_printf_i+0xf6>
 c006030:	0c006345 	.word	0x0c006345
 c006034:	0c006356 	.word	0x0c006356

0c006038 <memchr>:
 c006038:	b2c9      	uxtb	r1, r1
 c00603a:	4402      	add	r2, r0
 c00603c:	b510      	push	{r4, lr}
 c00603e:	4290      	cmp	r0, r2
 c006040:	4603      	mov	r3, r0
 c006042:	d101      	bne.n	c006048 <memchr+0x10>
 c006044:	2300      	movs	r3, #0
 c006046:	e003      	b.n	c006050 <memchr+0x18>
 c006048:	781c      	ldrb	r4, [r3, #0]
 c00604a:	3001      	adds	r0, #1
 c00604c:	428c      	cmp	r4, r1
 c00604e:	d1f6      	bne.n	c00603e <memchr+0x6>
 c006050:	4618      	mov	r0, r3
 c006052:	bd10      	pop	{r4, pc}

0c006054 <memcpy>:
 c006054:	1e43      	subs	r3, r0, #1
 c006056:	440a      	add	r2, r1
 c006058:	b510      	push	{r4, lr}
 c00605a:	4291      	cmp	r1, r2
 c00605c:	d100      	bne.n	c006060 <memcpy+0xc>
 c00605e:	bd10      	pop	{r4, pc}
 c006060:	f811 4b01 	ldrb.w	r4, [r1], #1
 c006064:	f803 4f01 	strb.w	r4, [r3, #1]!
 c006068:	e7f7      	b.n	c00605a <memcpy+0x6>

0c00606a <memmove>:
 c00606a:	4288      	cmp	r0, r1
 c00606c:	eb01 0302 	add.w	r3, r1, r2
 c006070:	b510      	push	{r4, lr}
 c006072:	d807      	bhi.n	c006084 <memmove+0x1a>
 c006074:	1e42      	subs	r2, r0, #1
 c006076:	4299      	cmp	r1, r3
 c006078:	d00a      	beq.n	c006090 <memmove+0x26>
 c00607a:	f811 4b01 	ldrb.w	r4, [r1], #1
 c00607e:	f802 4f01 	strb.w	r4, [r2, #1]!
 c006082:	e7f8      	b.n	c006076 <memmove+0xc>
 c006084:	4283      	cmp	r3, r0
 c006086:	d9f5      	bls.n	c006074 <memmove+0xa>
 c006088:	1881      	adds	r1, r0, r2
 c00608a:	1ad2      	subs	r2, r2, r3
 c00608c:	42d3      	cmn	r3, r2
 c00608e:	d100      	bne.n	c006092 <memmove+0x28>
 c006090:	bd10      	pop	{r4, pc}
 c006092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c006096:	f801 4d01 	strb.w	r4, [r1, #-1]!
 c00609a:	e7f7      	b.n	c00608c <memmove+0x22>

0c00609c <_free_r>:
 c00609c:	b538      	push	{r3, r4, r5, lr}
 c00609e:	4605      	mov	r5, r0
 c0060a0:	2900      	cmp	r1, #0
 c0060a2:	d045      	beq.n	c006130 <_free_r+0x94>
 c0060a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c0060a8:	1f0c      	subs	r4, r1, #4
 c0060aa:	2b00      	cmp	r3, #0
 c0060ac:	bfb8      	it	lt
 c0060ae:	18e4      	addlt	r4, r4, r3
 c0060b0:	f000 f8d2 	bl	c006258 <__malloc_lock>
 c0060b4:	4a1f      	ldr	r2, [pc, #124]	; (c006134 <_free_r+0x98>)
 c0060b6:	6813      	ldr	r3, [r2, #0]
 c0060b8:	4610      	mov	r0, r2
 c0060ba:	b933      	cbnz	r3, c0060ca <_free_r+0x2e>
 c0060bc:	6063      	str	r3, [r4, #4]
 c0060be:	6014      	str	r4, [r2, #0]
 c0060c0:	4628      	mov	r0, r5
 c0060c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c0060c6:	f000 b8c8 	b.w	c00625a <__malloc_unlock>
 c0060ca:	42a3      	cmp	r3, r4
 c0060cc:	d90c      	bls.n	c0060e8 <_free_r+0x4c>
 c0060ce:	6821      	ldr	r1, [r4, #0]
 c0060d0:	1862      	adds	r2, r4, r1
 c0060d2:	4293      	cmp	r3, r2
 c0060d4:	bf02      	ittt	eq
 c0060d6:	681a      	ldreq	r2, [r3, #0]
 c0060d8:	685b      	ldreq	r3, [r3, #4]
 c0060da:	1852      	addeq	r2, r2, r1
 c0060dc:	6063      	str	r3, [r4, #4]
 c0060de:	bf08      	it	eq
 c0060e0:	6022      	streq	r2, [r4, #0]
 c0060e2:	6004      	str	r4, [r0, #0]
 c0060e4:	e7ec      	b.n	c0060c0 <_free_r+0x24>
 c0060e6:	4613      	mov	r3, r2
 c0060e8:	685a      	ldr	r2, [r3, #4]
 c0060ea:	b10a      	cbz	r2, c0060f0 <_free_r+0x54>
 c0060ec:	42a2      	cmp	r2, r4
 c0060ee:	d9fa      	bls.n	c0060e6 <_free_r+0x4a>
 c0060f0:	6819      	ldr	r1, [r3, #0]
 c0060f2:	1858      	adds	r0, r3, r1
 c0060f4:	42a0      	cmp	r0, r4
 c0060f6:	d10b      	bne.n	c006110 <_free_r+0x74>
 c0060f8:	6820      	ldr	r0, [r4, #0]
 c0060fa:	4401      	add	r1, r0
 c0060fc:	1858      	adds	r0, r3, r1
 c0060fe:	6019      	str	r1, [r3, #0]
 c006100:	4282      	cmp	r2, r0
 c006102:	d1dd      	bne.n	c0060c0 <_free_r+0x24>
 c006104:	6810      	ldr	r0, [r2, #0]
 c006106:	6852      	ldr	r2, [r2, #4]
 c006108:	4401      	add	r1, r0
 c00610a:	605a      	str	r2, [r3, #4]
 c00610c:	6019      	str	r1, [r3, #0]
 c00610e:	e7d7      	b.n	c0060c0 <_free_r+0x24>
 c006110:	d902      	bls.n	c006118 <_free_r+0x7c>
 c006112:	230c      	movs	r3, #12
 c006114:	602b      	str	r3, [r5, #0]
 c006116:	e7d3      	b.n	c0060c0 <_free_r+0x24>
 c006118:	6820      	ldr	r0, [r4, #0]
 c00611a:	1821      	adds	r1, r4, r0
 c00611c:	428a      	cmp	r2, r1
 c00611e:	bf02      	ittt	eq
 c006120:	6811      	ldreq	r1, [r2, #0]
 c006122:	6852      	ldreq	r2, [r2, #4]
 c006124:	1809      	addeq	r1, r1, r0
 c006126:	6062      	str	r2, [r4, #4]
 c006128:	bf08      	it	eq
 c00612a:	6021      	streq	r1, [r4, #0]
 c00612c:	605c      	str	r4, [r3, #4]
 c00612e:	e7c7      	b.n	c0060c0 <_free_r+0x24>
 c006130:	bd38      	pop	{r3, r4, r5, pc}
 c006132:	bf00      	nop
 c006134:	30000098 	.word	0x30000098

0c006138 <_malloc_r>:
 c006138:	b570      	push	{r4, r5, r6, lr}
 c00613a:	1ccd      	adds	r5, r1, #3
 c00613c:	4606      	mov	r6, r0
 c00613e:	f025 0503 	bic.w	r5, r5, #3
 c006142:	3508      	adds	r5, #8
 c006144:	2d0c      	cmp	r5, #12
 c006146:	bf38      	it	cc
 c006148:	250c      	movcc	r5, #12
 c00614a:	2d00      	cmp	r5, #0
 c00614c:	db01      	blt.n	c006152 <_malloc_r+0x1a>
 c00614e:	42a9      	cmp	r1, r5
 c006150:	d903      	bls.n	c00615a <_malloc_r+0x22>
 c006152:	230c      	movs	r3, #12
 c006154:	6033      	str	r3, [r6, #0]
 c006156:	2000      	movs	r0, #0
 c006158:	bd70      	pop	{r4, r5, r6, pc}
 c00615a:	f000 f87d 	bl	c006258 <__malloc_lock>
 c00615e:	4a21      	ldr	r2, [pc, #132]	; (c0061e4 <_malloc_r+0xac>)
 c006160:	6814      	ldr	r4, [r2, #0]
 c006162:	4621      	mov	r1, r4
 c006164:	b991      	cbnz	r1, c00618c <_malloc_r+0x54>
 c006166:	4c20      	ldr	r4, [pc, #128]	; (c0061e8 <_malloc_r+0xb0>)
 c006168:	6823      	ldr	r3, [r4, #0]
 c00616a:	b91b      	cbnz	r3, c006174 <_malloc_r+0x3c>
 c00616c:	4630      	mov	r0, r6
 c00616e:	f000 f863 	bl	c006238 <_sbrk_r>
 c006172:	6020      	str	r0, [r4, #0]
 c006174:	4629      	mov	r1, r5
 c006176:	4630      	mov	r0, r6
 c006178:	f000 f85e 	bl	c006238 <_sbrk_r>
 c00617c:	1c43      	adds	r3, r0, #1
 c00617e:	d124      	bne.n	c0061ca <_malloc_r+0x92>
 c006180:	230c      	movs	r3, #12
 c006182:	4630      	mov	r0, r6
 c006184:	6033      	str	r3, [r6, #0]
 c006186:	f000 f868 	bl	c00625a <__malloc_unlock>
 c00618a:	e7e4      	b.n	c006156 <_malloc_r+0x1e>
 c00618c:	680b      	ldr	r3, [r1, #0]
 c00618e:	1b5b      	subs	r3, r3, r5
 c006190:	d418      	bmi.n	c0061c4 <_malloc_r+0x8c>
 c006192:	2b0b      	cmp	r3, #11
 c006194:	d90f      	bls.n	c0061b6 <_malloc_r+0x7e>
 c006196:	18cc      	adds	r4, r1, r3
 c006198:	600b      	str	r3, [r1, #0]
 c00619a:	50cd      	str	r5, [r1, r3]
 c00619c:	4630      	mov	r0, r6
 c00619e:	f000 f85c 	bl	c00625a <__malloc_unlock>
 c0061a2:	f104 000b 	add.w	r0, r4, #11
 c0061a6:	1d23      	adds	r3, r4, #4
 c0061a8:	f020 0007 	bic.w	r0, r0, #7
 c0061ac:	1ac3      	subs	r3, r0, r3
 c0061ae:	d0d3      	beq.n	c006158 <_malloc_r+0x20>
 c0061b0:	425a      	negs	r2, r3
 c0061b2:	50e2      	str	r2, [r4, r3]
 c0061b4:	e7d0      	b.n	c006158 <_malloc_r+0x20>
 c0061b6:	428c      	cmp	r4, r1
 c0061b8:	684b      	ldr	r3, [r1, #4]
 c0061ba:	bf1a      	itte	ne
 c0061bc:	6063      	strne	r3, [r4, #4]
 c0061be:	460c      	movne	r4, r1
 c0061c0:	6013      	streq	r3, [r2, #0]
 c0061c2:	e7eb      	b.n	c00619c <_malloc_r+0x64>
 c0061c4:	460c      	mov	r4, r1
 c0061c6:	6849      	ldr	r1, [r1, #4]
 c0061c8:	e7cc      	b.n	c006164 <_malloc_r+0x2c>
 c0061ca:	1cc4      	adds	r4, r0, #3
 c0061cc:	f024 0403 	bic.w	r4, r4, #3
 c0061d0:	42a0      	cmp	r0, r4
 c0061d2:	d005      	beq.n	c0061e0 <_malloc_r+0xa8>
 c0061d4:	1a21      	subs	r1, r4, r0
 c0061d6:	4630      	mov	r0, r6
 c0061d8:	f000 f82e 	bl	c006238 <_sbrk_r>
 c0061dc:	3001      	adds	r0, #1
 c0061de:	d0cf      	beq.n	c006180 <_malloc_r+0x48>
 c0061e0:	6025      	str	r5, [r4, #0]
 c0061e2:	e7db      	b.n	c00619c <_malloc_r+0x64>
 c0061e4:	30000098 	.word	0x30000098
 c0061e8:	3000009c 	.word	0x3000009c

0c0061ec <_realloc_r>:
 c0061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0061ee:	4607      	mov	r7, r0
 c0061f0:	4614      	mov	r4, r2
 c0061f2:	460e      	mov	r6, r1
 c0061f4:	b921      	cbnz	r1, c006200 <_realloc_r+0x14>
 c0061f6:	4611      	mov	r1, r2
 c0061f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 c0061fc:	f7ff bf9c 	b.w	c006138 <_malloc_r>
 c006200:	b922      	cbnz	r2, c00620c <_realloc_r+0x20>
 c006202:	4625      	mov	r5, r4
 c006204:	f7ff ff4a 	bl	c00609c <_free_r>
 c006208:	4628      	mov	r0, r5
 c00620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00620c:	f000 f826 	bl	c00625c <_malloc_usable_size_r>
 c006210:	42a0      	cmp	r0, r4
 c006212:	d20f      	bcs.n	c006234 <_realloc_r+0x48>
 c006214:	4621      	mov	r1, r4
 c006216:	4638      	mov	r0, r7
 c006218:	f7ff ff8e 	bl	c006138 <_malloc_r>
 c00621c:	4605      	mov	r5, r0
 c00621e:	2800      	cmp	r0, #0
 c006220:	d0f2      	beq.n	c006208 <_realloc_r+0x1c>
 c006222:	4631      	mov	r1, r6
 c006224:	4622      	mov	r2, r4
 c006226:	f7ff ff15 	bl	c006054 <memcpy>
 c00622a:	4631      	mov	r1, r6
 c00622c:	4638      	mov	r0, r7
 c00622e:	f7ff ff35 	bl	c00609c <_free_r>
 c006232:	e7e9      	b.n	c006208 <_realloc_r+0x1c>
 c006234:	4635      	mov	r5, r6
 c006236:	e7e7      	b.n	c006208 <_realloc_r+0x1c>

0c006238 <_sbrk_r>:
 c006238:	b538      	push	{r3, r4, r5, lr}
 c00623a:	2300      	movs	r3, #0
 c00623c:	4c05      	ldr	r4, [pc, #20]	; (c006254 <_sbrk_r+0x1c>)
 c00623e:	4605      	mov	r5, r0
 c006240:	4608      	mov	r0, r1
 c006242:	6023      	str	r3, [r4, #0]
 c006244:	f7fa ff08 	bl	c001058 <_sbrk>
 c006248:	1c43      	adds	r3, r0, #1
 c00624a:	d102      	bne.n	c006252 <_sbrk_r+0x1a>
 c00624c:	6823      	ldr	r3, [r4, #0]
 c00624e:	b103      	cbz	r3, c006252 <_sbrk_r+0x1a>
 c006250:	602b      	str	r3, [r5, #0]
 c006252:	bd38      	pop	{r3, r4, r5, pc}
 c006254:	3000016c 	.word	0x3000016c

0c006258 <__malloc_lock>:
 c006258:	4770      	bx	lr

0c00625a <__malloc_unlock>:
 c00625a:	4770      	bx	lr

0c00625c <_malloc_usable_size_r>:
 c00625c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c006260:	1f18      	subs	r0, r3, #4
 c006262:	2b00      	cmp	r3, #0
 c006264:	bfbc      	itt	lt
 c006266:	580b      	ldrlt	r3, [r1, r0]
 c006268:	18c0      	addlt	r0, r0, r3
 c00626a:	4770      	bx	lr

0c00626c <_init>:
 c00626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00626e:	bf00      	nop
 c006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006272:	bc08      	pop	{r3}
 c006274:	469e      	mov	lr, r3
 c006276:	4770      	bx	lr

0c006278 <_fini>:
 c006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00627a:	bf00      	nop
 c00627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00627e:	bc08      	pop	{r3}
 c006280:	469e      	mov	lr, r3
 c006282:	4770      	bx	lr
 c006284:	0000      	movs	r0, r0
	...

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 b99a 	b.w	c00133c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_TransmitRandomUart>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bb1e 	b.w	c00064c <__acle_se_SECURE_TransmitRandomUart>

0c03e010 <SECURE_RegisterCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 be80 	b.w	c000d18 <__acle_se_SECURE_RegisterCallback>

0c03e018 <SECURE_GenerateRandom>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 bacc 	b.w	c0005b8 <__acle_se_SECURE_GenerateRandom>
